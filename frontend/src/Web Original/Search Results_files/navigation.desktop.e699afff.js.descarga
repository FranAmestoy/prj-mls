(function(){var __webpack_modules__={5099:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=function(modules){var installedModules={};function __nested_webpack_require_57__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__nested_webpack_require_57__),module.l=!0,module.exports}return __nested_webpack_require_57__.m=modules,__nested_webpack_require_57__.c=installedModules,__nested_webpack_require_57__.d=function(exports,name,getter){__nested_webpack_require_57__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__nested_webpack_require_57__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__nested_webpack_require_57__.t=function(value,mode){if(1&mode&&(value=__nested_webpack_require_57__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__nested_webpack_require_57__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__nested_webpack_require_57__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__nested_webpack_require_57__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __nested_webpack_require_57__.d(getter,"a",getter),getter},__nested_webpack_require_57__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__nested_webpack_require_57__.p="",__nested_webpack_require_57__(__nested_webpack_require_57__.s=167)}({0:function(module,exports){module.exports=__webpack_require__(7294)},1:function(module,exports){module.exports=__webpack_require__(4184)},167:function(module,exports,__nested_webpack_require_1761__){module.exports=__nested_webpack_require_1761__(168)},168:function(module,exports,__nested_webpack_require_1851__){var Button=__nested_webpack_require_1851__(17),ButtonText=__nested_webpack_require_1851__(17).ButtonText,DropdownButton=__nested_webpack_require_1851__(169),SplitButton=__nested_webpack_require_1851__(170),ProgressButton=__nested_webpack_require_1851__(174);module.exports=Button,(exports=module.exports).ButtonText=ButtonText,exports.DropdownButton=DropdownButton,exports.SplitButton=SplitButton,exports.ProgressButton=ProgressButton},169:function(module,exports,__nested_webpack_require_2276__){function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var _svg,_svg2,_ChevronDown,_ChevronUP,REACT_ELEMENT_TYPE;function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return self}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}var React=__nested_webpack_require_2276__(0),classNames=__nested_webpack_require_2276__(1),warning=__nested_webpack_require_2276__(3),FloatingMenu=__nested_webpack_require_2276__(18),Button=__nested_webpack_require_2276__(17),ButtonText=__nested_webpack_require_2276__(17).ButtonText,namespace="andes-button-dropdown",ChevronDown=function(){return _svg||(_svg=_jsx("svg",{width:"20px",height:"20px",viewBox:"0 0 20 20",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},void 0,_jsx("title",{},void 0,"Abrir menú de opciones"),_jsx("g",{stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd",fillOpacity:"0.8"},void 0,_jsx("polygon",{className:"".concat(namespace,"__svg-fill"),fillRule:"nonzero",transform:"translate(10.000000, 10.000000) rotate(-90.000000) translate(-10.000000, -10.000000) ",points:"8.4482158 9.99750228 13.243845 5.20187305 12.3953169 4.35334491 6.75115953 9.99750228 12.4003123 15.6466551 13.2488405 14.798127"}))))},ChevronUP=function(){return _svg2||(_svg2=_jsx("svg",{width:"20px",height:"20px",viewBox:"0 0 20 20",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},void 0,_jsx("title",{},void 0,"Cerrar menú de opciones"),_jsx("g",{stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd",fillOpacity:"0.8"},void 0,_jsx("polygon",{className:"".concat(namespace,"__svg-fill"),fillRule:"nonzero",transform:"translate(10.001873, 9.995000) rotate(90.000000) translate(-10.001873, -9.995000) ",points:"8.45008885 9.99250228 13.2457181 5.19687305 12.3971899 4.34834491 6.75303257 9.99250228 12.4021854 15.6416551 13.2507135 14.793127"}))))},DropdownButton=function(_React$PureComponent){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(DropdownButton,_React$PureComponent);var Constructor,protoProps,staticProps,_super=_createSuper(DropdownButton);function DropdownButton(props){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,DropdownButton),(_this=_super.call(this,props)).state={showOptions:!1,cursor:0},_this.showDropdownMenu=_this.showDropdownMenu.bind(_assertThisInitialized(_this)),_this.hide=_this.hide.bind(_assertThisInitialized(_this)),_this.handleFocus=_this.handleFocus.bind(_assertThisInitialized(_this)),_this.handleKeyDown=_this.handleKeyDown.bind(_assertThisInitialized(_this)),_this}return Constructor=DropdownButton,(protoProps=[{key:"showDropdownMenu",value:function(event){event.preventDefault(),this.setState((function(prevState){return{showOptions:!prevState.showOptions}}))}},{key:"hide",value:function(){this.setState({showOptions:!1})}},{key:"handleKeyDown",value:function(e){var cursor=this.state.cursor,listContent=this.props.listContent;38===e.keyCode&&cursor>0?this.setState((function(prevState){return{cursor:prevState.cursor-1}}),this.handleFocus):40===e.keyCode&&cursor<listContent.length-1&&this.setState((function(prevState){return{cursor:prevState.cursor+1}}),this.handleFocus),27===e.keyCode&&this.hide()}},{key:"handleFocus",value:function(){var cursor=this.state.cursor;document.getElementById("".concat(namespace,"--menu__item-").concat(cursor))&&document.getElementById("".concat(namespace,"--menu__item-").concat(cursor)).focus()}},{key:"render",value:function(){var obj,key,value,_this$props=this.props,className=_this$props.className,buttonText=_this$props.buttonText,hierarchy=_this$props.hierarchy,side=_this$props.side,listContent=_this$props.listContent,ariaLabel=_this$props.ariaLabel,showOptions=this.state.showOptions,classes=classNames(namespace,className),listClasses=classNames("".concat(namespace,"--menu"),className,(obj={},key="".concat(namespace,"--menu-").concat(side),value=side,key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj));warning(ariaLabel||buttonText,"<DropdownButton> needs some plain text contents for accessibility reasons. Please add an `ariaLabel` or `buttonText` prop.");var content=listContent?_jsx("ul",{className:listClasses,role:"menu",onKeyDown:this.handleKeyDown},void 0,listContent.map((function(item,i){return _jsx("li",{role:"none"},item.title,item.href?_jsx("a",{role:"menuitem",href:item.href,className:"".concat(namespace,"--menu__item"),onClick:item.onClick,id:"".concat(namespace,"--menu__item-").concat(i)},void 0,item.title):_jsx("button",{role:"menuitem",onClick:item.onClick,className:"".concat(namespace,"--menu__item"),id:"".concat(namespace,"--menu__item-").concat(i)},void 0,item.title))}))):null;return _jsx(FloatingMenu,{placement:side,content:content,visible:showOptions,onClickOutside:this.hide,onMount:this.handleFocus,interactive:!0,popperOptions:{modifiers:[{name:"sameWidth",enabled:!0,fn:function(_ref){var state=_ref.state;state.styles.popper.width="".concat(state.rects.reference.width,"px")},phase:"beforeWrite",requires:["computeStyles"],effect:function(_ref2){var state=_ref2.state;state.elements.popper.style.width="".concat(state.elements.reference.clientWidth,"px")}}]}},void 0,_jsx("div",{className:"".concat(namespace,"-container")},void 0,_jsx(Button,{className:classes,hierarchy:hierarchy,"aria-haspopup":"true","aria-expanded":showOptions,onClick:this.showDropdownMenu,"aria-label":ariaLabel||buttonText},void 0,_jsx(ButtonText,{},void 0,buttonText),showOptions?_ChevronUP||(_ChevronUP=_jsx(ChevronUP,{})):_ChevronDown||(_ChevronDown=_jsx(ChevronDown,{})))))}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),DropdownButton}(React.PureComponent);DropdownButton.defaultProps={className:"",buttonText:"",ariaLabel:"",side:"bottom",hierarchy:"loud",listContent:null},module.exports=DropdownButton},17:function(module,exports,__nested_webpack_require_10946__){var REACT_ELEMENT_TYPE,_excluded=["className","children","size","hierarchy","href","type","disabled","loading","onClick","fullWidth","isFetching","isFetchingComplete","spinner"];function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}var React=__nested_webpack_require_10946__(0),classNames=__nested_webpack_require_10946__(1),Spinner=__nested_webpack_require_10946__(63),Button=function(_ref2){var _classNames,className=_ref2.className,children=_ref2.children,size=_ref2.size,hierarchy=_ref2.hierarchy,href=_ref2.href,type=_ref2.type,disabled=_ref2.disabled,loading=_ref2.loading,onClick=_ref2.onClick,fullWidth=_ref2.fullWidth,isFetching=_ref2.isFetching,isFetchingComplete=_ref2.isFetchingComplete,spinner=_ref2.spinner,props=_objectWithoutProperties(_ref2,_excluded),isDisabled=disabled||loading,sharedProps=function(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({className:classNames("andes-button",className,(_defineProperty(_classNames={},"andes-button--".concat(size),size),_defineProperty(_classNames,"andes-button--".concat(hierarchy),hierarchy),_defineProperty(_classNames,"andes-button--disabled",isDisabled),_defineProperty(_classNames,"andes-button--full-width",fullWidth),_defineProperty(_classNames,"andes-button--fetching",isFetching),_defineProperty(_classNames,"andes-button--fetching-complete",!isFetching&&isFetchingComplete),_classNames)),disabled:isDisabled,onClick:onClick},props),content=_jsx("span",{className:"andes-button__content"},void 0,children);return href?React.createElement("a",_extends({role:"button",href:href},sharedProps,{onClick:onClick}),content):React.createElement("button",_extends({type:type},sharedProps,{onClick:onClick}),content,(isFetching||isFetchingComplete)&&React.createElement(Spinner,_extends({className:"andes-button__spinner"},spinner)))};Button.defaultProps={className:"",disabled:!1,href:"",fullWidth:!1,loading:!1,isFetching:!1,isFetchingComplete:!1,spinner:{highlight:!0,size:"xsmall",modifier:"inline"},hierarchy:"loud",size:"large",type:"button",onClick:null},module.exports=Button,module.exports.ButtonText=function(_ref){return _jsx("span",{className:"andes-button__text"},void 0,_ref.children)}},170:function(module,exports,__nested_webpack_require_15546__){function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var _svg,_svg2,_ChevronDown,_ChevronUP,REACT_ELEMENT_TYPE;function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return self}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}var React=__nested_webpack_require_15546__(0),classNames=__nested_webpack_require_15546__(1),FloatingMenu=__nested_webpack_require_15546__(18),Button=__nested_webpack_require_15546__(17),ButtonText=__nested_webpack_require_15546__(17).ButtonText,_require2=__nested_webpack_require_15546__(7),getPatchedI18n=_require2.getPatchedI18n,AndesContext=_require2.AndesContext,I18nContext=_require2.I18nContext,_require3=__nested_webpack_require_15546__(171),esTranslations=_require3.esTranslations,ptTranslations=_require3.ptTranslations,namespace="andes-button-split",ChevronDown=function(){return _svg||(_svg=_jsx("svg",{width:"20px",height:"20px",viewBox:"0 0 20 20",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},void 0,_jsx("title",{},void 0,"Abrir menú de opciones / Mostrar opciones"),_jsx("g",{stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd",fillOpacity:"0.8"},void 0,_jsx("polygon",{className:"".concat(namespace,"__svg-fill"),fillRule:"nonzero",transform:"translate(10.000000, 10.000000) rotate(-90.000000) translate(-10.000000, -10.000000) ",points:"8.4482158 9.99750228 13.243845 5.20187305 12.3953169 4.35334491 6.75115953 9.99750228 12.4003123 15.6466551 13.2488405 14.798127"}))))},ChevronUP=function(){return _svg2||(_svg2=_jsx("svg",{width:"20px",height:"20px",viewBox:"0 0 20 20",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},void 0,_jsx("title",{},void 0,"Cerrar menú de opciones / Ocultar opciones"),_jsx("g",{stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd",fillOpacity:"0.8"},void 0,_jsx("polygon",{className:"".concat(namespace,"__svg-fill"),fillRule:"nonzero",transform:"translate(10.001873, 9.995000) rotate(90.000000) translate(-10.001873, -9.995000) ",points:"8.45008885 9.99250228 13.2457181 5.19687305 12.3971899 4.34834491 6.75303257 9.99250228 12.4021854 15.6416551 13.2507135 14.793127"}))))},placement={top:"top-end",bottom:"bottom-end",bottomRight:"bottom-start",topRight:"top-start"},SplitButton=function(_React$PureComponent){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(SplitButton,_React$PureComponent);var Constructor,protoProps,staticProps,_super=_createSuper(SplitButton);function SplitButton(props){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,SplitButton),(_this=_super.call(this,props)).state={showOptions:!1,cursor:0},_this.showDropdownMenu=_this.showDropdownMenu.bind(_assertThisInitialized(_this)),_this.hide=_this.hide.bind(_assertThisInitialized(_this)),_this.handleFocus=_this.handleFocus.bind(_assertThisInitialized(_this)),_this.handleKeyDown=_this.handleKeyDown.bind(_assertThisInitialized(_this)),_this}return Constructor=SplitButton,(protoProps=[{key:"showDropdownMenu",value:function(event){event.preventDefault(),this.setState((function(prevState){return{showOptions:!prevState.showOptions}}))}},{key:"hide",value:function(){this.setState({showOptions:!1})}},{key:"handleKeyDown",value:function(e){var cursor=this.state.cursor,listContent=this.props.listContent;38===e.keyCode&&cursor>0?this.setState((function(prevState){return{cursor:prevState.cursor-1}}),this.handleFocus):40===e.keyCode&&cursor<listContent.length-1&&this.setState((function(prevState){return{cursor:prevState.cursor+1}}),this.handleFocus),27===e.keyCode&&this.hide()}},{key:"handleFocus",value:function(){var cursor=this.state.cursor;document.getElementById("".concat(namespace,"--menu__item-").concat(cursor))&&document.getElementById("".concat(namespace,"--menu__item-").concat(cursor)).focus()}},{key:"render",value:function(){var _Button,obj,key,value,_this2=this,_this$props=this.props,className=_this$props.className,buttonText=_this$props.buttonText,hierarchy=_this$props.hierarchy,side=_this$props.side,listContent=_this$props.listContent,onClick=_this$props.onClick,showOptions=this.state.showOptions,classes=classNames(namespace,className),listClasses=classNames("".concat(namespace,"--menu"),className,(obj={},key="".concat(namespace,"--menu-").concat(side),value=side,key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj)),popperOptions="top"===side||"bottom"===side?{modifiers:[{name:"sameWidth",enabled:!0,fn:function(_ref){var state=_ref.state;state.styles.popper.width="".concat(state.rects.reference.width,"px")},phase:"beforeWrite",requires:["computeStyles"],effect:function(_ref2){var state=_ref2.state;state.elements.popper.style.width="".concat(state.elements.reference.clientWidth,"px")}}]}:{modifiers:[{name:"chevronBtnWidth",enabled:!0,fn:function(_ref3){var state=_ref3.state;state.styles.popper.left="".concat(state.elements.reference.firstChild.offsetWidth,"px"),state.styles.popper.right="auto",state.styles.popper.width="max-content"},phase:"beforeWrite",requires:["computeStyles"],effect:function(_ref4){var state=_ref4.state;state.elements.popper.style.left="".concat(state.elements.reference.firstChild.offsetWidth,"px")}}]},content=listContent?_jsx("ul",{className:listClasses,role:"menu",onKeyDown:this.handleKeyDown},void 0,listContent.map((function(item,i){return _jsx("li",{role:"none"},i,item.href?_jsx("a",{role:"menuitem",href:item.href,className:"".concat(namespace,"--menu__item"),onClick:item.onClick,id:"".concat(namespace,"--menu__item-").concat(i)},void 0,item.title):_jsx("button",{role:"menuitem",onClick:item.onClick,className:"".concat(namespace,"--menu__item"),id:"".concat(namespace,"--menu__item-").concat(i)},void 0,item.title))}))):null;return _jsx(AndesContext.Consumer,{},void 0,(function(andesContext){return _jsx(I18nContext.Consumer,{},void 0,(function(i18nContext){var i18n=getPatchedI18n(andesContext,i18nContext,esTranslations,ptTranslations);return _jsx(FloatingMenu,{content:content,placement:placement["".concat(side)],popperOptions:popperOptions,visible:showOptions,onClickOutside:_this2.hide,onMount:_this2.handleFocus,interactive:!0},void 0,_jsx("div",{className:classes},void 0,_Button||(_Button=_jsx(Button,{className:"".concat(namespace,"-text"),onClick:onClick,hierarchy:hierarchy},void 0,_jsx(ButtonText,{},void 0,buttonText))),_jsx(Button,{className:"".concat(namespace,"-chevron"),hierarchy:hierarchy,"aria-haspopup":"true","aria-expanded":showOptions,onClick:_this2.showDropdownMenu,"aria-label":i18n.pgettext(namespace,"menú desplegable")},void 0,showOptions?_ChevronUP||(_ChevronUP=_jsx(ChevronUP,{})):_ChevronDown||(_ChevronDown=_jsx(ChevronDown,{})))))}))}))}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),SplitButton}(React.PureComponent);SplitButton.defaultProps={className:"",buttonText:"",onClick:null,side:"bottomRight",hierarchy:"loud",listContent:null},module.exports=SplitButton},171:function(module,exports,__nested_webpack_require_25284__){var esTranslations=__nested_webpack_require_25284__(172),ptTranslations=__nested_webpack_require_25284__(173);module.exports={esTranslations:esTranslations,ptTranslations:ptTranslations}},172:function(module){module.exports=JSON.parse(\'{"module":"@andes/button-split","locale":"es-AR","translations":{"andes-button-split\\\\u0004menú desplegable":[null,"Menú desplegable"]}}\')},173:function(module){module.exports=JSON.parse(\'{"module":"@andes/button-split","locale":"pt-BR","translations":{"andes-button-split\\\\u0004menú desplegable":[null,"Menú desdobrável"]}}\')},174:function(module,exports,__nested_webpack_require_25871__){var _HIERARCHY_ALLOWED,REACT_ELEMENT_TYPE,_excluded=["children","loading","hierarchy","timeout","className","progressLabel"];function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var React=__nested_webpack_require_25871__(0),classNames=__nested_webpack_require_25871__(1),Button=__nested_webpack_require_25871__(17),useState=React.useState,useEffect=React.useEffect,useRef=React.useRef,STATES_LOADING="loading",STATES_ENTERED="entered",STATES_FINISHED="finished",HIERARCHY_ALLOWED=(_defineProperty(_HIERARCHY_ALLOWED={},"loud",!0),_defineProperty(_HIERARCHY_ALLOWED,"quiet",!0),_HIERARCHY_ALLOWED),ProgressButton=function(_ref){var children=_ref.children,loading=_ref.loading,hierarchy=_ref.hierarchy,timeout=_ref.timeout,className=_ref.className,progressLabel=_ref.progressLabel,props=_objectWithoutProperties(_ref,_excluded),mounted=useRef(!1),_useState2=_slicedToArray(useState([STATES_ENTERED]),2),stages=_useState2[0],setStages=_useState2[1],hierarchySelected=HIERARCHY_ALLOWED[hierarchy]?hierarchy:"loud";useEffect((function(){if(mounted.current){if(!loading){setStages([STATES_LOADING,STATES_FINISHED]);var finishTimeout=setTimeout((function(){setStages([STATES_FINISHED])}),timeout);return function(){return clearTimeout(finishTimeout)}}setStages([STATES_LOADING])}}),[loading,timeout]),useEffect((function(){mounted.current=!0,loading&&setStages([STATES_LOADING])}),[]);var classObject=function(stages){var defaultClasses=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return stages.reduce((function(classes,stage){return _objectSpread(_objectSpread({},classes),{},_defineProperty({},stage,!0))}),defaultClasses)}(stages,{"andes-button--progress__label":Boolean(progressLabel)}),classes=classNames("andes-button--progress",className,classObject);return React.createElement(Button,_extends({hierarchy:hierarchySelected,className:classes},props),progressLabel&&loading?_jsx("span",{className:"andes-button--progress__content"},void 0,progressLabel):children)};ProgressButton.defaultProps={loading:!1,className:"",children:null,progressLabel:"",hierarchy:"loud",timeout:250},module.exports=ProgressButton},18:function(module,exports){module.exports=__webpack_require__(3261)},3:function(module,exports){module.exports=__webpack_require__(5189)},63:function(module,exports){module.exports=__webpack_require__(4631)},7:function(module,exports){module.exports=__webpack_require__(4636)}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5099\n')},1980:function(module,__unused_webpack_exports,__webpack_require__){eval("/* eslint-disable global-require */\nif (true) {\n  module.exports = __webpack_require__(5099);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvYnV0dG9uL21haW4uanM/YTA0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUksSUFBcUM7QUFDekMsRUFBRSwwQ0FBdUQ7QUFDekQsQ0FBQyxNQUFNLEVBRU4iLCJmaWxlIjoiMTk4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGdsb2JhbC1yZXF1aXJlICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnVpbGQvaW5kZXgucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2J1aWxkL2luZGV4LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1980\n")},4205:function(module){eval('module.exports=function(modules){var installedModules={};function __nested_webpack_require_57__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__nested_webpack_require_57__),module.l=!0,module.exports}return __nested_webpack_require_57__.m=modules,__nested_webpack_require_57__.c=installedModules,__nested_webpack_require_57__.d=function(exports,name,getter){__nested_webpack_require_57__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__nested_webpack_require_57__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__nested_webpack_require_57__.t=function(value,mode){if(1&mode&&(value=__nested_webpack_require_57__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__nested_webpack_require_57__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__nested_webpack_require_57__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__nested_webpack_require_57__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __nested_webpack_require_57__.d(getter,"a",getter),getter},__nested_webpack_require_57__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__nested_webpack_require_57__.p="",__nested_webpack_require_57__(__nested_webpack_require_57__.s=131)}({131:function(module,exports,__nested_webpack_require_1636__){module.exports=__nested_webpack_require_1636__(132)},132:function(module,exports){module.exports={ARROW_LEFT:37,ARROW_UP:38,ARROW_RIGHT:39,ARROW_DOWN:40,ENTER:13,ESCAPE:27,SPACE:32,TAB:9,BACKSPACE:8}}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvY29tbW9uL2J1aWxkL2NvbnN0YW50cy9rZXlDb2Rlcy5qcz9iYzEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQyx3QkFBd0IsU0FBUyw2QkFBbUIsV0FBVyx3RUFBd0UsdUNBQXVDLDRCQUE0QixtRUFBbUUsNkJBQW1CLDZCQUE2QixPQUFPLDZCQUFtQixXQUFXLDZCQUFtQixvQkFBb0IsNkJBQW1CLGlDQUFpQyw2QkFBbUIsc0RBQXNELHlCQUF5QixFQUFFLENBQUMsNkJBQW1CLHFCQUFxQixrR0FBa0csZUFBZSw4Q0FBOEMsU0FBUyxFQUFFLENBQUMsNkJBQW1CLHdCQUF3QixrQkFBa0IsNkJBQW1CLDZCQUE2Qix3RUFBd0UsMkJBQTJCLEdBQUcsNkJBQW1CLDJDQUEyQywwQkFBMEIsc0RBQXNELDZCQUFtQix3QkFBd0Isa0JBQWtCLGlCQUFpQixVQUFVLENBQUMsNkJBQW1CLG9CQUFvQixnREFBZ0Qsc0JBQXNCLFlBQVksZUFBZSxPQUFPLDZCQUFtQiw2QkFBNkIsQ0FBQyw2QkFBbUIsNkJBQTZCLDZEQUE2RCxDQUFDLDZCQUFtQixNQUFNLDZCQUFtQixDQUFDLDZCQUFtQixRQUFRLEVBQUUsNEJBQTRCLCtCQUFtQixFQUFFLGVBQWUsK0JBQW1CLE1BQU0sOEJBQThCLGdCQUFnQix1R0FBdUciLCJmaWxlIjoiNDIwNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKG1vZHVsZXMpe3ZhciBpbnN0YWxsZWRNb2R1bGVzPXt9O2Z1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpe2lmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO3ZhciBtb2R1bGU9aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF09e2k6bW9kdWxlSWQsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cyxtb2R1bGUsbW9kdWxlLmV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyksbW9kdWxlLmw9ITAsbW9kdWxlLmV4cG9ydHN9cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ubT1tb2R1bGVzLF9fd2VicGFja19yZXF1aXJlX18uYz1pbnN0YWxsZWRNb2R1bGVzLF9fd2VicGFja19yZXF1aXJlX18uZD1mdW5jdGlvbihleHBvcnRzLG5hbWUsZ2V0dGVyKXtfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cyxuYW1lKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsbmFtZSx7ZW51bWVyYWJsZTohMCxnZXQ6Z2V0dGVyfSl9LF9fd2VicGFja19yZXF1aXJlX18ucj1mdW5jdGlvbihleHBvcnRzKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnQ9ZnVuY3Rpb24odmFsdWUsbW9kZSl7aWYoMSZtb2RlJiYodmFsdWU9X193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSkpLDgmbW9kZSlyZXR1cm4gdmFsdWU7aWYoNCZtb2RlJiZcIm9iamVjdFwiPT10eXBlb2YgdmFsdWUmJnZhbHVlJiZ2YWx1ZS5fX2VzTW9kdWxlKXJldHVybiB2YWx1ZTt2YXIgbnM9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp2YWx1ZX0pLDImbW9kZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHZhbHVlKWZvcih2YXIga2V5IGluIHZhbHVlKV9fd2VicGFja19yZXF1aXJlX18uZChucyxrZXksZnVuY3Rpb24oa2V5KXtyZXR1cm4gdmFsdWVba2V5XX0uYmluZChudWxsLGtleSkpO3JldHVybiBuc30sX193ZWJwYWNrX3JlcXVpcmVfXy5uPWZ1bmN0aW9uKG1vZHVsZSl7dmFyIGdldHRlcj1tb2R1bGUmJm1vZHVsZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIG1vZHVsZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBtb2R1bGV9O3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLFwiYVwiLGdldHRlciksZ2V0dGVyfSxfX3dlYnBhY2tfcmVxdWlyZV9fLm89ZnVuY3Rpb24ob2JqZWN0LHByb3BlcnR5KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCxwcm9wZXJ0eSl9LF9fd2VicGFja19yZXF1aXJlX18ucD1cIlwiLF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zPTEzMSl9KHsxMzE6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7bW9kdWxlLmV4cG9ydHM9X193ZWJwYWNrX3JlcXVpcmVfXygxMzIpfSwxMzI6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXtBUlJPV19MRUZUOjM3LEFSUk9XX1VQOjM4LEFSUk9XX1JJR0hUOjM5LEFSUk9XX0RPV046NDAsRU5URVI6MTMsRVNDQVBFOjI3LFNQQUNFOjMyLFRBQjo5LEJBQ0tTUEFDRTo4fX19KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4205\n')},324:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=function(modules){var installedModules={};function __nested_webpack_require_57__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__nested_webpack_require_57__),module.l=!0,module.exports}return __nested_webpack_require_57__.m=modules,__nested_webpack_require_57__.c=installedModules,__nested_webpack_require_57__.d=function(exports,name,getter){__nested_webpack_require_57__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__nested_webpack_require_57__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__nested_webpack_require_57__.t=function(value,mode){if(1&mode&&(value=__nested_webpack_require_57__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__nested_webpack_require_57__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__nested_webpack_require_57__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__nested_webpack_require_57__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __nested_webpack_require_57__.d(getter,"a",getter),getter},__nested_webpack_require_57__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__nested_webpack_require_57__.p="",__nested_webpack_require_57__(__nested_webpack_require_57__.s=209)}({0:function(module,exports){module.exports=__webpack_require__(7294)},1:function(module,exports){module.exports=__webpack_require__(4184)},2:function(module,exports){module.exports=__webpack_require__(5697)},209:function(module,exports,__nested_webpack_require_1826__){module.exports=__nested_webpack_require_1826__(210)},210:function(module,exports,__nested_webpack_require_1916__){var Image=__nested_webpack_require_1916__(211),CloseListener=__nested_webpack_require_1916__(212),Portal=__nested_webpack_require_1916__(213),Widther=__nested_webpack_require_1916__(214),VisuallyHidden=__nested_webpack_require_1916__(215),canUseDOM=__nested_webpack_require_1916__(24).canUseDOM;module.exports.CloseListener=CloseListener,module.exports.Portal=Portal,module.exports.Widther=Widther,module.exports.VisuallyHidden=VisuallyHidden,module.exports.Image=Image,module.exports.canUseDOM=canUseDOM},211:function(module,exports,__nested_webpack_require_2399__){var REACT_ELEMENT_TYPE;function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}__nested_webpack_require_2399__(0);var Image=function(props){return _jsx("img",{className:props.className,width:props.width,height:props.height,src:props.src,alt:props.title,srcSet:props.src2x?"".concat(props.src," 1x, ").concat(props.src2x," 2x"):null})};Image.defaultProps={title:null,src:null,src2x:null,width:null,height:null,className:null},module.exports=Image},212:function(module,exports,__nested_webpack_require_3574__){function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return self}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var React=__nested_webpack_require_3574__(0),CloseListener=function(_React$Component){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(CloseListener,_React$Component);var Constructor,protoProps,staticProps,_super=_createSuper(CloseListener);function CloseListener(props){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,CloseListener),(_this=_super.call(this,props)).handleRef=_this.handleRef.bind(_assertThisInitialized(_this)),_this.handleDocumentClick=_this.handleDocumentClick.bind(_assertThisInitialized(_this)),_this.pressEscToClose=_this.pressEscToClose.bind(_assertThisInitialized(_this)),_this}return Constructor=CloseListener,(protoProps=[{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleDocumentClick),document.addEventListener("keydown",this.pressEscToClose,!1)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleDocumentClick),document.removeEventListener("keydown",this.pressEscToClose,!1)}},{key:"pressEscToClose",value:function(event){this.props.handleEsc&&27===event.keyCode&&this.props.onCloseOutside(event)}},{key:"handleDocumentClick",value:function(event){this.props.handleClick&&this.element&&!this.element.contains(event.target)&&this.props.onCloseOutside(event)}},{key:"handleRef",value:function(el){var children=this.props.children;this.element=el,children.ref&&"function"==typeof children.ref&&children.ref(el)}},{key:"render",value:function(){return React.cloneElement(this.props.children,{ref:this.handleRef})}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),CloseListener}(React.Component);CloseListener.defaultProps={handleClick:!0,handleEsc:!0},module.exports=CloseListener},213:function(module,exports,__nested_webpack_require_7679__){function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return function(self){if(void 0===self)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return self}(self)}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var React=__nested_webpack_require_7679__(0),createPortal=__nested_webpack_require_7679__(22).createPortal,canUseDOM=__nested_webpack_require_7679__(24).canUseDOM,Portal=function(_React$Component){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(Portal,_React$Component);var Constructor,protoProps,staticProps,_super=_createSuper(Portal);function Portal(){return _classCallCheck(this,Portal),_super.apply(this,arguments)}return Constructor=Portal,(protoProps=[{key:"componentWillUnmount",value:function(){if(this.defaultNode){var defaultNode=this.defaultNode;setTimeout((function(){return document.body.removeChild(defaultNode)}),0)}this.defaultNode=null}},{key:"render",value:function(){return canUseDOM?(this.defaultNode||(this.defaultNode=document.createElement("div"),this.defaultNode.className=this.props.className,document.body.appendChild(this.defaultNode)),createPortal(this.props.children,this.defaultNode)):null}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),Portal}(React.Component);Portal.defaultProps={className:""},module.exports=Portal},214:function(module,exports,__nested_webpack_require_11123__){function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var REACT_ELEMENT_TYPE;function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return function(self){if(void 0===self)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return self}(self)}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var React=__nested_webpack_require_11123__(0),classNames=__nested_webpack_require_11123__(1);module.exports=function(WrappedComponent){var WidtherHOC=function(_React$PureComponent){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(WidtherHOC,_React$PureComponent);var Constructor,protoProps,staticProps,_super=_createSuper(WidtherHOC);function WidtherHOC(){return _classCallCheck(this,WidtherHOC),_super.apply(this,arguments)}return Constructor=WidtherHOC,(protoProps=[{key:"render",value:function(){var className=this.props.className,width=this.props.width;return width&&(className=classNames(className,"andes-width--".concat(width))),null!==width?_jsx("div",{className:"andes-widther"},"widther",React.createElement(WrappedComponent,_extends({},this.props,{className:className}))):React.createElement(WrappedComponent,_extends({key:"widther"},this.props))}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),WidtherHOC}(React.PureComponent);return WidtherHOC.defaultProps=_objectSpread(_objectSpread({},WrappedComponent.defaultProps),{},{className:"",width:null}),WidtherHOC}},215:function(module,exports,__nested_webpack_require_16568__){var REACT_ELEMENT_TYPE;function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}__nested_webpack_require_16568__(0);var _require=__nested_webpack_require_16568__(2);_require.node,_require.arrayOf,_require.oneOfType;module.exports=function(_ref){return _jsx("div",{className:"andes-visually-hidden"},void 0,_ref.children)}},22:function(module,exports){module.exports=__webpack_require__(3935)},24:function(module,exports){module.exports=__webpack_require__(8875)}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvY29tbW9uL2J1aWxkL2luZGV4LnByb2R1Y3Rpb24uanM/OGI2OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUMsd0JBQXdCLFNBQVMsNkJBQW1CLFdBQVcsd0VBQXdFLHVDQUF1Qyw0QkFBNEIsbUVBQW1FLDZCQUFtQiw2QkFBNkIsT0FBTyw2QkFBbUIsV0FBVyw2QkFBbUIsb0JBQW9CLDZCQUFtQixpQ0FBaUMsNkJBQW1CLHNEQUFzRCx5QkFBeUIsRUFBRSxDQUFDLDZCQUFtQixxQkFBcUIsa0dBQWtHLGVBQWUsOENBQThDLFNBQVMsRUFBRSxDQUFDLDZCQUFtQix3QkFBd0Isa0JBQWtCLDZCQUFtQiw2QkFBNkIsd0VBQXdFLDJCQUEyQixHQUFHLDZCQUFtQiwyQ0FBMkMsMEJBQTBCLHNEQUFzRCw2QkFBbUIsd0JBQXdCLGtCQUFrQixpQkFBaUIsVUFBVSxDQUFDLDZCQUFtQixvQkFBb0IsZ0RBQWdELHNCQUFzQixZQUFZLGVBQWUsT0FBTyw2QkFBbUIsNkJBQTZCLENBQUMsNkJBQW1CLDZCQUE2Qiw2REFBNkQsQ0FBQyw2QkFBbUIsTUFBTSw2QkFBbUIsQ0FBQyw2QkFBbUIsUUFBUSxFQUFFLDJCQUEyQixlQUFlLG1CQUFPLENBQUMsSUFBTyxFQUFFLDRCQUE0QixlQUFlLG1CQUFPLENBQUMsSUFBWSxFQUFFLDRCQUE0QixlQUFlLG1CQUFPLENBQUMsSUFBWSxFQUFFLDZCQUE2QiwrQkFBbUIsRUFBRSxlQUFlLCtCQUFtQixNQUFNLDZCQUE2QiwrQkFBbUIsRUFBRSxVQUFVLCtCQUFtQixvQkFBb0IsK0JBQW1CLGFBQWEsK0JBQW1CLGNBQWMsK0JBQW1CLHFCQUFxQiwrQkFBbUIsZ0JBQWdCLCtCQUFtQixlQUFlLGtOQUFrTiw2QkFBNkIsK0JBQW1CLEVBQUUsdUJBQXVCLHVDQUF1QyxtSEFBbUgsMkVBQTJFLHNDQUFzQyxnQkFBZ0IsNkNBQTZDLDBCQUEwQixpREFBaUQsaUJBQWlCLGlDQUFpQywwQkFBMEIsMkhBQTJILG1DQUFtQyxFQUFFLE9BQU8scUdBQXFHLCtCQUFtQixJQUFJLDBCQUEwQixtQkFBbUIsNktBQTZLLEdBQUcsb0JBQW9CLHFFQUFxRSxzQkFBc0IsNkJBQTZCLCtCQUFtQixFQUFFLHNCQUFzQix5RkFBeUYsa0JBQWtCLGVBQWUsNEdBQTRHLE9BQU8seUNBQXlDLFlBQVksZUFBZSxLQUFLLHdCQUF3QixtTEFBbUwsOEJBQThCLDREQUE0RCx1QkFBdUIsT0FBTywrQkFBK0IseUNBQXlDLDREQUE0RCxtQ0FBbUMscUNBQXFDLElBQUksZ0ZBQWdGLE9BQU8sU0FBUyxVQUFVLEdBQUcsa0JBQWtCLDBDQUEwQyw4QkFBOEIsZ0RBQWdELG9EQUFvRCx3Q0FBd0MsZ0RBQWdELCtDQUErQyx5RUFBeUUsaUdBQWlHLG9DQUFvQyxzQ0FBc0MsdUdBQXVHLFlBQVksNEJBQTRCLCtFQUErRSw2Q0FBNkMsS0FBSyxVQUFVLCtCQUFtQiw2Q0FBNkMsK0JBQStCLDhIQUE4SCxtRUFBbUUsYUFBYSw0Q0FBNEMsOENBQThDLFlBQVksbURBQW1ELGlDQUFpQywwRUFBMEUsOEJBQThCLFVBQVUsc0NBQXNDLCtGQUErRixpU0FBaVMsK0NBQStDLHlDQUF5QywwSEFBMEgsRUFBRSw0Q0FBNEMsZ0lBQWdJLEVBQUUsNENBQTRDLDRFQUE0RSxFQUFFLGdEQUFnRCw4R0FBOEcsRUFBRSxtQ0FBbUMsaUNBQWlDLGlGQUFpRixFQUFFLDhCQUE4QiwrQ0FBK0MsbUJBQW1CLEdBQUcsK0pBQStKLFlBQVksZ0JBQWdCLGtCQUFrQiw0QkFBNEIsNEJBQTRCLDhCQUE4Qiw2QkFBNkIsK0JBQW1CLEVBQUUsc0JBQXNCLHlGQUF5RixrQkFBa0IsZUFBZSw0R0FBNEcsT0FBTywrQ0FBK0MsK0ZBQStGLHlDQUF5QyxZQUFZLGVBQWUsS0FBSyx3QkFBd0IsbUxBQW1MLDhCQUE4Qiw0REFBNEQsdUJBQXVCLE9BQU8sK0JBQStCLHlDQUF5Qyw0REFBNEQsbUNBQW1DLHFDQUFxQyxJQUFJLGdGQUFnRixPQUFPLFNBQVMsVUFBVSxHQUFHLGtCQUFrQiwwQ0FBMEMsOEJBQThCLGdEQUFnRCxvREFBb0Qsd0NBQXdDLGdEQUFnRCwrQ0FBK0MseUVBQXlFLGlHQUFpRyxzQkFBc0IsdUdBQXVHLFlBQVksT0FBTyw0QkFBNEIsK0VBQStFLDZDQUE2QyxLQUFLLFVBQVUsK0JBQW1CLGlCQUFpQiwrQkFBbUIsNEJBQTRCLCtCQUFtQixpREFBaUQsK0JBQStCLDhIQUE4SCxtRUFBbUUsYUFBYSw0Q0FBNEMsOENBQThDLFlBQVksbURBQW1ELDBCQUEwQixtRUFBbUUsa0JBQWtCLGlFQUFpRSx3Q0FBd0MsNENBQTRDLHFCQUFxQixpQ0FBaUMsdUJBQXVCLDhDQUE4QyxLQUFLLHVCQUF1QixFQUFFLDhCQUE4QiwyT0FBMk8sK0pBQStKLFlBQVksU0FBUyxrQkFBa0IscUJBQXFCLGFBQWEsdUJBQXVCLDZCQUE2QixnQ0FBbUIsRUFBRSxzQkFBc0IseUZBQXlGLGtCQUFrQixlQUFlLDRHQUE0RyxPQUFPLHdDQUF3Qyw2QkFBNkIsaUNBQWlDLGlEQUFpRCx1REFBdUQsOERBQThELGtDQUFrQyxZQUFZLCtCQUErQixZQUFZLG1CQUFtQixLQUFLLDhDQUE4QyxzREFBc0Qsd0NBQXdDLDRKQUE0Siw4RUFBOEUsR0FBRyxjQUFjLHdDQUF3QyxpREFBaUQsc0RBQXNELHFCQUFxQix1QkFBdUIsdUNBQXVDLG1IQUFtSCwyRUFBMkUsc0NBQXNDLGdCQUFnQiw2Q0FBNkMsMEJBQTBCLGlEQUFpRCxpQkFBaUIsaUNBQWlDLDBCQUEwQiwySEFBMkgsbUNBQW1DLEVBQUUsT0FBTyxxR0FBcUcsb0JBQW9CLGdEQUFnRCxZQUFZLG1CQUFtQixLQUFLLHdCQUF3QixrR0FBa0csY0FBYyx3QkFBd0IsK0NBQStDLCtGQUErRix5Q0FBeUMsWUFBWSxlQUFlLEtBQUssd0JBQXdCLG1MQUFtTCw4QkFBOEIsNERBQTRELHVCQUF1QixPQUFPLCtCQUErQix5Q0FBeUMsNERBQTRELG1DQUFtQyxxQ0FBcUMsSUFBSSxnRkFBZ0YsT0FBTyxTQUFTLFVBQVUsR0FBRyxrQkFBa0IsMENBQTBDLDhCQUE4QixnREFBZ0Qsb0RBQW9ELHdDQUF3QyxnREFBZ0QsK0NBQStDLHlFQUF5RSxpR0FBaUcsc0JBQXNCLHVHQUF1RyxZQUFZLE9BQU8sNEJBQTRCLCtFQUErRSw2Q0FBNkMsS0FBSyxVQUFVLGdDQUFtQixlQUFlLGdDQUFtQixJQUFJLDBDQUEwQyw4Q0FBOEMsK0JBQStCLDhIQUE4SCxtRUFBbUUsYUFBYSw0Q0FBNEMsOENBQThDLFlBQVksbURBQW1ELGtDQUFrQyx1RUFBdUUsc0JBQXNCLHFFQUFxRSw0Q0FBNEMsOEJBQThCLDBEQUEwRCx1R0FBdUcsMEJBQTBCLDJEQUEyRCxhQUFhLG9CQUFvQixtREFBbUQsY0FBYyxlQUFlLCtKQUErSixZQUFZLGFBQWEsc0JBQXNCLDZEQUE2RCxrQ0FBa0MsRUFBRSx3QkFBd0IsY0FBYyw2QkFBNkIsZ0NBQW1CLEVBQUUsdUJBQXVCLHVDQUF1QyxtSEFBbUgsMkVBQTJFLHNDQUFzQyxnQkFBZ0IsNkNBQTZDLDBCQUEwQixpREFBaUQsaUJBQWlCLGlDQUFpQywwQkFBMEIsMkhBQTJILG1DQUFtQyxFQUFFLE9BQU8scUdBQXFHLGdDQUFtQixJQUFJLGFBQWEsZ0NBQW1CLElBQUksa0RBQWtELDhCQUE4QixtQkFBbUIsa0NBQWtDLHdCQUF3Qiw2QkFBNkIsZUFBZSxtQkFBTyxDQUFDLElBQVcsRUFBRSw2QkFBNkIsZUFBZSxtQkFBTyxDQUFDLElBQU8sR0FBRyIsImZpbGUiOiIzMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihtb2R1bGVzKXt2YXIgaW5zdGFsbGVkTW9kdWxlcz17fTtmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKXtpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0czt2YXIgbW9kdWxlPWluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdPXtpOm1vZHVsZUlkLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsbW9kdWxlLG1vZHVsZS5leHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pLG1vZHVsZS5sPSEwLG1vZHVsZS5leHBvcnRzfXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLm09bW9kdWxlcyxfX3dlYnBhY2tfcmVxdWlyZV9fLmM9aW5zdGFsbGVkTW9kdWxlcyxfX3dlYnBhY2tfcmVxdWlyZV9fLmQ9ZnVuY3Rpb24oZXhwb3J0cyxuYW1lLGdldHRlcil7X193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsbmFtZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLG5hbWUse2VudW1lcmFibGU6ITAsZ2V0OmdldHRlcn0pfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnI9ZnVuY3Rpb24oZXhwb3J0cyl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sX193ZWJwYWNrX3JlcXVpcmVfXy50PWZ1bmN0aW9uKHZhbHVlLG1vZGUpe2lmKDEmbW9kZSYmKHZhbHVlPV9fd2VicGFja19yZXF1aXJlX18odmFsdWUpKSw4Jm1vZGUpcmV0dXJuIHZhbHVlO2lmKDQmbW9kZSYmXCJvYmplY3RcIj09dHlwZW9mIHZhbHVlJiZ2YWx1ZSYmdmFsdWUuX19lc01vZHVsZSlyZXR1cm4gdmFsdWU7dmFyIG5zPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dmFsdWV9KSwyJm1vZGUmJlwic3RyaW5nXCIhPXR5cGVvZiB2YWx1ZSlmb3IodmFyIGtleSBpbiB2YWx1ZSlfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsa2V5LGZ1bmN0aW9uKGtleSl7cmV0dXJuIHZhbHVlW2tleV19LmJpbmQobnVsbCxrZXkpKTtyZXR1cm4gbnN9LF9fd2VicGFja19yZXF1aXJlX18ubj1mdW5jdGlvbihtb2R1bGUpe3ZhciBnZXR0ZXI9bW9kdWxlJiZtb2R1bGUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBtb2R1bGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbW9kdWxlfTtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlcixcImFcIixnZXR0ZXIpLGdldHRlcn0sX193ZWJwYWNrX3JlcXVpcmVfXy5vPWZ1bmN0aW9uKG9iamVjdCxwcm9wZXJ0eSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QscHJvcGVydHkpfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnA9XCJcIixfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucz0yMDkpfSh7MDpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcInJlYWN0XCIpfSwxOmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwiY2xhc3NuYW1lc1wiKX0sMjpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcInByb3AtdHlwZXNcIil9LDIwOTpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXttb2R1bGUuZXhwb3J0cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDIxMCl9LDIxMDpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXt2YXIgSW1hZ2U9X193ZWJwYWNrX3JlcXVpcmVfXygyMTEpLENsb3NlTGlzdGVuZXI9X193ZWJwYWNrX3JlcXVpcmVfXygyMTIpLFBvcnRhbD1fX3dlYnBhY2tfcmVxdWlyZV9fKDIxMyksV2lkdGhlcj1fX3dlYnBhY2tfcmVxdWlyZV9fKDIxNCksVmlzdWFsbHlIaWRkZW49X193ZWJwYWNrX3JlcXVpcmVfXygyMTUpLGNhblVzZURPTT1fX3dlYnBhY2tfcmVxdWlyZV9fKDI0KS5jYW5Vc2VET007bW9kdWxlLmV4cG9ydHMuQ2xvc2VMaXN0ZW5lcj1DbG9zZUxpc3RlbmVyLG1vZHVsZS5leHBvcnRzLlBvcnRhbD1Qb3J0YWwsbW9kdWxlLmV4cG9ydHMuV2lkdGhlcj1XaWR0aGVyLG1vZHVsZS5leHBvcnRzLlZpc3VhbGx5SGlkZGVuPVZpc3VhbGx5SGlkZGVuLG1vZHVsZS5leHBvcnRzLkltYWdlPUltYWdlLG1vZHVsZS5leHBvcnRzLmNhblVzZURPTT1jYW5Vc2VET019LDIxMTpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXt2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFO2Z1bmN0aW9uIF9qc3godHlwZSxwcm9wcyxrZXksY2hpbGRyZW4pe1JFQUNUX0VMRU1FTlRfVFlQRXx8KFJFQUNUX0VMRU1FTlRfVFlQRT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyk7dmFyIGRlZmF1bHRQcm9wcz10eXBlJiZ0eXBlLmRlZmF1bHRQcm9wcyxjaGlsZHJlbkxlbmd0aD1hcmd1bWVudHMubGVuZ3RoLTM7aWYocHJvcHN8fDA9PT1jaGlsZHJlbkxlbmd0aHx8KHByb3BzPXtjaGlsZHJlbjp2b2lkIDB9KSwxPT09Y2hpbGRyZW5MZW5ndGgpcHJvcHMuY2hpbGRyZW49Y2hpbGRyZW47ZWxzZSBpZihjaGlsZHJlbkxlbmd0aD4xKXtmb3IodmFyIGNoaWxkQXJyYXk9bmV3IEFycmF5KGNoaWxkcmVuTGVuZ3RoKSxpPTA7aTxjaGlsZHJlbkxlbmd0aDtpKyspY2hpbGRBcnJheVtpXT1hcmd1bWVudHNbaSszXTtwcm9wcy5jaGlsZHJlbj1jaGlsZEFycmF5fWlmKHByb3BzJiZkZWZhdWx0UHJvcHMpZm9yKHZhciBwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpdm9pZCAwPT09cHJvcHNbcHJvcE5hbWVdJiYocHJvcHNbcHJvcE5hbWVdPWRlZmF1bHRQcm9wc1twcm9wTmFtZV0pO2Vsc2UgcHJvcHN8fChwcm9wcz1kZWZhdWx0UHJvcHN8fHt9KTtyZXR1cm57JCR0eXBlb2Y6UkVBQ1RfRUxFTUVOVF9UWVBFLHR5cGU6dHlwZSxrZXk6dm9pZCAwPT09a2V5P251bGw6XCJcIitrZXkscmVmOm51bGwscHJvcHM6cHJvcHMsX293bmVyOm51bGx9fV9fd2VicGFja19yZXF1aXJlX18oMCk7dmFyIEltYWdlPWZ1bmN0aW9uKHByb3BzKXtyZXR1cm4gX2pzeChcImltZ1wiLHtjbGFzc05hbWU6cHJvcHMuY2xhc3NOYW1lLHdpZHRoOnByb3BzLndpZHRoLGhlaWdodDpwcm9wcy5oZWlnaHQsc3JjOnByb3BzLnNyYyxhbHQ6cHJvcHMudGl0bGUsc3JjU2V0OnByb3BzLnNyYzJ4P1wiXCIuY29uY2F0KHByb3BzLnNyYyxcIiAxeCwgXCIpLmNvbmNhdChwcm9wcy5zcmMyeCxcIiAyeFwiKTpudWxsfSl9O0ltYWdlLmRlZmF1bHRQcm9wcz17dGl0bGU6bnVsbCxzcmM6bnVsbCxzcmMyeDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwsY2xhc3NOYW1lOm51bGx9LG1vZHVsZS5leHBvcnRzPUltYWdlfSwyMTI6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybihfdHlwZW9mPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqfTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9ian0pKG9iail9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fCExLGRlc2NyaXB0b3IuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGRlc2NyaXB0b3ImJihkZXNjcmlwdG9yLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpfX1mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobyxwKXtyZXR1cm4oX3NldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24obyxwKXtyZXR1cm4gby5fX3Byb3RvX189cCxvfSkobyxwKX1mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCl7dmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3Q9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcmVzdWx0LFN1cGVyPV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKTtpZihoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KXt2YXIgTmV3VGFyZ2V0PV9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtyZXN1bHQ9UmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsYXJndW1lbnRzLE5ld1RhcmdldCl9ZWxzZSByZXN1bHQ9U3VwZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLHJlc3VsdCl9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoY2FsbCYmKFwib2JqZWN0XCI9PT1fdHlwZW9mKGNhbGwpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBjYWxsKSlyZXR1cm4gY2FsbDtpZih2b2lkIDAhPT1jYWxsKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKX1mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpe2lmKHZvaWQgMD09PXNlbGYpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiBzZWxmfWZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKXtyZXR1cm4oX2dldFByb3RvdHlwZU9mPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24obyl7cmV0dXJuIG8uX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyl9KShvKX12YXIgUmVhY3Q9X193ZWJwYWNrX3JlcXVpcmVfXygwKSxDbG9zZUxpc3RlbmVyPWZ1bmN0aW9uKF9SZWFjdCRDb21wb25lbnQpeyFmdW5jdGlvbihzdWJDbGFzcyxzdXBlckNsYXNzKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBzdXBlckNsYXNzJiZudWxsIT09c3VwZXJDbGFzcyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksc3VwZXJDbGFzcyYmX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpfShDbG9zZUxpc3RlbmVyLF9SZWFjdCRDb21wb25lbnQpO3ZhciBDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzLF9zdXBlcj1fY3JlYXRlU3VwZXIoQ2xvc2VMaXN0ZW5lcik7ZnVuY3Rpb24gQ2xvc2VMaXN0ZW5lcihwcm9wcyl7dmFyIF90aGlzO3JldHVybiBmdW5jdGlvbihpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLENsb3NlTGlzdGVuZXIpLChfdGhpcz1fc3VwZXIuY2FsbCh0aGlzLHByb3BzKSkuaGFuZGxlUmVmPV90aGlzLmhhbmRsZVJlZi5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSxfdGhpcy5oYW5kbGVEb2N1bWVudENsaWNrPV90aGlzLmhhbmRsZURvY3VtZW50Q2xpY2suYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksX3RoaXMucHJlc3NFc2NUb0Nsb3NlPV90aGlzLnByZXNzRXNjVG9DbG9zZS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSxfdGhpc31yZXR1cm4gQ29uc3RydWN0b3I9Q2xvc2VMaXN0ZW5lciwocHJvdG9Qcm9wcz1be2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2spLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5wcmVzc0VzY1RvQ2xvc2UsITEpfX0se2tleTpcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2spLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5wcmVzc0VzY1RvQ2xvc2UsITEpfX0se2tleTpcInByZXNzRXNjVG9DbG9zZVwiLHZhbHVlOmZ1bmN0aW9uKGV2ZW50KXt0aGlzLnByb3BzLmhhbmRsZUVzYyYmMjc9PT1ldmVudC5rZXlDb2RlJiZ0aGlzLnByb3BzLm9uQ2xvc2VPdXRzaWRlKGV2ZW50KX19LHtrZXk6XCJoYW5kbGVEb2N1bWVudENsaWNrXCIsdmFsdWU6ZnVuY3Rpb24oZXZlbnQpe3RoaXMucHJvcHMuaGFuZGxlQ2xpY2smJnRoaXMuZWxlbWVudCYmIXRoaXMuZWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpJiZ0aGlzLnByb3BzLm9uQ2xvc2VPdXRzaWRlKGV2ZW50KX19LHtrZXk6XCJoYW5kbGVSZWZcIix2YWx1ZTpmdW5jdGlvbihlbCl7dmFyIGNoaWxkcmVuPXRoaXMucHJvcHMuY2hpbGRyZW47dGhpcy5lbGVtZW50PWVsLGNoaWxkcmVuLnJlZiYmXCJmdW5jdGlvblwiPT10eXBlb2YgY2hpbGRyZW4ucmVmJiZjaGlsZHJlbi5yZWYoZWwpfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuLHtyZWY6dGhpcy5oYW5kbGVSZWZ9KX19XSkmJl9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKSxzdGF0aWNQcm9wcyYmX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvcixcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLENsb3NlTGlzdGVuZXJ9KFJlYWN0LkNvbXBvbmVudCk7Q2xvc2VMaXN0ZW5lci5kZWZhdWx0UHJvcHM9e2hhbmRsZUNsaWNrOiEwLGhhbmRsZUVzYzohMH0sbW9kdWxlLmV4cG9ydHM9Q2xvc2VMaXN0ZW5lcn0sMjEzOmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2Z1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4oX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9ian06ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmp9KShvYmopfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHwhMSxkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBkZXNjcmlwdG9yJiYoZGVzY3JpcHRvci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKX19ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7cmV0dXJuKF9zZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKG8scCl7cmV0dXJuIG8uX19wcm90b19fPXAsb30pKG8scCl9ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpe3ZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0PWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHJlc3VsdCxTdXBlcj1fZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCk7aWYoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCl7dmFyIE5ld1RhcmdldD1fZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7cmVzdWx0PVJlZmxlY3QuY29uc3RydWN0KFN1cGVyLGFyZ3VtZW50cyxOZXdUYXJnZXQpfWVsc2UgcmVzdWx0PVN1cGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxyZXN1bHQpfX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKGNhbGwmJihcIm9iamVjdFwiPT09X3R5cGVvZihjYWxsKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgY2FsbCkpcmV0dXJuIGNhbGw7aWYodm9pZCAwIT09Y2FsbCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHNlbGYpe2lmKHZvaWQgMD09PXNlbGYpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiBzZWxmfShzZWxmKX1mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobyl7cmV0dXJuKF9nZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKG8pe3JldHVybiBvLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pfSkobyl9dmFyIFJlYWN0PV9fd2VicGFja19yZXF1aXJlX18oMCksY3JlYXRlUG9ydGFsPV9fd2VicGFja19yZXF1aXJlX18oMjIpLmNyZWF0ZVBvcnRhbCxjYW5Vc2VET009X193ZWJwYWNrX3JlcXVpcmVfXygyNCkuY2FuVXNlRE9NLFBvcnRhbD1mdW5jdGlvbihfUmVhY3QkQ29tcG9uZW50KXshZnVuY3Rpb24oc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygc3VwZXJDbGFzcyYmbnVsbCE9PXN1cGVyQ2xhc3MpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3N1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3Msd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcyxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHN1cGVyQ2xhc3MmJl9zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKX0oUG9ydGFsLF9SZWFjdCRDb21wb25lbnQpO3ZhciBDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzLF9zdXBlcj1fY3JlYXRlU3VwZXIoUG9ydGFsKTtmdW5jdGlvbiBQb3J0YWwoKXtyZXR1cm4gX2NsYXNzQ2FsbENoZWNrKHRoaXMsUG9ydGFsKSxfc3VwZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBDb25zdHJ1Y3Rvcj1Qb3J0YWwsKHByb3RvUHJvcHM9W3trZXk6XCJjb21wb25lbnRXaWxsVW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5kZWZhdWx0Tm9kZSl7dmFyIGRlZmF1bHROb2RlPXRoaXMuZGVmYXVsdE5vZGU7c2V0VGltZW91dCgoZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkZWZhdWx0Tm9kZSl9KSwwKX10aGlzLmRlZmF1bHROb2RlPW51bGx9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gY2FuVXNlRE9NPyh0aGlzLmRlZmF1bHROb2RlfHwodGhpcy5kZWZhdWx0Tm9kZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuZGVmYXVsdE5vZGUuY2xhc3NOYW1lPXRoaXMucHJvcHMuY2xhc3NOYW1lLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSkpLGNyZWF0ZVBvcnRhbCh0aGlzLnByb3BzLmNoaWxkcmVuLHRoaXMuZGVmYXVsdE5vZGUpKTpudWxsfX1dKSYmX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpLHN0YXRpY1Byb3BzJiZfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyksT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksUG9ydGFsfShSZWFjdC5Db21wb25lbnQpO1BvcnRhbC5kZWZhdWx0UHJvcHM9e2NsYXNzTmFtZTpcIlwifSxtb2R1bGUuZXhwb3J0cz1Qb3J0YWx9LDIxNDpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtmdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuKF90eXBlb2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmp9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqfSkob2JqKX1mdW5jdGlvbiBvd25LZXlzKG9iamVjdCxlbnVtZXJhYmxlT25seSl7dmFyIGtleXM9T2JqZWN0LmtleXMob2JqZWN0KTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgc3ltYm9scz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7ZW51bWVyYWJsZU9ubHkmJihzeW1ib2xzPXN5bWJvbHMuZmlsdGVyKChmdW5jdGlvbihzeW0pe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCxzeW0pLmVudW1lcmFibGV9KSkpLGtleXMucHVzaC5hcHBseShrZXlzLHN5bWJvbHMpfXJldHVybiBrZXlzfWZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPW51bGwhPWFyZ3VtZW50c1tpXT9hcmd1bWVudHNbaV06e307aSUyP293bktleXMoT2JqZWN0KHNvdXJjZSksITApLmZvckVhY2goKGZ1bmN0aW9uKGtleSl7X2RlZmluZVByb3BlcnR5KHRhcmdldCxrZXksc291cmNlW2tleV0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTpvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKChmdW5jdGlvbihrZXkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsa2V5LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLGtleSkpfSkpfXJldHVybiB0YXJnZXR9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaixrZXksdmFsdWUpe3JldHVybiBrZXkgaW4gb2JqP09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWx1ZSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOm9ialtrZXldPXZhbHVlLG9ian12YXIgUkVBQ1RfRUxFTUVOVF9UWVBFO2Z1bmN0aW9uIF9qc3godHlwZSxwcm9wcyxrZXksY2hpbGRyZW4pe1JFQUNUX0VMRU1FTlRfVFlQRXx8KFJFQUNUX0VMRU1FTlRfVFlQRT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyk7dmFyIGRlZmF1bHRQcm9wcz10eXBlJiZ0eXBlLmRlZmF1bHRQcm9wcyxjaGlsZHJlbkxlbmd0aD1hcmd1bWVudHMubGVuZ3RoLTM7aWYocHJvcHN8fDA9PT1jaGlsZHJlbkxlbmd0aHx8KHByb3BzPXtjaGlsZHJlbjp2b2lkIDB9KSwxPT09Y2hpbGRyZW5MZW5ndGgpcHJvcHMuY2hpbGRyZW49Y2hpbGRyZW47ZWxzZSBpZihjaGlsZHJlbkxlbmd0aD4xKXtmb3IodmFyIGNoaWxkQXJyYXk9bmV3IEFycmF5KGNoaWxkcmVuTGVuZ3RoKSxpPTA7aTxjaGlsZHJlbkxlbmd0aDtpKyspY2hpbGRBcnJheVtpXT1hcmd1bWVudHNbaSszXTtwcm9wcy5jaGlsZHJlbj1jaGlsZEFycmF5fWlmKHByb3BzJiZkZWZhdWx0UHJvcHMpZm9yKHZhciBwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpdm9pZCAwPT09cHJvcHNbcHJvcE5hbWVdJiYocHJvcHNbcHJvcE5hbWVdPWRlZmF1bHRQcm9wc1twcm9wTmFtZV0pO2Vsc2UgcHJvcHN8fChwcm9wcz1kZWZhdWx0UHJvcHN8fHt9KTtyZXR1cm57JCR0eXBlb2Y6UkVBQ1RfRUxFTUVOVF9UWVBFLHR5cGU6dHlwZSxrZXk6dm9pZCAwPT09a2V5P251bGw6XCJcIitrZXkscmVmOm51bGwscHJvcHM6cHJvcHMsX293bmVyOm51bGx9fWZ1bmN0aW9uIF9leHRlbmRzKCl7cmV0dXJuKF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSYmKHRhcmdldFtrZXldPXNvdXJjZVtrZXldKX1yZXR1cm4gdGFyZ2V0fSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHwhMSxkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBkZXNjcmlwdG9yJiYoZGVzY3JpcHRvci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKX19ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8scCl7cmV0dXJuKF9zZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKG8scCl7cmV0dXJuIG8uX19wcm90b19fPXAsb30pKG8scCl9ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpe3ZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0PWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHJlc3VsdCxTdXBlcj1fZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCk7aWYoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCl7dmFyIE5ld1RhcmdldD1fZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7cmVzdWx0PVJlZmxlY3QuY29uc3RydWN0KFN1cGVyLGFyZ3VtZW50cyxOZXdUYXJnZXQpfWVsc2UgcmVzdWx0PVN1cGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcyxyZXN1bHQpfX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKGNhbGwmJihcIm9iamVjdFwiPT09X3R5cGVvZihjYWxsKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgY2FsbCkpcmV0dXJuIGNhbGw7aWYodm9pZCAwIT09Y2FsbCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGZ1bmN0aW9uKHNlbGYpe2lmKHZvaWQgMD09PXNlbGYpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiBzZWxmfShzZWxmKX1mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobyl7cmV0dXJuKF9nZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKG8pe3JldHVybiBvLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pfSkobyl9dmFyIFJlYWN0PV9fd2VicGFja19yZXF1aXJlX18oMCksY2xhc3NOYW1lcz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKFdyYXBwZWRDb21wb25lbnQpe3ZhciBXaWR0aGVySE9DPWZ1bmN0aW9uKF9SZWFjdCRQdXJlQ29tcG9uZW50KXshZnVuY3Rpb24oc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygc3VwZXJDbGFzcyYmbnVsbCE9PXN1cGVyQ2xhc3MpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3N1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3Msd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcyxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHN1cGVyQ2xhc3MmJl9zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKX0oV2lkdGhlckhPQyxfUmVhY3QkUHVyZUNvbXBvbmVudCk7dmFyIENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMsX3N1cGVyPV9jcmVhdGVTdXBlcihXaWR0aGVySE9DKTtmdW5jdGlvbiBXaWR0aGVySE9DKCl7cmV0dXJuIF9jbGFzc0NhbGxDaGVjayh0aGlzLFdpZHRoZXJIT0MpLF9zdXBlci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIENvbnN0cnVjdG9yPVdpZHRoZXJIT0MsKHByb3RvUHJvcHM9W3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBjbGFzc05hbWU9dGhpcy5wcm9wcy5jbGFzc05hbWUsd2lkdGg9dGhpcy5wcm9wcy53aWR0aDtyZXR1cm4gd2lkdGgmJihjbGFzc05hbWU9Y2xhc3NOYW1lcyhjbGFzc05hbWUsXCJhbmRlcy13aWR0aC0tXCIuY29uY2F0KHdpZHRoKSkpLG51bGwhPT13aWR0aD9fanN4KFwiZGl2XCIse2NsYXNzTmFtZTpcImFuZGVzLXdpZHRoZXJcIn0sXCJ3aWR0aGVyXCIsUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LF9leHRlbmRzKHt9LHRoaXMucHJvcHMse2NsYXNzTmFtZTpjbGFzc05hbWV9KSkpOlJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCxfZXh0ZW5kcyh7a2V5Olwid2lkdGhlclwifSx0aGlzLnByb3BzKSl9fV0pJiZfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyksc3RhdGljUHJvcHMmJl9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSxXaWR0aGVySE9DfShSZWFjdC5QdXJlQ29tcG9uZW50KTtyZXR1cm4gV2lkdGhlckhPQy5kZWZhdWx0UHJvcHM9X29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LFdyYXBwZWRDb21wb25lbnQuZGVmYXVsdFByb3BzKSx7fSx7Y2xhc3NOYW1lOlwiXCIsd2lkdGg6bnVsbH0pLFdpZHRoZXJIT0N9fSwyMTU6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7dmFyIFJFQUNUX0VMRU1FTlRfVFlQRTtmdW5jdGlvbiBfanN4KHR5cGUscHJvcHMsa2V5LGNoaWxkcmVuKXtSRUFDVF9FTEVNRU5UX1RZUEV8fChSRUFDVF9FTEVNRU5UX1RZUEU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yJiZTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKXx8NjAxMDMpO3ZhciBkZWZhdWx0UHJvcHM9dHlwZSYmdHlwZS5kZWZhdWx0UHJvcHMsY2hpbGRyZW5MZW5ndGg9YXJndW1lbnRzLmxlbmd0aC0zO2lmKHByb3BzfHwwPT09Y2hpbGRyZW5MZW5ndGh8fChwcm9wcz17Y2hpbGRyZW46dm9pZCAwfSksMT09PWNoaWxkcmVuTGVuZ3RoKXByb3BzLmNoaWxkcmVuPWNoaWxkcmVuO2Vsc2UgaWYoY2hpbGRyZW5MZW5ndGg+MSl7Zm9yKHZhciBjaGlsZEFycmF5PW5ldyBBcnJheShjaGlsZHJlbkxlbmd0aCksaT0wO2k8Y2hpbGRyZW5MZW5ndGg7aSsrKWNoaWxkQXJyYXlbaV09YXJndW1lbnRzW2krM107cHJvcHMuY2hpbGRyZW49Y2hpbGRBcnJheX1pZihwcm9wcyYmZGVmYXVsdFByb3BzKWZvcih2YXIgcHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKXZvaWQgMD09PXByb3BzW3Byb3BOYW1lXSYmKHByb3BzW3Byb3BOYW1lXT1kZWZhdWx0UHJvcHNbcHJvcE5hbWVdKTtlbHNlIHByb3BzfHwocHJvcHM9ZGVmYXVsdFByb3BzfHx7fSk7cmV0dXJueyQkdHlwZW9mOlJFQUNUX0VMRU1FTlRfVFlQRSx0eXBlOnR5cGUsa2V5OnZvaWQgMD09PWtleT9udWxsOlwiXCIra2V5LHJlZjpudWxsLHByb3BzOnByb3BzLF9vd25lcjpudWxsfX1fX3dlYnBhY2tfcmVxdWlyZV9fKDApO3ZhciBfcmVxdWlyZT1fX3dlYnBhY2tfcmVxdWlyZV9fKDIpO19yZXF1aXJlLm5vZGUsX3JlcXVpcmUuYXJyYXlPZixfcmVxdWlyZS5vbmVPZlR5cGU7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oX3JlZil7cmV0dXJuIF9qc3goXCJkaXZcIix7Y2xhc3NOYW1lOlwiYW5kZXMtdmlzdWFsbHktaGlkZGVuXCJ9LHZvaWQgMCxfcmVmLmNoaWxkcmVuKX19LDIyOmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1yZXF1aXJlKFwicmVhY3QtZG9tXCIpfSwyNDpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcImV4ZW52XCIpfX0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///324\n')},6022:function(module,__unused_webpack_exports,__webpack_require__){eval("/* eslint-disable global-require */\nif (true) {\n  module.exports = __webpack_require__(324);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvY29tbW9uL21haW4uanM/ZTA0ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBdUQ7QUFDekQsQ0FBQyxNQUFNLEVBRU4iLCJmaWxlIjoiNjAyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGdsb2JhbC1yZXF1aXJlICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnVpbGQvaW5kZXgucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2J1aWxkL2luZGV4LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6022\n")},8561:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=function(modules){var installedModules={};function __nested_webpack_require_57__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__nested_webpack_require_57__),module.l=!0,module.exports}return __nested_webpack_require_57__.m=modules,__nested_webpack_require_57__.c=installedModules,__nested_webpack_require_57__.d=function(exports,name,getter){__nested_webpack_require_57__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__nested_webpack_require_57__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__nested_webpack_require_57__.t=function(value,mode){if(1&mode&&(value=__nested_webpack_require_57__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__nested_webpack_require_57__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__nested_webpack_require_57__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__nested_webpack_require_57__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __nested_webpack_require_57__.d(getter,"a",getter),getter},__nested_webpack_require_57__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__nested_webpack_require_57__.p="",__nested_webpack_require_57__(__nested_webpack_require_57__.s=254)}({0:function(module,exports){module.exports=__webpack_require__(7294)},1:function(module,exports){module.exports=__webpack_require__(4184)},2:function(module,exports){module.exports=__webpack_require__(5697)},254:function(module,exports,__nested_webpack_require_1826__){module.exports=__nested_webpack_require_1826__(255)},255:function(module,exports,__nested_webpack_require_1916__){var FloatingMenu=__nested_webpack_require_1916__(256);module.exports=FloatingMenu},256:function(module,exports,__nested_webpack_require_2036__){var REACT_ELEMENT_TYPE,_excluded=["style","paddingSize","placement","content","children","trigger","visible","className","interactive","popperOptions","onClickOutside","id"];function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var React=__nested_webpack_require_2036__(0),_require=__nested_webpack_require_2036__(2),Card=(_require.string,_require.node,_require.oneOf,_require.bool,_require.shape,_require.func,__nested_webpack_require_2036__(68)),classNames=__nested_webpack_require_2036__(1),Tippy=__nested_webpack_require_2036__(257).default,CardContent=Card.CardContent,FloatingMenu=function(_ref){var style=_ref.style,paddingSize=_ref.paddingSize,placement=_ref.placement,content=_ref.content,children=_ref.children,trigger=_ref.trigger,visible=_ref.visible,className=_ref.className,interactive=_ref.interactive,popperOptions=_ref.popperOptions,onClickOutside=_ref.onClickOutside,id=_ref.id,props=_objectWithoutProperties(_ref,_excluded),classes=classNames("andes-floating-menu",className);return React.createElement(Tippy,_extends({render:function(_1,_2,instance){return _jsx(Card,{id:id,paddingSize:paddingSize,style:style,className:classes,"data-testid":"floating-menu"},void 0,_jsx(CardContent,{},void 0,React.cloneElement(content,{instance:instance})))},placement:placement,trigger:void 0===visible?trigger:void 0,visible:visible,interactive:interactive,popperOptions:popperOptions,onClickOutside:onClickOutside},props),children)};FloatingMenu.defaultProps={className:"",style:{},id:void 0,placement:"bottom",trigger:"click focus",visible:void 0,paddingSize:"0",interactive:!1,popperOptions:void 0,onClickOutside:function(){},onHide:function(){},onShow:function(){}},module.exports=FloatingMenu},257:function(module,exports){module.exports=__webpack_require__(3126)},68:function(module,exports){module.exports=__webpack_require__(8878)}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8561\n')},3261:function(module,__unused_webpack_exports,__webpack_require__){eval("/* eslint-disable global-require */\nif (true) {\n  module.exports = __webpack_require__(8561);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvZmxvYXRpbmctbWVudS9tYWluLmpzPzQzNWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxJQUFJLElBQXFDO0FBQ3pDLEVBQUUsMENBQXVEO0FBQ3pELENBQUMsTUFBTSxFQUVOIiwiZmlsZSI6IjMyNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2J1aWxkL2luZGV4LnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9idWlsZC9pbmRleC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3261\n")},2346:function(module,__unused_webpack_exports,__webpack_require__){"use strict";eval('\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === \'object\') && \'default\' in ex) ? ex[\'default\'] : ex; }\n\nvar react = _interopDefault(__webpack_require__(7294));\n\n/**\n * Component dependencies\n */\n\n/**\n * Component\n */\n\n\nvar Icon = function Icon(_ref) {\n  var color = _ref.color,\n      i18n = _ref.i18n;\n  return /*#__PURE__*/react.createElement("svg", {\n    width: "20",\n    height: "20",\n    viewBox: "0 0 20 20",\n    fill: color\n  }, /*#__PURE__*/react.createElement("path", {\n    d: "M4.35156 5.19496L9.15406 9.99746L4.35156 14.8L5.20009 15.6485L10.0026 10.846L14.7963 15.6397L15.6449 14.7912L10.8511 9.99746L15.6449 5.20371L14.7963 4.35518L10.0026 9.14894L5.20009 4.34644L4.35156 5.19496Z",\n    fill: color\n  }));\n};\n\nIcon.defaultProps = {\n  color: \'rgba(0, 0, 0, 0.9)\'\n};\n/**\n * Export component\n */\n\nvar Close20 = Icon;\n\nmodule.exports = Close20;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvaWNvbnMvQ2xvc2UyMC5qcz9jZjFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLCtCQUErQixpRkFBaUY7O0FBRWhILDRCQUE0QixtQkFBTyxDQUFDLElBQU87O0FBRTNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiMjM0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciByZWFjdCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdyZWFjdCcpKTtcblxuLyoqXG4gKiBDb21wb25lbnQgZGVwZW5kZW5jaWVzXG4gKi9cblxuLyoqXG4gKiBDb21wb25lbnRcbiAqL1xuXG5cbnZhciBJY29uID0gZnVuY3Rpb24gSWNvbihfcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBpMThuID0gX3JlZi5pMThuO1xuICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIHdpZHRoOiBcIjIwXCIsXG4gICAgaGVpZ2h0OiBcIjIwXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjAgMjBcIixcbiAgICBmaWxsOiBjb2xvclxuICB9LCAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTQuMzUxNTYgNS4xOTQ5Nkw5LjE1NDA2IDkuOTk3NDZMNC4zNTE1NiAxNC44TDUuMjAwMDkgMTUuNjQ4NUwxMC4wMDI2IDEwLjg0NkwxNC43OTYzIDE1LjYzOTdMMTUuNjQ0OSAxNC43OTEyTDEwLjg1MTEgOS45OTc0NkwxNS42NDQ5IDUuMjAzNzFMMTQuNzk2MyA0LjM1NTE4TDEwLjAwMjYgOS4xNDg5NEw1LjIwMDA5IDQuMzQ2NDRMNC4zNTE1NiA1LjE5NDk2WlwiLFxuICAgIGZpbGw6IGNvbG9yXG4gIH0pKTtcbn07XG5cbkljb24uZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC45KSdcbn07XG4vKipcbiAqIEV4cG9ydCBjb21wb25lbnRcbiAqL1xuXG52YXIgQ2xvc2UyMCA9IEljb247XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xvc2UyMDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2346\n')},4077:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=function(modules){var installedModules={};function __nested_webpack_require_57__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__nested_webpack_require_57__),module.l=!0,module.exports}return __nested_webpack_require_57__.m=modules,__nested_webpack_require_57__.c=installedModules,__nested_webpack_require_57__.d=function(exports,name,getter){__nested_webpack_require_57__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__nested_webpack_require_57__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__nested_webpack_require_57__.t=function(value,mode){if(1&mode&&(value=__nested_webpack_require_57__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__nested_webpack_require_57__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__nested_webpack_require_57__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__nested_webpack_require_57__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __nested_webpack_require_57__.d(getter,"a",getter),getter},__nested_webpack_require_57__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__nested_webpack_require_57__.p="",__nested_webpack_require_57__(__nested_webpack_require_57__.s=287)}({0:function(module,exports){module.exports=__webpack_require__(7294)},1:function(module,exports){module.exports=__webpack_require__(4184)},101:function(module,exports,__nested_webpack_require_1761__){var REACT_ELEMENT_TYPE;function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}__nested_webpack_require_1761__(0);var _require=__nested_webpack_require_1761__(2),_require2=(_require.func,_require.string,__nested_webpack_require_1761__(6)),ENTER=_require2.ENTER,SPACE=_require2.SPACE,Close20=__nested_webpack_require_1761__(32),ModalCloseButton=function(_ref){var closeButtonLabel=_ref.closeButtonLabel,onClose=_ref.onClose,color=_ref.color,closeUrl=_ref.closeUrl,handleClick=function(){"function"==typeof onClose&&onClose()};return _jsx(closeUrl?"a":"button",{className:"andes-modal__close-button",role:closeUrl?void 0:"button","aria-label":closeButtonLabel,onClick:handleClick,onKeyDown:function(e){switch(e.keyCode){case ENTER:case SPACE:e.preventDefault(),handleClick()}},tabIndex:0,href:closeUrl},void 0,_jsx(Close20,{color:color}))};ModalCloseButton.defaultProps={onClose:void 0,color:"rgba(0,0,0,0.55)",closeUrl:""},module.exports=ModalCloseButton},15:function(module,exports){module.exports=__webpack_require__(9641)},2:function(module,exports){module.exports=__webpack_require__(5697)},287:function(module,exports,__nested_webpack_require_3546__){module.exports=__nested_webpack_require_3546__(288)},288:function(module,exports,__nested_webpack_require_3636__){var Modal=__nested_webpack_require_3636__(289);module.exports=Modal},289:function(module,exports,__nested_webpack_require_3742__){var _div,REACT_ELEMENT_TYPE;function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var React=__nested_webpack_require_3742__(0),_require=__nested_webpack_require_3742__(2),classNames=(_require.string,_require.node,_require.func,_require.bool,_require.number,_require.arrayOf,_require.oneOfType,_require.oneOf,_require.shape,__nested_webpack_require_3742__(1)),warning=__nested_webpack_require_3742__(3),withNavigation=__nested_webpack_require_3742__(290),FocusScope=__nested_webpack_require_3742__(15).FocusScope,Portal=__nested_webpack_require_3742__(4).Portal,useDialog=__nested_webpack_require_3742__(61).useDialog,_require5=__nested_webpack_require_3742__(62),useOverlay=_require5.useOverlay,usePreventScroll=_require5.usePreventScroll,ModalActions=__nested_webpack_require_3742__(292),ModalHeader=__nested_webpack_require_3742__(293),ModalTitle=__nested_webpack_require_3742__(294),ModalContent=__nested_webpack_require_3742__(295),ModalCloseButton=__nested_webpack_require_3742__(101),_require6=__nested_webpack_require_3742__(296),SECONDARY_HEADER_SCROLL_SHOW=_require6.SECONDARY_HEADER_SCROLL_SHOW,SECONDARY_HEADER_SHOW_TITLE_SCROLLS=_require6.SECONDARY_HEADER_SHOW_TITLE_SCROLLS,FIXED_ACTIONS_PADDINGS=_require6.FIXED_ACTIONS_PADDINGS,useEffect=React.useEffect,useRef=React.useRef,useCallback=React.useCallback,isContentScrollable=function(contentNode){return contentNode&&contentNode.scrollHeight>contentNode.clientHeight},manageClassList=function(method,element,className){method&&null!=element&&element.classList&&className&&element.classList[String(method)](className)},namespace="andes-modal",Modal=function(props){var _classNames,_classNames2,_ModalTitle,_ModalTitle2,isVisible=props.isVisible,isClosing=props.isClosing,handleClose=props.handleClose,children=props.children,title=props.title,ariaLabel=props["aria-label"],closeButtonLabel=props.closeButtonLabel,closeUrl=props.closeUrl,type=props.type,actions=props.actions,dialog=props.dialog,media=props.media,maxHeight=props.maxHeight,maxWidth=props.maxWidth,className=props.className,modalRef=useRef(),secondaryHeaderRef=useRef(),headerRef=useRef(),contentRef=useRef(),actionsRef=useRef();warning(ariaLabel||"string"==typeof title&&title.length,"<Modal> needs some plain text contents for accessibility reasons. Please add a `aria-label` or `title` prop."),usePreventScroll();var setInitialFixedActionsShadow=useCallback((function(){var actionsNode=null==actionsRef?void 0:actionsRef.current;null!=actions&&actions.fixed&&actionsNode&&isContentScrollable(null==contentRef?void 0:contentRef.current)&&manageClassList("add",actionsNode,"".concat(namespace,"__actions--border"))}),[actions]);useEffect((function(){setTimeout(setInitialFixedActionsShadow,0)}),[setInitialFixedActionsShadow]);var asset,overlayProps=useOverlay({onClose:handleClose,isOpen:isVisible||isClosing,isKeyboardDismissDisabled:dialog,isDismissable:!dialog},modalRef).overlayProps,dialogProps=useDialog(_objectSpread(_objectSpread({},props),{},{"aria-label":ariaLabel||("string"==typeof title?title:"")}),modalRef).dialogProps,showHeaderCloseButton="card"!==type&&!dialog,showOutsideCloseButton="card"===type&&!dialog,modalClassNames=classNames(namespace,className,(_defineProperty(_classNames={},"".concat(namespace,"--").concat(type),type),_defineProperty(_classNames,"".concat(namespace,"--asset"),null==media?void 0:media.asset),_defineProperty(_classNames,"".concat(namespace,"--fixed-actions"),null==actions?void 0:actions.fixed),_defineProperty(_classNames,"".concat(namespace,"--closing"),isClosing),_classNames)),overlayClassNames=classNames("".concat(namespace,"__overlay"),(_defineProperty(_classNames2={},"".concat(namespace,"__overlay--").concat(type),type),_defineProperty(_classNames2,"".concat(namespace,"__overlay--closing"),isClosing),_classNames2)),modalStyle={maxHeight:maxHeight?"min(100%, ".concat(maxHeight,"px)"):"100%",maxWidth:maxWidth?"min(100%, ".concat(maxWidth,"px)"):"100%"},headerBaseProps={onClose:handleClose,closeButtonLabel:closeButtonLabel,closeUrl:closeUrl};return _jsx(Portal,{className:"".concat(namespace,"__portal")},void 0,_jsx("div",{className:overlayClassNames},void 0,_jsx(FocusScope,{contain:!0,restoreFocus:!0,autoFocus:!0},void 0,React.createElement("div",_extends({},overlayProps,dialogProps,{className:modalClassNames,style:modalStyle,"data-ismodal":!0,"aria-modal":!0,ref:modalRef}),_div||(_div=_jsx("div",{tabIndex:0})),showOutsideCloseButton&&_jsx(ModalCloseButton,{onClose:handleClose,closeButtonLabel:closeButtonLabel,color:"white",closeUrl:closeUrl}),(null==media?void 0:media.asset)?React.createElement(ModalHeader,_extends({className:"".concat(namespace,"__header--secondary"),ref:secondaryHeaderRef,showCloseButton:showHeaderCloseButton},headerBaseProps),title&&(_ModalTitle||(_ModalTitle=_jsx(ModalTitle,{},void 0,title)))):null,React.createElement("div",{className:"".concat(namespace,"__scroll"),onScroll:function(){var secondaryHeaderNode=null==secondaryHeaderRef?void 0:secondaryHeaderRef.current,headerNode=null==headerRef?void 0:headerRef.current,contentNode=null==contentRef?void 0:contentRef.current,actionsNode=null==actionsRef?void 0:actionsRef.current;if(isContentScrollable(contentNode)){var scrollTop=contentNode.scrollTop;if(secondaryHeaderNode&&SECONDARY_HEADER_SHOW_TITLE_SCROLLS[String(type)]){var showTitleScroll=SECONDARY_HEADER_SHOW_TITLE_SCROLLS[String(type)];manageClassList(showHeaderCloseButton?scrollTop<SECONDARY_HEADER_SCROLL_SHOW?"remove":"add":scrollTop<headerNode.clientHeight-showTitleScroll?"remove":"add",secondaryHeaderNode,"".concat(namespace,"__header--show")),manageClassList(scrollTop<headerNode.clientHeight-showTitleScroll?"remove":"add",secondaryHeaderNode,"".concat(namespace,"__header--show-title"))}else headerNode&&manageClassList(scrollTop<headerNode.clientHeight?"remove":"add",headerNode,"".concat(namespace,"__header--sticky"));if(null!=actions&&actions.fixed&&actionsNode){var isScrollEnd=contentNode.scrollHeight-Math.abs(scrollTop)===contentNode.clientHeight;if(manageClassList(isScrollEnd?"remove":"add",actionsNode,"".concat(namespace,"__actions--border")),FIXED_ACTIONS_PADDINGS[String(type)]){var _FIXED_ACTIONS_PADDIN=FIXED_ACTIONS_PADDINGS[String(type)],initial=_FIXED_ACTIONS_PADDIN.initial,_final=_FIXED_ACTIONS_PADDIN.final,isScrollingBack=contentNode.scrollHeight-Math.abs(scrollTop)-contentNode.clientHeight>_final&&actionsNode.classList.contains("padding");isScrollEnd?(requestAnimationFrame((function(){actionsNode.style.paddingBottom="".concat(_final,"px")})),setTimeout((function(){return manageClassList("add",actionsNode,"padding")}),80)):isScrollingBack&&(requestAnimationFrame((function(){actionsNode.style.paddingBottom="".concat(initial,"px")})),setTimeout((function(){return manageClassList("remove",actionsNode,"padding")}),80))}}}},ref:contentRef},(asset=null==media?void 0:media.asset,title||asset?React.createElement(ModalHeader,_extends({ref:headerRef,centered:!!asset||"card"===type,showCloseButton:!asset&&showHeaderCloseButton},headerBaseProps),asset,title&&(_ModalTitle2||(_ModalTitle2=_jsx(ModalTitle,{},void 0,title)))):null),children&&_jsx(ModalContent,{},void 0,children),actions&&React.createElement(ModalActions,{fixed:actions.fixed,ref:actionsRef},actions.primary,actions.secondary))))))};Modal.defaultProps={"aria-label":"",closeUrl:"",type:"small",actions:void 0,media:void 0,dialog:!1,maxHeight:void 0,maxWidth:void 0,className:""},module.exports=withNavigation(Modal)},290:function(module,exports,__nested_webpack_require_12965__){function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"===_typeof(call)||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(self)}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return self}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var React=__nested_webpack_require_12965__(0),_require=__nested_webpack_require_12965__(2),_require2=(_require.func,_require.bool,_require.string,_require.node,_require.oneOfType,__nested_webpack_require_12965__(291)),isLocationURL=_require2.isLocationURL,addChange=_require2.addChange,removeChange=_require2.removeChange,redirect=_require2.redirect,back=_require2.back;module.exports=function(Component){var _class,obj,key,value;return _class=function(_React$Component){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),Object.defineProperty(subClass,"prototype",{writable:!1}),superClass&&_setPrototypeOf(subClass,superClass)}(ModalNavigation,_React$Component);var Constructor,protoProps,staticProps,_super=_createSuper(ModalNavigation);function ModalNavigation(props){var _this;!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,ModalNavigation);var isOpen=(_this=_super.call(this,props)).props.isOpen;return _this.state={isVisible:isOpen,isClosing:!1},_this.handleOpen=_this.handleOpen.bind(_assertThisInitialized(_this)),_this.handleClose=_this.handleClose.bind(_assertThisInitialized(_this)),_this.closeModal=_this.closeModal.bind(_assertThisInitialized(_this)),_this.navigation=_this.navigation.bind(_assertThisInitialized(_this)),_this}return Constructor=ModalNavigation,(protoProps=[{key:"componentDidMount",value:function(){this.props.url&&addChange(this.navigation),this.handleOpen()}},{key:"UNSAFE_componentWillReceiveProps",value:function(_ref){var isOpen=_ref.isOpen,onOpen=_ref.onOpen;this.state.isVisible!==isOpen&&(isOpen?("function"==typeof onOpen&&onOpen(),this.setState({isVisible:!0},this.handleOpen)):this.handleClose())}},{key:"componentWillUnmount",value:function(){this.props.url&&removeChange(this.navigation)}},{key:"handleOpen",value:function(){var isVisible=this.state.isVisible,_this$props=this.props,url=_this$props.url,title=_this$props.title;isVisible?url&&redirect(url,title):url&&back(url)}},{key:"handleClose",value:function(event){var _this2=this,onClose=this.props.onClose;event&&(event.preventDefault(),event.persist&&event.persist()),this.closeModal((function(){"function"==typeof onClose&&onClose(event),_this2.handleOpen()}))}},{key:"closeModal",value:function(onClose){var _this3=this;this.setState({isClosing:!0}),setTimeout((function(){_this3.setState({isVisible:!1,isClosing:!1},onClose)}),180)}},{key:"navigation",value:function(){var url=this.props.url,isVisible=this.state.isVisible;isLocationURL(url)?this.handleOpen():isVisible&&this.handleClose()}},{key:"render",value:function(){var _this$state=this.state,isVisible=_this$state.isVisible,isClosing=_this$state.isClosing;return(isVisible||isClosing)&&React.createElement(Component,_extends({handleClose:this.handleClose},this.state,this.props))}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Object.defineProperty(Constructor,"prototype",{writable:!1}),ModalNavigation}(React.Component),value={isOpen:!1,onOpen:void 0,onClose:void 0,url:""},(key="defaultProps")in(obj=_class)?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,_class}},291:function(module,exports){var isLocationURL=function(url){return window.location.href===url};module.exports={redirect:function(url,title){isLocationURL(url)||("function"==typeof window.history.pushState?window.history.pushState(void 0,title,url):window.location=url)},back:function(url){isLocationURL(url)&&window.history.back()},addChange:function(action){"function"==typeof window.history.pushState&&window.addEventListener("popstate",action)},removeChange:function(action){"function"==typeof window.history.pushState&&window.removeEventListener("popstate",action)},isLocationURL:isLocationURL}},292:function(module,exports,__nested_webpack_require_19123__){var React=__nested_webpack_require_19123__(0),_require=__nested_webpack_require_19123__(2),classNames=(_require.bool,_require.node,_require.oneOfType,_require.arrayOf,__nested_webpack_require_19123__(1)),ModalActions=React.forwardRef((function(_ref,ref){var obj,key,value,children=_ref.children,fixed=_ref.fixed,modalActionClassnames=classNames("andes-modal__actions",(obj={},key="".concat("andes-modal__actions","--fixed"),value=fixed,key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj));return React.createElement("div",{className:modalActionClassnames,ref:ref},children)}));ModalActions.defaultProps={fixed:!1},module.exports=ModalActions},293:function(module,exports,__nested_webpack_require_19842__){var REACT_ELEMENT_TYPE;function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}var React=__nested_webpack_require_19842__(0),_require=__nested_webpack_require_19842__(2),classNames=(_require.string,_require.node,_require.func,_require.bool,_require.oneOfType,_require.arrayOf,__nested_webpack_require_19842__(1)),ModalCloseButton=__nested_webpack_require_19842__(101),namespace="andes-modal__header",ModalHeader=React.forwardRef((function(_ref,ref){var obj,key,value,children=_ref.children,onClose=_ref.onClose,centered=_ref.centered,showCloseButton=_ref.showCloseButton,closeButtonLabel=_ref.closeButtonLabel,className=_ref.className,closeUrl=_ref.closeUrl,headerClassnames=classNames(namespace,className),headerContentsClassnames=classNames("".concat(namespace,"__contents"),(obj={},key="".concat(namespace,"__contents--centered"),value=centered,key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj));return React.createElement("div",{className:headerClassnames,ref:ref},_jsx("div",{className:headerContentsClassnames},void 0,children),showCloseButton&&_jsx(ModalCloseButton,{onClose:onClose,closeButtonLabel:closeButtonLabel,closeUrl:closeUrl}))}));ModalHeader.defaultProps={className:"",onClose:void 0,centered:!1,showCloseButton:!0,closeUrl:""},module.exports=ModalHeader},294:function(module,exports,__nested_webpack_require_21872__){var REACT_ELEMENT_TYPE;function _jsx(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}__nested_webpack_require_21872__(0);var _require=__nested_webpack_require_21872__(2);_require.string,_require.node,_require.oneOfType,_require.arrayOf;module.exports=function(_ref){return _jsx("span",{className:"andes-modal__title"},void 0,_ref.children)}},295:function(module,exports,__nested_webpack_require_22922__){var React=__nested_webpack_require_22922__(0),node=__nested_webpack_require_22922__(2).node,ModalContent=React.forwardRef((function(_ref,ref){var children=_ref.children;return React.createElement("div",{className:"andes-modal__content",ref:ref},children)}));ModalContent.propTypes={children:node.isRequired},module.exports=ModalContent},296:function(module,exports){module.exports={SECONDARY_HEADER_SCROLL_SHOW:35,SECONDARY_HEADER_SHOW_TITLE_SCROLLS:{small:40,large:48,full:56,card:40},FIXED_ACTIONS_PADDINGS:{small:{initial:16,final:32},large:{initial:16,final:48},card:{initial:16,final:24},full:{initial:16,final:24}}}},3:function(module,exports){module.exports=__webpack_require__(5189)},32:function(module,exports){module.exports=__webpack_require__(2346)},4:function(module,exports){module.exports=__webpack_require__(6022)},6:function(module,exports){module.exports=__webpack_require__(4205)},61:function(module,exports){module.exports=__webpack_require__(4708)},62:function(module,exports){module.exports=__webpack_require__(1925)}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4077\n')},9277:function(module,__unused_webpack_exports,__webpack_require__){eval("/* eslint-disable global-require */\nif (true) {\n  module.exports = __webpack_require__(4077);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvbW9kYWwvbWFpbi5qcz9lNmU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsSUFBSSxJQUFxQztBQUN6QyxFQUFFLDBDQUF1RDtBQUN6RCxDQUFDLE1BQU0sRUFFTiIsImZpbGUiOiI5Mjc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgZ2xvYmFsLXJlcXVpcmUgKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9idWlsZC9pbmRleC5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnVpbGQvaW5kZXguZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9277\n")},9189:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=function(modules){var installedModules={};function __nested_webpack_require_57__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__nested_webpack_require_57__),module.l=!0,module.exports}return __nested_webpack_require_57__.m=modules,__nested_webpack_require_57__.c=installedModules,__nested_webpack_require_57__.d=function(exports,name,getter){__nested_webpack_require_57__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__nested_webpack_require_57__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__nested_webpack_require_57__.t=function(value,mode){if(1&mode&&(value=__nested_webpack_require_57__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__nested_webpack_require_57__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__nested_webpack_require_57__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__nested_webpack_require_57__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __nested_webpack_require_57__.d(getter,"a",getter),getter},__nested_webpack_require_57__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__nested_webpack_require_57__.p="",__nested_webpack_require_57__(__nested_webpack_require_57__.s=347)}({0:function(module,exports){module.exports=__webpack_require__(7294)},1:function(module,exports){module.exports=__webpack_require__(4184)},2:function(module,exports){module.exports=__webpack_require__(5697)},21:function(module,exports){module.exports=__webpack_require__(1429)},347:function(module,exports,__nested_webpack_require_1897__){module.exports=__nested_webpack_require_1897__(348)},348:function(module,exports,__nested_webpack_require_1987__){var Switch=__nested_webpack_require_1987__(349);module.exports=Switch},349:function(module,exports,__nested_webpack_require_2095__){var _excluded=["className"];function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var React=__nested_webpack_require_2095__(0),_require=__nested_webpack_require_2095__(2),Checkbox=(_require.bool,_require.string,_require.func,_require.node,_require.oneOfType,__nested_webpack_require_2095__(21)),classnames=__nested_webpack_require_2095__(1),Switch=function(_ref){var className=_ref.className,props=_objectWithoutProperties(_ref,_excluded);return React.createElement(Checkbox,_extends({},props,{className:classnames("andes-switch",className),role:"switch"}))};Switch.defaultProps={checked:!1,className:"",disabled:!1,inverted:!1,label:"",onChange:null},module.exports=Switch}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvc3dpdGNoL2J1aWxkL2luZGV4LnByb2R1Y3Rpb24uanM/MmVjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUMsd0JBQXdCLFNBQVMsNkJBQW1CLFdBQVcsd0VBQXdFLHVDQUF1Qyw0QkFBNEIsbUVBQW1FLDZCQUFtQiw2QkFBNkIsT0FBTyw2QkFBbUIsV0FBVyw2QkFBbUIsb0JBQW9CLDZCQUFtQixpQ0FBaUMsNkJBQW1CLHNEQUFzRCx5QkFBeUIsRUFBRSxDQUFDLDZCQUFtQixxQkFBcUIsa0dBQWtHLGVBQWUsOENBQThDLFNBQVMsRUFBRSxDQUFDLDZCQUFtQix3QkFBd0Isa0JBQWtCLDZCQUFtQiw2QkFBNkIsd0VBQXdFLDJCQUEyQixHQUFHLDZCQUFtQiwyQ0FBMkMsMEJBQTBCLHNEQUFzRCw2QkFBbUIsd0JBQXdCLGtCQUFrQixpQkFBaUIsVUFBVSxDQUFDLDZCQUFtQixvQkFBb0IsZ0RBQWdELHNCQUFzQixZQUFZLGVBQWUsT0FBTyw2QkFBbUIsNkJBQTZCLENBQUMsNkJBQW1CLDZCQUE2Qiw2REFBNkQsQ0FBQyw2QkFBbUIsTUFBTSw2QkFBbUIsQ0FBQyw2QkFBbUIsUUFBUSxFQUFFLDJCQUEyQixlQUFlLG1CQUFPLENBQUMsSUFBTyxFQUFFLDRCQUE0QixlQUFlLG1CQUFPLENBQUMsSUFBWSxFQUFFLDRCQUE0QixlQUFlLG1CQUFPLENBQUMsSUFBWSxFQUFFLDZCQUE2QixlQUFlLG1CQUFPLENBQUMsSUFBaUIsRUFBRSw2QkFBNkIsK0JBQW1CLEVBQUUsZUFBZSwrQkFBbUIsTUFBTSw2QkFBNkIsK0JBQW1CLEVBQUUsV0FBVywrQkFBbUIsTUFBTSxzQkFBc0IsNkJBQTZCLCtCQUFtQixFQUFFLDRCQUE0QixvQkFBb0IsZ0RBQWdELFlBQVksbUJBQW1CLEtBQUssd0JBQXdCLGtHQUFrRyxjQUFjLHdCQUF3QixtREFBbUQseUJBQXlCLDJDQUEyQyx5QkFBeUIsbUJBQW1CLGdDQUFnQyxRQUFRLG9CQUFvQiwwRUFBMEUsY0FBYyxrQkFBa0IsaUNBQWlDLDBEQUEwRCxRQUFRLDBCQUEwQix3SUFBd0ksY0FBYyxVQUFVLCtCQUFtQixhQUFhLCtCQUFtQiwyRkFBMkYsK0JBQW1CLGlCQUFpQiwrQkFBbUIsMEJBQTBCLDRFQUE0RSwrQ0FBK0MsUUFBUSw2REFBNkQsSUFBSSxxQkFBcUIsdUVBQXVFLHdCQUF3QiIsImZpbGUiOiI5MTg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24obW9kdWxlcyl7dmFyIGluc3RhbGxlZE1vZHVsZXM9e307ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCl7aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7dmFyIG1vZHVsZT1pbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXT17aTptb2R1bGVJZCxsOiExLGV4cG9ydHM6e319O3JldHVybiBtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLG1vZHVsZSxtb2R1bGUuZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKSxtb2R1bGUubD0hMCxtb2R1bGUuZXhwb3J0c31yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5tPW1vZHVsZXMsX193ZWJwYWNrX3JlcXVpcmVfXy5jPWluc3RhbGxlZE1vZHVsZXMsX193ZWJwYWNrX3JlcXVpcmVfXy5kPWZ1bmN0aW9uKGV4cG9ydHMsbmFtZSxnZXR0ZXIpe19fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLG5hbWUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxuYW1lLHtlbnVtZXJhYmxlOiEwLGdldDpnZXR0ZXJ9KX0sX193ZWJwYWNrX3JlcXVpcmVfXy5yPWZ1bmN0aW9uKGV4cG9ydHMpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LF9fd2VicGFja19yZXF1aXJlX18udD1mdW5jdGlvbih2YWx1ZSxtb2RlKXtpZigxJm1vZGUmJih2YWx1ZT1fX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKSksOCZtb2RlKXJldHVybiB2YWx1ZTtpZig0Jm1vZGUmJlwib2JqZWN0XCI9PXR5cGVvZiB2YWx1ZSYmdmFsdWUmJnZhbHVlLl9fZXNNb2R1bGUpcmV0dXJuIHZhbHVlO3ZhciBucz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKF9fd2VicGFja19yZXF1aXJlX18ucihucyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnZhbHVlfSksMiZtb2RlJiZcInN0cmluZ1wiIT10eXBlb2YgdmFsdWUpZm9yKHZhciBrZXkgaW4gdmFsdWUpX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLGtleSxmdW5jdGlvbihrZXkpe3JldHVybiB2YWx1ZVtrZXldfS5iaW5kKG51bGwsa2V5KSk7cmV0dXJuIG5zfSxfX3dlYnBhY2tfcmVxdWlyZV9fLm49ZnVuY3Rpb24obW9kdWxlKXt2YXIgZ2V0dGVyPW1vZHVsZSYmbW9kdWxlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gbW9kdWxlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIG1vZHVsZX07cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsXCJhXCIsZ2V0dGVyKSxnZXR0ZXJ9LF9fd2VicGFja19yZXF1aXJlX18ubz1mdW5jdGlvbihvYmplY3QscHJvcGVydHkpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LHByb3BlcnR5KX0sX193ZWJwYWNrX3JlcXVpcmVfXy5wPVwiXCIsX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnM9MzQ3KX0oezA6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJyZWFjdFwiKX0sMTpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcImNsYXNzbmFtZXNcIil9LDI6ZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpfSwyMTpmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIkBhbmRlcy9jaGVja2JveFwiKX0sMzQ3OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe21vZHVsZS5leHBvcnRzPV9fd2VicGFja19yZXF1aXJlX18oMzQ4KX0sMzQ4OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe3ZhciBTd2l0Y2g9X193ZWJwYWNrX3JlcXVpcmVfXygzNDkpO21vZHVsZS5leHBvcnRzPVN3aXRjaH0sMzQ5OmZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe3ZhciBfZXhjbHVkZWQ9W1wiY2xhc3NOYW1lXCJdO2Z1bmN0aW9uIF9leHRlbmRzKCl7cmV0dXJuKF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSYmKHRhcmdldFtrZXldPXNvdXJjZVtrZXldKX1yZXR1cm4gdGFyZ2V0fSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsZXhjbHVkZWQpe2lmKG51bGw9PXNvdXJjZSlyZXR1cm57fTt2YXIga2V5LGksdGFyZ2V0PWZ1bmN0aW9uKHNvdXJjZSxleGNsdWRlZCl7aWYobnVsbD09c291cmNlKXJldHVybnt9O3ZhciBrZXksaSx0YXJnZXQ9e30sc291cmNlS2V5cz1PYmplY3Qua2V5cyhzb3VyY2UpO2ZvcihpPTA7aTxzb3VyY2VLZXlzLmxlbmd0aDtpKyspa2V5PXNvdXJjZUtleXNbaV0sZXhjbHVkZWQuaW5kZXhPZihrZXkpPj0wfHwodGFyZ2V0W2tleV09c291cmNlW2tleV0pO3JldHVybiB0YXJnZXR9KHNvdXJjZSxleGNsdWRlZCk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHNvdXJjZVN5bWJvbEtleXM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO2ZvcihpPTA7aTxzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDtpKyspa2V5PXNvdXJjZVN5bWJvbEtleXNbaV0sZXhjbHVkZWQuaW5kZXhPZihrZXkpPj0wfHxPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLGtleSkmJih0YXJnZXRba2V5XT1zb3VyY2Vba2V5XSl9cmV0dXJuIHRhcmdldH12YXIgUmVhY3Q9X193ZWJwYWNrX3JlcXVpcmVfXygwKSxfcmVxdWlyZT1fX3dlYnBhY2tfcmVxdWlyZV9fKDIpLENoZWNrYm94PShfcmVxdWlyZS5ib29sLF9yZXF1aXJlLnN0cmluZyxfcmVxdWlyZS5mdW5jLF9yZXF1aXJlLm5vZGUsX3JlcXVpcmUub25lT2ZUeXBlLF9fd2VicGFja19yZXF1aXJlX18oMjEpKSxjbGFzc25hbWVzPV9fd2VicGFja19yZXF1aXJlX18oMSksU3dpdGNoPWZ1bmN0aW9uKF9yZWYpe3ZhciBjbGFzc05hbWU9X3JlZi5jbGFzc05hbWUscHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsX2V4Y2x1ZGVkKTtyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDaGVja2JveCxfZXh0ZW5kcyh7fSxwcm9wcyx7Y2xhc3NOYW1lOmNsYXNzbmFtZXMoXCJhbmRlcy1zd2l0Y2hcIixjbGFzc05hbWUpLHJvbGU6XCJzd2l0Y2hcIn0pKX07U3dpdGNoLmRlZmF1bHRQcm9wcz17Y2hlY2tlZDohMSxjbGFzc05hbWU6XCJcIixkaXNhYmxlZDohMSxpbnZlcnRlZDohMSxsYWJlbDpcIlwiLG9uQ2hhbmdlOm51bGx9LG1vZHVsZS5leHBvcnRzPVN3aXRjaH19KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9189\n')},9835:function(module,__unused_webpack_exports,__webpack_require__){eval("/* eslint-disable global-require */\nif (true) {\n  module.exports = __webpack_require__(9189);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYW5kZXMvc3dpdGNoL21haW4uanM/ODcyNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUksSUFBcUM7QUFDekMsRUFBRSwwQ0FBdUQ7QUFDekQsQ0FBQyxNQUFNLEVBRU4iLCJmaWxlIjoiOTgzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGdsb2JhbC1yZXF1aXJlICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnVpbGQvaW5kZXgucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2J1aWxkL2luZGV4LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9835\n")},5318:function(module){eval('function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports.default = module.exports;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcz80ZWE0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMseUJBQXlCLFNBQVMsc0JBQXlCIiwiZmlsZSI6IjUzMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5318\n')},4708:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useDialog\": function() { return /* binding */ useDialog; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _react_aria_focus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9641);\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3952);\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2122);\n\n\n\n\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nfunction useDialog(props, ref) {\n  let {\n    role = 'dialog'\n  } = props;\n  let titleId = (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_1__/* .useSlotId */ .mp)();\n  titleId = props['aria-label'] ? undefined : titleId; // Focus the dialog itself on mount, unless a child element is already focused.\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      (0,_react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.focusSafely)(ref.current); // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          (0,_react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.focusSafely)(ref.current);\n        }\n      }, 500);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]); // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n\n  return {\n    dialogProps: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)({}, (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_1__/* .filterDOMProps */ .zL)(props, {\n      labelable: true\n    }), {\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    }),\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AcmVhY3QtYXJpYS9kaWFsb2cvZGlzdC9tb2R1bGUuanM/NTViNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFrQztBQUNjO0FBQ2M7QUFDa0I7O0FBRWhGO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNILGdCQUFnQixzRUFBUztBQUN6QixzREFBc0Q7O0FBRXRELEVBQUUsZ0RBQVM7QUFDWDtBQUNBLE1BQU0sOERBQVcsY0FBYztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsOERBQVc7QUFDckI7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFNBQVM7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixvRkFBOEIsR0FBRyxFQUFFLDJFQUFjO0FBQ2xFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDcwOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZm9jdXNTYWZlbHkgfSBmcm9tIFwiQHJlYWN0LWFyaWEvZm9jdXNcIjtcbmltcG9ydCB7IGZpbHRlckRPTVByb3BzLCB1c2VTbG90SWQgfSBmcm9tIFwiQHJlYWN0LWFyaWEvdXRpbHNcIjtcbmltcG9ydCBfYmFiZWxSdW50aW1lSGVscGVyc0VzbUV4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgYmVoYXZpb3IgYW5kIGFjY2Vzc2liaWxpdHkgaW1wbGVtZW50YXRpb24gZm9yIGEgZGlhbG9nIGNvbXBvbmVudC5cbiAqIEEgZGlhbG9nIGlzIGFuIG92ZXJsYXkgc2hvd24gYWJvdmUgb3RoZXIgY29udGVudCBpbiBhbiBhcHBsaWNhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURpYWxvZyhwcm9wcywgcmVmKSB7XG4gIGxldCB7XG4gICAgcm9sZSA9ICdkaWFsb2cnXG4gIH0gPSBwcm9wcztcbiAgbGV0IHRpdGxlSWQgPSB1c2VTbG90SWQoKTtcbiAgdGl0bGVJZCA9IHByb3BzWydhcmlhLWxhYmVsJ10gPyB1bmRlZmluZWQgOiB0aXRsZUlkOyAvLyBGb2N1cyB0aGUgZGlhbG9nIGl0c2VsZiBvbiBtb3VudCwgdW5sZXNzIGEgY2hpbGQgZWxlbWVudCBpcyBhbHJlYWR5IGZvY3VzZWQuXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVmLmN1cnJlbnQgJiYgIXJlZi5jdXJyZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICBmb2N1c1NhZmVseShyZWYuY3VycmVudCk7IC8vIFNhZmFyaSBvbiBpT1MgZG9lcyBub3QgbW92ZSB0aGUgVm9pY2VPdmVyIGN1cnNvciB0byB0aGUgZGlhbG9nXG4gICAgICAvLyBvciBhbm5vdW5jZSB0aGF0IGl0IGhhcyBvcGVuZWQgdW50aWwgaXQgaGFzIHJlbmRlcmVkLiBBIHdvcmthcm91bmRcbiAgICAgIC8vIGlzIHRvIHdhaXQgZm9yIGhhbGYgYSBzZWNvbmQsIHRoZW4gYmx1ciBhbmQgcmUtZm9jdXMgdGhlIGRpYWxvZy5cblxuICAgICAgbGV0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgcmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICAgIGZvY3VzU2FmZWx5KHJlZi5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgNTAwKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIH07XG4gICAgfVxuICB9LCBbcmVmXSk7IC8vIFdlIGRvIG5vdCB1c2UgYXJpYS1tb2RhbCBkdWUgdG8gYSBTYWZhcmkgYnVnIHdoaWNoIGZvcmNlcyB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgdG8gYmUgZm9jdXNlZFxuICAvLyBvbiBtb3VudCB3aGVuIGluc2lkZSBhbiBpZnJhbWUsIG5vIG1hdHRlciB3aGljaCBlbGVtZW50IHdlIHByb2dyYW1tYXRpY2FsbHkgZm9jdXMuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjExOTM0LlxuICAvLyB1c2VNb2RhbCBzZXRzIGFyaWEtaGlkZGVuIG9uIGFsbCBlbGVtZW50cyBvdXRzaWRlIHRoZSBkaWFsb2csIHNvIHRoZSBkaWFsb2cgd2lsbCBiZWhhdmUgYXMgYSBtb2RhbFxuICAvLyBldmVuIHdpdGhvdXQgYXJpYS1tb2RhbCBvbiB0aGUgZGlhbG9nIGl0c2VsZi5cblxuICByZXR1cm4ge1xuICAgIGRpYWxvZ1Byb3BzOiBfYmFiZWxSdW50aW1lSGVscGVyc0VzbUV4dGVuZHMoe30sIGZpbHRlckRPTVByb3BzKHByb3BzLCB7XG4gICAgICBsYWJlbGFibGU6IHRydWVcbiAgICB9KSwge1xuICAgICAgcm9sZSxcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBwcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10gfHwgdGl0bGVJZFxuICAgIH0pLFxuICAgIHRpdGxlUHJvcHM6IHtcbiAgICAgIGlkOiB0aXRsZUlkXG4gICAgfVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4708\n")},9641:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"focusSafely\": function() { return /* binding */ focusSafely; },\n/* harmony export */   \"FocusScope\": function() { return /* binding */ FocusScope; },\n/* harmony export */   \"useFocusManager\": function() { return /* binding */ useFocusManager; },\n/* harmony export */   \"getFocusableTreeWalker\": function() { return /* binding */ getFocusableTreeWalker; },\n/* harmony export */   \"useFocusRing\": function() { return /* binding */ useFocusRing; },\n/* harmony export */   \"FocusRing\": function() { return /* binding */ FocusRing; },\n/* harmony export */   \"FocusableProvider\": function() { return /* binding */ FocusableProvider; },\n/* harmony export */   \"useFocusable\": function() { return /* binding */ useFocusable; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9756);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6010);\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2122);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _react_aria_interactions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7354);\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3952);\n\n\n\n\n\n\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nfunction focusSafely(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if ((0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_1__/* .getInteractionModality */ .Jz)() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .runAfterTransition */ .QB)(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .focusWithoutScrolling */ .Ao)(element);\n      }\n    });\n  } else {\n    (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .focusWithoutScrolling */ .Ao)(element);\n  }\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $ee5e90cbb4a22466973155c14222fa1$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {\n    display,\n    visibility\n  } = element.style;\n  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';\n\n  if (isVisible) {\n    const {\n      getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';\n  }\n\n  return isVisible;\n}\n\nfunction $ee5e90cbb4a22466973155c14222fa1$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);\n}\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */\n\n\nfunction $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(element, childElement) {\n  return element.nodeName !== '#comment' && $ee5e90cbb4a22466973155c14222fa1$var$isStyleVisible(element) && $ee5e90cbb4a22466973155c14222fa1$var$isAttributeVisible(element, childElement) && (!element.parentElement || $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(element.parentElement, element));\n}\n\nconst $c9e8f80f5bb1841844f54e4ad30b$var$FocusContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n\nlet $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = null;\nlet $c9e8f80f5bb1841844f54e4ad30b$var$scopes = new Set(); // This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n// For now, it relies on the DOM tree order rather than the React tree order, and is probably\n// less optimized for performance.\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\n\nfunction FocusScope(props) {\n  let {\n    children,\n    contain,\n    restoreFocus,\n    autoFocus\n  } = props;\n  let startRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  let endRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  let scopeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n  (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .useLayoutEffect */ .bt)(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n    $c9e8f80f5bb1841844f54e4ad30b$var$scopes.add(scopeRef);\n    return () => {\n      $c9e8f80f5bb1841844f54e4ad30b$var$scopes.delete(scopeRef);\n    };\n  }, [children]);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus);\n  let focusManager = $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManager(scopeRef);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext.Provider, {\n    value: focusManager\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n    hidden: true,\n    ref: endRef\n  }));\n}\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\n\nfunction useFocusManager() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManager(scopeRef) {\n  return {\n    focusNext(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let scope = scopeRef.current;\n      let {\n        from,\n        tabbable,\n        wrap\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n        tabbable\n      }, scope);\n      walker.currentNode = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextNode, true);\n      }\n\n      return nextNode;\n    },\n\n    focusPrevious(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let scope = scopeRef.current;\n      let {\n        from,\n        tabbable,\n        wrap\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n        tabbable\n      }, scope);\n      walker.currentNode = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n\n      if (previousNode) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(previousNode, true);\n      }\n\n      return previousNode;\n    }\n\n  };\n}\n\nconst $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\nconst $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([hidden])';\n$c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  let raf = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    let scope = scopeRef.current;\n\n    if (!contain) {\n      return;\n    } // Handle the Tab key to contain focus within the scope\n\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n\n      e.preventDefault();\n\n      if (nextElement) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = e => {\n      // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n      // restore focus to the previously focused node or the first tabbable element in the active scope.\n      let isInAnyScope = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(e.target, $c9e8f80f5bb1841844f54e4ad30b$var$scopes);\n\n      if (!isInAnyScope) {\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if ($c9e8f80f5bb1841844f54e4ad30b$var$activeScope) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope($c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current);\n        }\n      } else {\n        $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let isInAnyScope = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(document.activeElement, $c9e8f80f5bb1841844f54e4ad30b$var$scopes);\n\n        if (!isInAnyScope) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    return () => cancelAnimationFrame(raf.current);\n  }, [raf]);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(element, scopes) {\n  for (let scope of scopes.values()) {\n    if ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(element, scroll) {\n  if (scroll === void 0) {\n    scroll = false;\n  }\n\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {// ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {// ignore\n    }\n  }\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scope) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n    tabbable: true\n  }, scope);\n  walker.currentNode = sentinel;\n  $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(walker.nextNode());\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus) {\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (autoFocus) {\n      $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, $c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current)) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scopeRef.current);\n      }\n    }\n  }, [scopeRef, autoFocus]);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .useLayoutEffect */ .bt)(() => {\n    let scope = scopeRef.current;\n    let nodeToRestore = document.activeElement; // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {\n        return;\n      } // Create a DOM tree walker that matches all tabbable elements\n\n\n      let walker = getFocusableTreeWalker(document.body, {\n        tabbable: true\n      }); // Find the next tabbable element after the currently focused element\n\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n      } // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n\n\n      if ((!nextElement || !$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n\n        do {\n          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n        } while ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope));\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (nextElement) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextElement, true);\n        } else {\n          // If there is no next element, blur the focused element to move focus to the body.\n          focusedElement.blur();\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n\n      if (restoreFocus && nodeToRestore && $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, scope)) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\n\n\nfunction getFocusableTreeWalker(root, opts, scope) {\n  let selector = (opts == null ? void 0 : opts.tabbable) ? $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR : $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts$from;\n\n      // Skip nodes inside the starting node.\n      if (opts == null ? void 0 : (_opts$from = opts.from) == null ? void 0 : _opts$from.contains(node)) {\n        return NodeFilter.FILTER_REJECT;\n      }\n\n      if (node.matches(selector) && $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(node) && (!scope || $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope))) {\n        return NodeFilter.FILTER_ACCEPT;\n      }\n\n      return NodeFilter.FILTER_SKIP;\n    }\n\n  });\n\n  if (opts == null ? void 0 : opts.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nfunction useFocusRing(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  let {\n    within\n  } = props;\n  let [isFocused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  let [isFocusWithin, setFocusWithin] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  let {\n    isFocusVisible\n  } = (0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_1__/* .useFocusVisible */ ._Y)(props);\n  let {\n    focusProps\n  } = (0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_1__/* .useFocus */ .KK)({\n    isDisabled: within,\n    onFocusChange: setFocused\n  });\n  let {\n    focusWithinProps\n  } = (0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_1__/* .useFocusWithin */ .L_)({\n    isDisabled: !within,\n    onFocusWithinChange: setFocusWithin\n  });\n  return {\n    isFocused: within ? isFocusWithin : isFocused,\n    isFocusVisible: (within ? isFocusWithin : isFocused) && isFocusVisible,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nfunction FocusRing(props) {\n  let {\n    children,\n    focusClass,\n    focusRingClass\n  } = props;\n  let {\n    isFocused,\n    isFocusVisible,\n    focusProps\n  } = useFocusRing(props);\n\n  let child = react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .mergeProps */ .dG)(child.props, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)({}, focusProps, {\n    className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z)({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  })));\n}\n\nlet $e11539c8317b2d21639df611cb5658f$var$FocusableContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n\nfunction $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(ref) {\n  let context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)($e11539c8317b2d21639df611cb5658f$var$FocusableContext) || {};\n  (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .useSyncRef */ .lE)(context, ref);\n  return context;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\n\n\nfunction $e11539c8317b2d21639df611cb5658f$var$FocusableProvider(props, ref) {\n  let {\n    children\n  } = props,\n      otherProps = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z)(props, [\"children\"]);\n\n  let context = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)({}, otherProps, {\n    ref\n  });\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement($e11539c8317b2d21639df611cb5658f$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\n\nlet FocusableProvider = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef($e11539c8317b2d21639df611cb5658f$var$FocusableProvider);\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nfunction useFocusable(props, domRef) {\n  let {\n    focusProps\n  } = (0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_1__/* .useFocus */ .KK)(props);\n  let {\n    keyboardProps\n  } = (0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_1__/* .useKeyboard */ .v5)(props);\n  let interactions = (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .mergeProps */ .dG)(focusProps, keyboardProps);\n  let domProps = $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (props.autoFocus && domRef.current) {\n      domRef.current.focus();\n    }\n  }, [props.autoFocus, domRef]);\n  return {\n    focusableProps: (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__/* .mergeProps */ .dG)((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z)({}, interactions, {\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }), interactionProps)\n  };\n}\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9641\n")},7354:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KK\": function() { return /* binding */ $a1ea59d68270f0dd$export$f8168d8dd8fd66e6; },\n/* harmony export */   \"Jz\": function() { return /* binding */ $507fabe10e71c6fb$export$630ff653c5ada6a9; },\n/* harmony export */   \"_Y\": function() { return /* binding */ $507fabe10e71c6fb$export$ffd9e5021c1fb2d6; },\n/* harmony export */   \"L_\": function() { return /* binding */ $9ab94262bd0047c7$export$420e68273165f4ec; },\n/* harmony export */   \"Fc\": function() { return /* binding */ $e0b6e0b68ec7f50f$export$872b660ac5a1ff98; },\n/* harmony export */   \"v5\": function() { return /* binding */ $46d819fcbaf35654$export$8f71654801c2f7cd; }\n/* harmony export */ });\n/* unused harmony exports Pressable, PressResponder, isFocusVisible, setInteractionModality, useInteractionModality, useFocusVisibleListener, useHover, useMove, usePress, useScrollWheel, useLongPress */\n/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3952);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\n\n\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n    if ($bx7SL$isIOS()) {\n        if ($14c0b72509d70225$var$state === 'default') {\n            $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n            document.documentElement.style.webkitUserSelect = 'none';\n        }\n        $14c0b72509d70225$var$state = 'disabled';\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n        // If not iOS, store the target's original user-select and change to user-select: none\n        // Ignore state since it doesn't apply for non iOS\n        $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n        target.style.userSelect = 'none';\n    }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n    if ($bx7SL$isIOS()) {\n        // If the state is already default, there's nothing to do.\n        // If it is restoring, then there's no need to queue a second restore.\n        if ($14c0b72509d70225$var$state !== 'disabled') return;\n        $14c0b72509d70225$var$state = 'restoring';\n        // There appears to be a delay on iOS where selection still might occur\n        // after pointer up, so wait a bit before removing user-select.\n        setTimeout(()=>{\n            // Wait for any CSS transitions to complete so we don't recompute style\n            // for the whole page in the middle of the animation and cause jank.\n            $bx7SL$runAfterTransition(()=>{\n                // Avoid race conditions\n                if ($14c0b72509d70225$var$state === 'restoring') {\n                    if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n                    $14c0b72509d70225$var$savedUserSelect = '';\n                    $14c0b72509d70225$var$state = 'default';\n                }\n            });\n        }, 300);\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n        if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n            let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n            if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n            if (target.getAttribute('style') === '') target.removeAttribute('style');\n            $14c0b72509d70225$var$modifiedElementMap.delete(target);\n        }\n    }\n}\n\n\n\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\n\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n    // Consume context from <PressResponder> and merge with props.\n    let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n    if (context) {\n        let { register: register , ...contextProps } = context;\n        props = $bx7SL$mergeProps(contextProps, props);\n        register();\n    }\n    $bx7SL$useSyncRef(context, props.ref);\n    return props;\n}\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n    let { onPress: onPress1 , onPressChange: onPressChange1 , onPressStart: onPressStart1 , onPressEnd: onPressEnd1 , onPressUp: onPressUp1 , isDisabled: isDisabled1 , isPressed: isPressedProp , preventFocusOnPress: preventFocusOnPress , shouldCancelOnPointerExit: shouldCancelOnPointerExit , allowTextSelectionOnPress: allowTextSelectionOnPress , // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _ , ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n    let propsRef = $bx7SL$useRef(null);\n    propsRef.current = {\n        onPress: onPress1,\n        onPressChange: onPressChange1,\n        onPressStart: onPressStart1,\n        onPressEnd: onPressEnd1,\n        onPressUp: onPressUp1,\n        isDisabled: isDisabled1,\n        shouldCancelOnPointerExit: shouldCancelOnPointerExit\n    };\n    let [isPressed, setPressed] = $bx7SL$useState(false);\n    let ref = $bx7SL$useRef({\n        isPressed: false,\n        ignoreEmulatedMouseEvents: false,\n        ignoreClickAfterPress: false,\n        didFirePressStart: false,\n        activePointerId: null,\n        target: null,\n        isOverTarget: false,\n        pointerType: null\n    });\n    let { addGlobalListener: addGlobalListener , removeAllGlobalListeners: removeAllGlobalListeners  } = $bx7SL$useGlobalListeners();\n    let pressProps1 = $bx7SL$useMemo(()=>{\n        let state = ref.current;\n        let triggerPressStart = (originalEvent, pointerType)=>{\n            let { onPressStart: onPressStart , onPressChange: onPressChange , isDisabled: isDisabled  } = propsRef.current;\n            if (isDisabled || state.didFirePressStart) return;\n            if (onPressStart) onPressStart({\n                type: 'pressstart',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n            if (onPressChange) onPressChange(true);\n            state.didFirePressStart = true;\n            setPressed(true);\n        };\n        let triggerPressEnd = (originalEvent, pointerType, wasPressed = true)=>{\n            let { onPressEnd: onPressEnd , onPressChange: onPressChange , onPress: onPress , isDisabled: isDisabled  } = propsRef.current;\n            if (!state.didFirePressStart) return;\n            state.ignoreClickAfterPress = true;\n            state.didFirePressStart = false;\n            if (onPressEnd) onPressEnd({\n                type: 'pressend',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n            if (onPressChange) onPressChange(false);\n            setPressed(false);\n            if (onPress && wasPressed && !isDisabled) onPress({\n                type: 'press',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let triggerPressUp = (originalEvent, pointerType)=>{\n            let { onPressUp: onPressUp , isDisabled: isDisabled  } = propsRef.current;\n            if (isDisabled) return;\n            if (onPressUp) onPressUp({\n                type: 'pressup',\n                pointerType: pointerType,\n                target: originalEvent.currentTarget,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let cancel = (e)=>{\n            if (state.isPressed) {\n                if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isPressed = false;\n                state.isOverTarget = false;\n                state.activePointerId = null;\n                state.pointerType = null;\n                removeAllGlobalListeners();\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n            }\n        };\n        let pressProps = {\n            onKeyDown (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n                    if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n                    e.stopPropagation();\n                    // If the event is repeating, it may have started on a different element\n                    // after which focus moved to the current element. Ignore these events and\n                    // only handle the first key down event.\n                    if (!state.isPressed && !e.repeat) {\n                        state.target = e.currentTarget;\n                        state.isPressed = true;\n                        triggerPressStart(e, 'keyboard');\n                        // Focus may move before the key up event, so register the event on the document\n                        // instead of the same element where the key down event occurred.\n                        addGlobalListener(document, 'keyup', onKeyUp, false);\n                    }\n                } else if (e.key === 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget)) // If the target is a link, we won't have handled this above because we want the default\n                // browser behavior to open the link when pressing Enter. But we still need to prevent\n                // default so that elements above do not also handle it (e.g. table row).\n                e.stopPropagation();\n            },\n            onKeyUp (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n            },\n            onClick (e) {\n                if (e && !e.currentTarget.contains(e.target)) return;\n                if (e && e.button === 0) {\n                    e.stopPropagation();\n                    if (isDisabled1) e.preventDefault();\n                    // If triggered from a screen reader or by using element.click(),\n                    // trigger as if it were a keyboard click.\n                    if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $bx7SL$isVirtualClick(e.nativeEvent))) {\n                        // Ensure the element receives focus (VoiceOver on iOS does not do this)\n                        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                        triggerPressStart(e, 'virtual');\n                        triggerPressUp(e, 'virtual');\n                        triggerPressEnd(e, 'virtual');\n                    }\n                    state.ignoreEmulatedMouseEvents = false;\n                    state.ignoreClickAfterPress = false;\n                }\n            }\n        };\n        let onKeyUp = (e)=>{\n            if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n                if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n                e.stopPropagation();\n                state.isPressed = false;\n                let target = e.target;\n                triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n                removeAllGlobalListeners();\n                // If the target is a link, trigger the click method to open the URL,\n                // but defer triggering pressEnd until onClick event handler.\n                if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) state.target.click();\n            }\n        };\n        if (typeof PointerEvent !== 'undefined') {\n            pressProps.onPointerDown = (e)=>{\n                // Only handle left clicks, and ignore events that bubbled through portals.\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n                // Ignore and let the onClick handler take care of it instead.\n                // https://bugs.webkit.org/show_bug.cgi?id=222627\n                // https://bugs.webkit.org/show_bug.cgi?id=223202\n                if ($bx7SL$isVirtualPointerEvent(e.nativeEvent)) {\n                    state.pointerType = 'virtual';\n                    return;\n                }\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on pointer down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                state.pointerType = e.pointerType;\n                e.stopPropagation();\n                if (!state.isPressed) {\n                    state.isPressed = true;\n                    state.isOverTarget = true;\n                    state.activePointerId = e.pointerId;\n                    state.target = e.currentTarget;\n                    if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                    if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n                    triggerPressStart(e, state.pointerType);\n                    addGlobalListener(document, 'pointermove', onPointerMove, false);\n                    addGlobalListener(document, 'pointerup', onPointerUp, false);\n                    addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n                }\n            };\n            pressProps.onMouseDown = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (e.button === 0) {\n                    // Chrome and Firefox on touch Windows devices require mouse down events\n                    // to be canceled in addition to pointer events, or an extra asynchronous\n                    // focus event will be fired.\n                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                    e.stopPropagation();\n                }\n            };\n            pressProps.onPointerUp = (e)=>{\n                // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n                if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n                // Only handle left clicks\n                // Safari on iOS sometimes fires pointerup events, even\n                // when the touch isn't over the target, so double check.\n                if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n            };\n            // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n            // Use pointer move events instead to implement our own hit testing.\n            // See https://bugs.webkit.org/show_bug.cgi?id=199803\n            let onPointerMove = (e)=>{\n                if (e.pointerId !== state.activePointerId) return;\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n                    if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    state.isPressed = false;\n                    state.isOverTarget = false;\n                    state.activePointerId = null;\n                    state.pointerType = null;\n                    removeAllGlobalListeners();\n                    if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n                }\n            };\n            let onPointerCancel = (e)=>{\n                cancel(e);\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n                cancel(e);\n            };\n        } else {\n            pressProps.onMouseDown = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on mouse down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                e.stopPropagation();\n                if (state.ignoreEmulatedMouseEvents) return;\n                state.isPressed = true;\n                state.isOverTarget = true;\n                state.target = e.currentTarget;\n                state.pointerType = $bx7SL$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n                if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                triggerPressStart(e, state.pointerType);\n                addGlobalListener(document, 'mouseup', onMouseUp, false);\n            };\n            pressProps.onMouseEnter = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = true;\n                    triggerPressStart(e, state.pointerType);\n                }\n            };\n            pressProps.onMouseLeave = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n                    state.isOverTarget = false;\n                    triggerPressEnd(e, state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            pressProps.onMouseUp = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n            };\n            let onMouseUp = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0) return;\n                state.isPressed = false;\n                removeAllGlobalListeners();\n                if (state.ignoreEmulatedMouseEvents) {\n                    state.ignoreEmulatedMouseEvents = false;\n                    return;\n                }\n                if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isOverTarget = false;\n            };\n            pressProps.onTouchStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n                if (!touch) return;\n                state.activePointerId = touch.identifier;\n                state.ignoreEmulatedMouseEvents = true;\n                state.isOverTarget = true;\n                state.isPressed = true;\n                state.target = e.currentTarget;\n                state.pointerType = 'touch';\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n                // on the emulated mouse event and handle focusing the pressable element ourselves.\n                if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n                triggerPressStart(e, state.pointerType);\n                addGlobalListener(window, 'scroll', onScroll, true);\n            };\n            pressProps.onTouchMove = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (!state.isPressed) return;\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    if (!state.isOverTarget) {\n                        state.isOverTarget = true;\n                        triggerPressStart(e, state.pointerType);\n                    }\n                } else if (state.isOverTarget) {\n                    state.isOverTarget = false;\n                    triggerPressEnd(e, state.pointerType, false);\n                    if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n                }\n            };\n            pressProps.onTouchEnd = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (!state.isPressed) return;\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    triggerPressUp(e, state.pointerType);\n                    triggerPressEnd(e, state.pointerType);\n                } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n                state.isPressed = false;\n                state.activePointerId = null;\n                state.isOverTarget = false;\n                state.ignoreEmulatedMouseEvents = true;\n                if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n                removeAllGlobalListeners();\n            };\n            pressProps.onTouchCancel = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed) cancel(e);\n            };\n            let onScroll = (e)=>{\n                if (state.isPressed && e.target.contains(state.target)) cancel({\n                    currentTarget: state.target,\n                    shiftKey: false,\n                    ctrlKey: false,\n                    metaKey: false,\n                    altKey: false\n                });\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                cancel(e);\n            };\n        }\n        return pressProps;\n    }, [\n        addGlobalListener,\n        isDisabled1,\n        preventFocusOnPress,\n        removeAllGlobalListeners,\n        allowTextSelectionOnPress\n    ]);\n    // Remove user-select: none in case component unmounts immediately after pressStart\n    // eslint-disable-next-line arrow-body-style\n    $bx7SL$useEffect(()=>{\n        return ()=>{\n            if (!allowTextSelectionOnPress) // eslint-disable-next-line react-hooks/exhaustive-deps\n            $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n        };\n    }, [\n        allowTextSelectionOnPress\n    ]);\n    return {\n        isPressed: isPressedProp || isPressed,\n        pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n    };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n    return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n    const { key: key , code: code  } = event;\n    const element = currentTarget;\n    const role = element.getAttribute('role');\n    // Accessibility for keyboards. Space and Enter only.\n    // \"Spacebar\" is for IE 11\n    return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n    const { targetTouches: targetTouches  } = event;\n    if (targetTouches.length > 0) return targetTouches[0];\n    return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n    const changedTouches = event.changedTouches;\n    for(let i = 0; i < changedTouches.length; i++){\n        const touch = changedTouches[i];\n        if (touch.identifier === pointerId) return touch;\n    }\n    return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n    return {\n        currentTarget: target,\n        shiftKey: e.shiftKey,\n        ctrlKey: e.ctrlKey,\n        metaKey: e.metaKey,\n        altKey: e.altKey\n    };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n    let offsetX = point.width / 2 || point.radiusX || 0;\n    let offsetY = point.height / 2 || point.radiusY || 0;\n    return {\n        top: point.clientY - offsetY,\n        right: point.clientX + offsetX,\n        bottom: point.clientY + offsetY,\n        left: point.clientX - offsetX\n    };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n    // check if they cannot overlap on x axis\n    if (a.left > b.right || b.left > a.right) return false;\n    // check if they cannot overlap on y axis\n    if (a.top > b.bottom || b.top > a.bottom) return false;\n    return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n    let rect = target.getBoundingClientRect();\n    let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n    return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n    // We cannot prevent default if the target is a draggable element.\n    return !(target instanceof HTMLElement) || !target.draggable;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n    if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n    if (target instanceof HTMLButtonElement) return target.type !== 'submit';\n    return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\n    'checkbox',\n    'radio',\n    'range',\n    'color',\n    'file',\n    'image',\n    'button',\n    'submit',\n    'reset'\n]);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n    // Only space should toggle checkboxes and radios, not enter.\n    return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\n\n\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/ (/* unused pure expression or super */ null && ($bx7SL$react.forwardRef(({ children: children , ...props }, ref)=>{\n    let newRef = $bx7SL$useRef();\n    ref = ref !== null && ref !== void 0 ? ref : newRef;\n    let { pressProps: pressProps  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n        ...props,\n        ref: ref\n    });\n    let child = $bx7SL$react.Children.only(children);\n    return(/*#__PURE__*/ $bx7SL$react.cloneElement(child, // @ts-ignore\n    {\n        ref: ref,\n        ...$bx7SL$mergeProps(child.props, pressProps)\n    }));\n})));\n\n\n\n\n\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/ (/* unused pure expression or super */ null && ($bx7SL$react.forwardRef(({ children: children , ...props }, ref)=>{\n    let isRegistered = $bx7SL$useRef(false);\n    let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n    let context = $bx7SL$mergeProps(prevContext || {\n    }, {\n        ...props,\n        ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n        register () {\n            isRegistered.current = true;\n            if (prevContext) prevContext.register();\n        }\n    });\n    $bx7SL$useSyncRef(prevContext, ref);\n    $bx7SL$useEffect(()=>{\n        if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n    }, []);\n    return(/*#__PURE__*/ $bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n        value: context\n    }, children));\n})));\n\n\n\n\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n    isDefaultPrevented() {\n        return this.nativeEvent.defaultPrevented;\n    }\n    preventDefault() {\n        this.defaultPrevented = true;\n        this.nativeEvent.preventDefault();\n    }\n    stopPropagation() {\n        this.nativeEvent.stopPropagation();\n        this.isPropagationStopped = ()=>true\n        ;\n    }\n    isPropagationStopped() {\n        return false;\n    }\n    persist() {\n    }\n    constructor(type, nativeEvent){\n        this.nativeEvent = nativeEvent;\n        this.target = nativeEvent.target;\n        this.currentTarget = nativeEvent.currentTarget;\n        this.relatedTarget = nativeEvent.relatedTarget;\n        this.bubbles = nativeEvent.bubbles;\n        this.cancelable = nativeEvent.cancelable;\n        this.defaultPrevented = nativeEvent.defaultPrevented;\n        this.eventPhase = nativeEvent.eventPhase;\n        this.isTrusted = nativeEvent.isTrusted;\n        this.timeStamp = nativeEvent.timeStamp;\n        this.type = type;\n    }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n    let stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isFocused: false,\n        onBlur: onBlur,\n        observer: null\n    });\n    stateRef.current.onBlur = onBlur;\n    // Clean up MutationObserver on unmount. See below.\n    // eslint-disable-next-line arrow-body-style\n    (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_1__/* .useLayoutEffect */ .bt)(()=>{\n        const state = stateRef.current;\n        return ()=>{\n            if (state.observer) {\n                state.observer.disconnect();\n                state.observer = null;\n            }\n        };\n    }, []);\n    // This function is called during a React onFocus event.\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e1)=>{\n        // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n        // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n        // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n        // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n        if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n            stateRef.current.isFocused = true;\n            let target = e1.target;\n            let onBlurHandler = (e)=>{\n                var // For backward compatibility, dispatch a (fake) React synthetic event.\n                _current, ref;\n                stateRef.current.isFocused = false;\n                if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));\n                // We no longer need the MutationObserver once the target is blurred.\n                if (stateRef.current.observer) {\n                    stateRef.current.observer.disconnect();\n                    stateRef.current.observer = null;\n                }\n            };\n            target.addEventListener('focusout', onBlurHandler, {\n                once: true\n            });\n            stateRef.current.observer = new MutationObserver(()=>{\n                if (stateRef.current.isFocused && target.disabled) {\n                    stateRef.current.observer.disconnect();\n                    target.dispatchEvent(new FocusEvent('blur'));\n                    target.dispatchEvent(new FocusEvent('focusout', {\n                        bubbles: true\n                    }));\n                }\n            });\n            stateRef.current.observer.observe(target, {\n                attributes: true,\n                attributeFilter: [\n                    'disabled'\n                ]\n            });\n        }\n    }, []);\n}\n\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n    let { isDisabled: isDisabled , onFocus: onFocusProp , onBlur: onBlurProp , onFocusChange: onFocusChange  } = props;\n    const onBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (e.target === e.currentTarget) {\n            if (onBlurProp) onBlurProp(e);\n            if (onFocusChange) onFocusChange(false);\n            return true;\n        }\n    }, [\n        onBlurProp,\n        onFocusChange\n    ]);\n    const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n    const onFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (e.target === e.currentTarget) {\n            if (onFocusProp) onFocusProp(e);\n            if (onFocusChange) onFocusChange(true);\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusChange,\n        onFocusProp,\n        onSyntheticFocus\n    ]);\n    return {\n        focusProps: {\n            onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n            onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n        }\n    };\n}\n\n\n\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n    Tab: true,\n    Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n    for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */ function $507fabe10e71c6fb$var$isValidKey(e) {\n    // Control and Shift keys trigger when navigating back to the tab with keyboard.\n    return !(e.metaKey || !(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_1__/* .isMac */ .V5)() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    if ($507fabe10e71c6fb$var$isValidKey(e)) {\n        $507fabe10e71c6fb$var$currentModality = 'keyboard';\n        $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n    $507fabe10e71c6fb$var$currentModality = 'pointer';\n    if (e.type === 'mousedown' || e.type === 'pointerdown') {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n    }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n    if ((0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_1__/* .isVirtualClick */ .Zj)(e)) {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        $507fabe10e71c6fb$var$currentModality = 'virtual';\n    }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n    // Firefox fires two extra focus events when the user first clicks into an iframe:\n    // first on the window, then on the document. We ignore these events so they don't\n    // cause keyboard focus rings to appear.\n    if (e.target === window || e.target === document) return;\n    // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n    // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n        $507fabe10e71c6fb$var$currentModality = 'virtual';\n        $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n    }\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n    // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n    // for example, since a subsequent focus event won't be fired.\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */ function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n    if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n    // Programmatic focus() calls shouldn't affect the current input modality.\n    // However, we need to detect other cases when a focus event occurs without\n    // a preceding user event (e.g. screen reader focus). Overriding the focus\n    // method on HTMLElement.prototype is a bit hacky, but works.\n    let focus = HTMLElement.prototype.focus;\n    HTMLElement.prototype.focus = function() {\n        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n        focus.apply(this, arguments);\n    };\n    document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n    document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);\n    // Register focus events on the window so they are sure to happen\n    // before React's event listeners (registered on the document).\n    window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n    window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n    if (typeof PointerEvent !== 'undefined') {\n        document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    } else {\n        document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n        document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    }\n    $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== 'undefined') {\n    if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n    return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n    return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n    $507fabe10e71c6fb$var$currentModality = modality;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n    $bx7SL$useEffect(()=>{\n        let handler = ()=>{\n            setModality($507fabe10e71c6fb$var$currentModality);\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    }, []);\n    return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */ function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n    return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {\n}) {\n    let { isTextInput: isTextInput , autoFocus: autoFocus  } = props;\n    let [isFocusVisibleState, setFocusVisible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n    $507fabe10e71c6fb$export$ec71b4b83ac08ec3(($507fabe10e71c6fb$export$b9b3dfddab17db27)=>{\n        setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n    }, [\n        isTextInput\n    ], {\n        isTextInput: isTextInput\n    });\n    return {\n        isFocusVisible: isFocusVisibleState\n    };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n    $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let handler = (modality, e)=>{\n            if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n            fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n        };\n        $507fabe10e71c6fb$var$changeHandlers.add(handler);\n        return ()=>{\n            $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n}\n\n\n\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n    let { isDisabled: isDisabled , onBlurWithin: onBlurWithin , onFocusWithin: onFocusWithin , onFocusWithinChange: onFocusWithinChange  } = props;\n    let state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isFocusWithin: false\n    });\n    let onBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n        // when moving focus inside the element. Only trigger if the currentTarget doesn't\n        // include the relatedTarget (where focus is moving).\n        if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n            state.current.isFocusWithin = false;\n            if (onBlurWithin) onBlurWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(false);\n        }\n    }, [\n        onBlurWithin,\n        onFocusWithinChange,\n        state\n    ]);\n    let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n    let onFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        if (!state.current.isFocusWithin) {\n            if (onFocusWithin) onFocusWithin(e);\n            if (onFocusWithinChange) onFocusWithinChange(true);\n            state.current.isFocusWithin = true;\n            onSyntheticFocus(e);\n        }\n    }, [\n        onFocusWithin,\n        onFocusWithinChange,\n        onSyntheticFocus\n    ]);\n    if (isDisabled) return {\n        focusWithinProps: {\n            onFocus: null,\n            onBlur: null\n        }\n    };\n    return {\n        focusWithinProps: {\n            onFocus: onFocus,\n            onBlur: onBlur\n        }\n    };\n}\n\n\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n    // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n    // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n    // the distant future because a user previously touched the element.\n    setTimeout(()=>{\n        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n    }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n    if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n    if (typeof document === 'undefined') return;\n    if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);\n    else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    $6179b936705e76d3$var$hoverCount++;\n    return ()=>{\n        $6179b936705e76d3$var$hoverCount--;\n        if ($6179b936705e76d3$var$hoverCount > 0) return;\n        if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);\n        else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n    };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n    let { onHoverStart: onHoverStart , onHoverChange: onHoverChange , onHoverEnd: onHoverEnd , isDisabled: isDisabled  } = props;\n    let [isHovered, setHovered] = $bx7SL$useState(false);\n    let state = $bx7SL$useRef({\n        isHovered: false,\n        ignoreEmulatedMouseEvents: false,\n        pointerType: '',\n        target: null\n    }).current;\n    $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n    let { hoverProps: hoverProps1 , triggerHoverEnd: triggerHoverEnd1  } = $bx7SL$useMemo(()=>{\n        let triggerHoverStart = (event, pointerType)=>{\n            state.pointerType = pointerType;\n            if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n            state.isHovered = true;\n            let target = event.currentTarget;\n            state.target = target;\n            if (onHoverStart) onHoverStart({\n                type: 'hoverstart',\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(true);\n            setHovered(true);\n        };\n        let triggerHoverEnd = (event, pointerType)=>{\n            state.pointerType = '';\n            state.target = null;\n            if (pointerType === 'touch' || !state.isHovered) return;\n            state.isHovered = false;\n            let target = event.currentTarget;\n            if (onHoverEnd) onHoverEnd({\n                type: 'hoverend',\n                target: target,\n                pointerType: pointerType\n            });\n            if (onHoverChange) onHoverChange(false);\n            setHovered(false);\n        };\n        let hoverProps = {\n        };\n        if (typeof PointerEvent !== 'undefined') {\n            hoverProps.onPointerEnter = (e)=>{\n                if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n                triggerHoverStart(e, e.pointerType);\n            };\n            hoverProps.onPointerLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n            };\n        } else {\n            hoverProps.onTouchStart = ()=>{\n                state.ignoreEmulatedMouseEvents = true;\n            };\n            hoverProps.onMouseEnter = (e)=>{\n                if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n                state.ignoreEmulatedMouseEvents = false;\n            };\n            hoverProps.onMouseLeave = (e)=>{\n                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n            };\n        }\n        return {\n            hoverProps: hoverProps,\n            triggerHoverEnd: triggerHoverEnd\n        };\n    }, [\n        onHoverStart,\n        onHoverChange,\n        onHoverEnd,\n        isDisabled,\n        state\n    ]);\n    $bx7SL$useEffect(()=>{\n        // Call the triggerHoverEnd as soon as isDisabled changes to true\n        // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n        if (isDisabled) triggerHoverEnd1({\n            currentTarget: state.target\n        }, state.pointerType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isDisabled\n    ]);\n    return {\n        hoverProps: hoverProps1,\n        isHovered: isHovered\n    };\n}\n\n\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n    let { ref: ref , onInteractOutside: onInteractOutside , isDisabled: isDisabled , onInteractOutsideStart: onInteractOutsideStart  } = props;\n    let stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isPointerDown: false,\n        ignoreEmulatedMouseEvents: false,\n        onInteractOutside: onInteractOutside,\n        onInteractOutsideStart: onInteractOutsideStart\n    });\n    let state = stateRef.current;\n    state.onInteractOutside = onInteractOutside;\n    state.onInteractOutsideStart = onInteractOutsideStart;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isDisabled) return;\n        let onPointerDown = (e)=>{\n            if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n                if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n                state.isPointerDown = true;\n            }\n        };\n        // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n        if (typeof PointerEvent !== 'undefined') {\n            let onPointerUp = (e)=>{\n                if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            // changing these to capture phase fixed combobox\n            document.addEventListener('pointerdown', onPointerDown, true);\n            document.addEventListener('pointerup', onPointerUp, true);\n            return ()=>{\n                document.removeEventListener('pointerdown', onPointerDown, true);\n                document.removeEventListener('pointerup', onPointerUp, true);\n            };\n        } else {\n            let onMouseUp = (e)=>{\n                if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;\n                else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            let onTouchEnd = (e)=>{\n                state.ignoreEmulatedMouseEvents = true;\n                if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n                    state.isPointerDown = false;\n                    state.onInteractOutside(e);\n                }\n            };\n            document.addEventListener('mousedown', onPointerDown, true);\n            document.addEventListener('mouseup', onMouseUp, true);\n            document.addEventListener('touchstart', onPointerDown, true);\n            document.addEventListener('touchend', onTouchEnd, true);\n            return ()=>{\n                document.removeEventListener('mousedown', onPointerDown, true);\n                document.removeEventListener('mouseup', onMouseUp, true);\n                document.removeEventListener('touchstart', onPointerDown, true);\n                document.removeEventListener('touchend', onTouchEnd, true);\n            };\n        }\n    }, [\n        ref,\n        state,\n        isDisabled\n    ]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n    if (event.button > 0) return false;\n    // if the event target is no longer in the document\n    if (event.target) {\n        const ownerDocument = event.target.ownerDocument;\n        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n    }\n    return ref.current && !ref.current.contains(event.target);\n}\n\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n    if (!handler) return;\n    let shouldStopPropagation = true;\n    return (e)=>{\n        let event = {\n            ...e,\n            preventDefault () {\n                e.preventDefault();\n            },\n            isDefaultPrevented () {\n                return e.isDefaultPrevented();\n            },\n            stopPropagation () {\n                console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n            },\n            continuePropagation () {\n                shouldStopPropagation = false;\n            }\n        };\n        handler(event);\n        if (shouldStopPropagation) e.stopPropagation();\n    };\n}\n\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n    return {\n        keyboardProps: props.isDisabled ? {\n        } : {\n            onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n            onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n        }\n    };\n}\n\n\n\n\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n    let { onMoveStart: onMoveStart , onMove: onMove , onMoveEnd: onMoveEnd  } = props;\n    let state = $bx7SL$useRef({\n        didMove: false,\n        lastPosition: null,\n        id: null\n    });\n    let { addGlobalListener: addGlobalListener , removeGlobalListener: removeGlobalListener  } = $bx7SL$useGlobalListeners();\n    let moveProps1 = $bx7SL$useMemo(()=>{\n        let moveProps = {\n        };\n        let start = ()=>{\n            $14c0b72509d70225$export$16a4697467175487();\n            state.current.didMove = false;\n        };\n        let move = (originalEvent, pointerType, deltaX, deltaY)=>{\n            if (deltaX === 0 && deltaY === 0) return;\n            if (!state.current.didMove) {\n                state.current.didMove = true;\n                onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n                    type: 'movestart',\n                    pointerType: pointerType,\n                    shiftKey: originalEvent.shiftKey,\n                    metaKey: originalEvent.metaKey,\n                    ctrlKey: originalEvent.ctrlKey,\n                    altKey: originalEvent.altKey\n                });\n            }\n            onMove({\n                type: 'move',\n                pointerType: pointerType,\n                deltaX: deltaX,\n                deltaY: deltaY,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        let end = (originalEvent, pointerType)=>{\n            $14c0b72509d70225$export$b0d6fa1ab32e3295();\n            if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n                type: 'moveend',\n                pointerType: pointerType,\n                shiftKey: originalEvent.shiftKey,\n                metaKey: originalEvent.metaKey,\n                ctrlKey: originalEvent.ctrlKey,\n                altKey: originalEvent.altKey\n            });\n        };\n        if (typeof PointerEvent === 'undefined') {\n            let onMouseMove = (e)=>{\n                if (e.button === 0) {\n                    move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onMouseUp = (e)=>{\n                if (e.button === 0) {\n                    end(e, 'mouse');\n                    removeGlobalListener(window, 'mousemove', onMouseMove, false);\n                    removeGlobalListener(window, 'mouseup', onMouseUp, false);\n                }\n            };\n            moveProps.onMouseDown = (e)=>{\n                if (e.button === 0) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    addGlobalListener(window, 'mousemove', onMouseMove, false);\n                    addGlobalListener(window, 'mouseup', onMouseUp, false);\n                }\n            };\n            let onTouchMove = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier  })=>identifier === state.current.id\n                );\n                if (touch >= 0) {\n                    let { pageX: pageX , pageY: pageY  } = e.changedTouches[touch];\n                    move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: pageX,\n                        pageY: pageY\n                    };\n                }\n            };\n            let onTouchEnd = (e)=>{\n                let touch = [\n                    ...e.changedTouches\n                ].findIndex(({ identifier: identifier  })=>identifier === state.current.id\n                );\n                if (touch >= 0) {\n                    end(e, 'touch');\n                    state.current.id = null;\n                    removeGlobalListener(window, 'touchmove', onTouchMove);\n                    removeGlobalListener(window, 'touchend', onTouchEnd);\n                    removeGlobalListener(window, 'touchcancel', onTouchEnd);\n                }\n            };\n            moveProps.onTouchStart = (e)=>{\n                if (e.changedTouches.length === 0 || state.current.id != null) return;\n                let { pageX: pageX , pageY: pageY , identifier: identifier  } = e.changedTouches[0];\n                start();\n                e.stopPropagation();\n                e.preventDefault();\n                state.current.lastPosition = {\n                    pageX: pageX,\n                    pageY: pageY\n                };\n                state.current.id = identifier;\n                addGlobalListener(window, 'touchmove', onTouchMove, false);\n                addGlobalListener(window, 'touchend', onTouchEnd, false);\n                addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n            };\n        } else {\n            let onPointerMove = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || 'mouse';\n                    // Problems with PointerEvent#movementX/movementY:\n                    // 1. it is always 0 on macOS Safari.\n                    // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n                    move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.current.id) {\n                    let pointerType = e.pointerType || 'mouse';\n                    end(e, pointerType);\n                    state.current.id = null;\n                    removeGlobalListener(window, 'pointermove', onPointerMove, false);\n                    removeGlobalListener(window, 'pointerup', onPointerUp, false);\n                    removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n                }\n            };\n            moveProps.onPointerDown = (e)=>{\n                if (e.button === 0 && state.current.id == null) {\n                    start();\n                    e.stopPropagation();\n                    e.preventDefault();\n                    state.current.lastPosition = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    state.current.id = e.pointerId;\n                    addGlobalListener(window, 'pointermove', onPointerMove, false);\n                    addGlobalListener(window, 'pointerup', onPointerUp, false);\n                    addGlobalListener(window, 'pointercancel', onPointerUp, false);\n                }\n            };\n        }\n        let triggerKeyboardMove = (e, deltaX, deltaY)=>{\n            start();\n            move(e, 'keyboard', deltaX, deltaY);\n            end(e, 'keyboard');\n        };\n        moveProps.onKeyDown = (e)=>{\n            switch(e.key){\n                case 'Left':\n                case 'ArrowLeft':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, -1, 0);\n                    break;\n                case 'Right':\n                case 'ArrowRight':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 1, 0);\n                    break;\n                case 'Up':\n                case 'ArrowUp':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, -1);\n                    break;\n                case 'Down':\n                case 'ArrowDown':\n                    e.preventDefault();\n                    e.stopPropagation();\n                    triggerKeyboardMove(e, 0, 1);\n                    break;\n            }\n        };\n        return moveProps;\n    }, [\n        state,\n        onMoveStart,\n        onMove,\n        onMoveEnd,\n        addGlobalListener,\n        removeGlobalListener\n    ]);\n    return {\n        moveProps: moveProps1\n    };\n}\n\n\n\n\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n    let { onScroll: onScroll , isDisabled: isDisabled  } = props;\n    let onScrollHandler = $bx7SL$useCallback((e)=>{\n        // If the ctrlKey is pressed, this is a zoom event, do nothing.\n        if (e.ctrlKey) return;\n        // stop scrolling the page\n        e.preventDefault();\n        e.stopPropagation();\n        if (onScroll) onScroll({\n            deltaX: e.deltaX,\n            deltaY: e.deltaY\n        });\n    }, [\n        onScroll\n    ]);\n    $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\n\n\n\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n    let { isDisabled: isDisabled , onLongPressStart: onLongPressStart , onLongPressEnd: onLongPressEnd , onLongPress: onLongPress , threshold: threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD , accessibilityDescription: accessibilityDescription  } = props;\n    const timeRef = $bx7SL$useRef(null);\n    let { addGlobalListener: addGlobalListener , removeGlobalListener: removeGlobalListener  } = $bx7SL$useGlobalListeners();\n    let { pressProps: pressProps  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n        isDisabled: isDisabled,\n        onPressStart (e1) {\n            if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n                if (onLongPressStart) onLongPressStart({\n                    ...e1,\n                    type: 'longpressstart'\n                });\n                timeRef.current = setTimeout(()=>{\n                    // Prevent other usePress handlers from also handling this event.\n                    e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n                        bubbles: true\n                    }));\n                    if (onLongPress) onLongPress({\n                        ...e1,\n                        type: 'longpress'\n                    });\n                    timeRef.current = null;\n                }, threshold);\n                // Prevent context menu, which may be opened on long press on touch devices\n                if (e1.pointerType === 'touch') {\n                    let onContextMenu = (e)=>{\n                        e.preventDefault();\n                    };\n                    addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n                        once: true\n                    });\n                    addGlobalListener(window, 'pointerup', ()=>{\n                        // If no contextmenu event is fired quickly after pointerup, remove the handler\n                        // so future context menu events outside a long press are not prevented.\n                        setTimeout(()=>{\n                            removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n                        }, 30);\n                    }, {\n                        once: true\n                    });\n                }\n            }\n        },\n        onPressEnd (e) {\n            if (timeRef.current) clearTimeout(timeRef.current);\n            if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({\n                ...e,\n                type: 'longpressend'\n            });\n        }\n    });\n    let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n    return {\n        longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n    };\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7354\n")},1925:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "DismissButton": function() { return /* binding */ DismissButton; },\n  "ModalProvider": function() { return /* binding */ ModalProvider; },\n  "OverlayContainer": function() { return /* binding */ OverlayContainer; },\n  "OverlayProvider": function() { return /* binding */ OverlayProvider; },\n  "ariaHideOutside": function() { return /* binding */ ariaHideOutside; },\n  "useModal": function() { return /* binding */ useModal; },\n  "useModalProvider": function() { return /* binding */ useModalProvider; },\n  "useOverlay": function() { return /* binding */ useOverlay; },\n  "useOverlayPosition": function() { return /* binding */ useOverlayPosition; },\n  "useOverlayTrigger": function() { return /* binding */ useOverlayTrigger; },\n  "usePreventScroll": function() { return /* binding */ usePreventScroll; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@react-aria/utils/dist/module.js\nvar dist_module = __webpack_require__(3952);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/@react-aria/interactions/dist/module.js\nvar interactions_dist_module = __webpack_require__(7354);\n;// CONCATENATED MODULE: ./node_modules/@react-aria/visually-hidden/dist/module.js\n\n\n\n\n\n\n\nconst $5c3e21d68f1c4674$var$styles = {\n    border: 0,\n    clip: \'rect(0 0 0 0)\',\n    clipPath: \'inset(50%)\',\n    height: 1,\n    margin: \'0 -1px -1px 0\',\n    overflow: \'hidden\',\n    padding: 0,\n    position: \'absolute\',\n    width: 1,\n    whiteSpace: \'nowrap\'\n};\nfunction $5c3e21d68f1c4674$export$a966af930f325cab(props = {\n}) {\n    let { style: style , isFocusable: isFocusable  } = props;\n    let [isFocused, setFocused] = (0,react.useState)(false);\n    let { focusWithinProps: focusWithinProps  } = (0,interactions_dist_module/* useFocusWithin */.L_)({\n        isDisabled: !isFocusable,\n        onFocusWithinChange: (val)=>setFocused(val)\n    });\n    // If focused, don\'t hide the element.\n    let combinedStyles = (0,react.useMemo)(()=>{\n        if (isFocused) return style;\n        else if (style) return {\n            ...$5c3e21d68f1c4674$var$styles,\n            ...style\n        };\n        else return $5c3e21d68f1c4674$var$styles;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isFocused\n    ]);\n    return {\n        visuallyHiddenProps: {\n            ...focusWithinProps,\n            style: combinedStyles\n        }\n    };\n}\nfunction $5c3e21d68f1c4674$export$439d29a4e110a164(props) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let { children: children , elementType: Element = \'div\' , isFocusable: isFocusable , style: style , ...otherProps } = props;\n    let { visuallyHiddenProps: visuallyHiddenProps  } = $5c3e21d68f1c4674$export$a966af930f325cab(props);\n    return(/*#__PURE__*/ react.createElement(Element, (0,dist_module/* mergeProps */.dG)(otherProps, visuallyHiddenProps), children));\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/interopRequireDefault.js\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(3935);\n// EXTERNAL MODULE: ./node_modules/@react-aria/ssr/dist/module.js\nvar ssr_dist_module = __webpack_require__(8831);\n;// CONCATENATED MODULE: ./node_modules/@react-aria/i18n/dist/real-module.js\n\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // https://en.wikipedia.org/wiki/Right-to-left\nconst $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set([\n    \'Arab\',\n    \'Syrc\',\n    \'Samr\',\n    \'Mand\',\n    \'Thaa\',\n    \'Mend\',\n    \'Nkoo\',\n    \'Adlm\',\n    \'Rohg\',\n    \'Hebr\'\n]);\nconst $148a7a147e38ea7f$var$RTL_LANGS = new Set([\n    \'ae\',\n    \'ar\',\n    \'arc\',\n    \'bcc\',\n    \'bqi\',\n    \'ckb\',\n    \'dv\',\n    \'fa\',\n    \'glk\',\n    \'he\',\n    \'ku\',\n    \'mzn\',\n    \'nqo\',\n    \'pnb\',\n    \'ps\',\n    \'sd\',\n    \'ug\',\n    \'ur\',\n    \'yi\'\n]);\nfunction $148a7a147e38ea7f$export$702d680b21cbd764(locale) {\n    // If the Intl.Locale API is available, use it to get the script for the locale.\n    // This is more accurate than guessing by language, since languages can be written in multiple scripts.\n    // @ts-ignore\n    if (Intl.Locale) {\n        // @ts-ignore\n        let script = new Intl.Locale(locale).maximize().script;\n        return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);\n    }\n    // If not, just guess by the language (first part of the locale)\n    let lang = locale.split(\'-\')[0];\n    return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);\n}\n\n\n\n\n\nfunction $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {\n    // @ts-ignore\n    let locale = typeof navigator !== \'undefined\' && (navigator.language || navigator.userLanguage) || \'en-US\';\n    try {\n        // @ts-ignore\n        Intl.DateTimeFormat.supportedLocalesOf([\n            locale\n        ]);\n    } catch (_err) {\n        locale = \'en-US\';\n    }\n    return {\n        locale: locale,\n        direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? \'rtl\' : \'ltr\'\n    };\n}\nlet $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\nlet $1e5a04cdaf7d1af8$var$listeners = new Set();\nfunction $1e5a04cdaf7d1af8$var$updateLocale() {\n    $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();\n    for (let listener of $1e5a04cdaf7d1af8$var$listeners)listener($1e5a04cdaf7d1af8$var$currentLocale);\n}\nfunction $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {\n    let isSSR = (0,ssr_dist_module/* useIsSSR */.Av)();\n    let [defaultLocale, setDefaultLocale] = (0,react.useState)($1e5a04cdaf7d1af8$var$currentLocale);\n    (0,react.useEffect)(()=>{\n        if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener(\'languagechange\', $1e5a04cdaf7d1af8$var$updateLocale);\n        $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);\n        return ()=>{\n            $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);\n            if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener(\'languagechange\', $1e5a04cdaf7d1af8$var$updateLocale);\n        };\n    }, []);\n    // We cannot determine the browser\'s language on the server, so default to\n    // en-US. This will be updated after hydration on the client to the correct value.\n    if (isSSR) return {\n        locale: \'en-US\',\n        direction: \'ltr\'\n    };\n    return defaultLocale;\n}\n\n\n\nconst $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/ react.createContext(null);\nfunction $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {\n    let { locale: locale , children: children  } = props;\n    let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();\n    let value = locale ? {\n        locale: locale,\n        direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? \'rtl\' : \'ltr\'\n    } : defaultLocale;\n    return(/*#__PURE__*/ $iFADg$react.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {\n        value: value\n    }, children));\n}\nfunction $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {\n    let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();\n    let context = (0,react.useContext)($18f2051aff69b9bf$var$I18nContext);\n    return context || defaultLocale;\n}\n\n\nvar $2aa2084a6c2b6b4f$exports = {};\n"use strict";\n\n\n\n\n\nconst $fca6afa0e843324b$var$cache = new WeakMap();\nfunction $fca6afa0e843324b$var$getCachedDictionary(strings) {\n    let dictionary = $fca6afa0e843324b$var$cache.get(strings);\n    if (!dictionary) {\n        dictionary = new $iFADg$LocalizedStringDictionary(strings);\n        $fca6afa0e843324b$var$cache.set(strings, dictionary);\n    }\n    return dictionary;\n}\nfunction $fca6afa0e843324b$export$f12b703ca79dfbb1(strings) {\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    let dictionary = $iFADg$useMemo(()=>$fca6afa0e843324b$var$getCachedDictionary(strings)\n    , [\n        strings\n    ]);\n    return $iFADg$useMemo(()=>new $iFADg$LocalizedStringFormatter(locale, dictionary)\n    , [\n        locale,\n        dictionary\n    ]);\n}\n\n\n\n\nfunction $33bf17300c498528$export$a2f47a3d2973640(options = {\n}) {\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    // @ts-ignore\n    return $iFADg$useMemo(()=>new Intl.ListFormat(locale, options)\n    , [\n        locale,\n        options\n    ]);\n}\n\n\n\n\n\nfunction $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {\n    // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.\n    let lastOptions = $iFADg$useRef(null);\n    if (options && lastOptions.current && $896ba0a80a8f4d36$var$isEqual(options, lastOptions.current)) options = lastOptions.current;\n    lastOptions.current = options;\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    return $iFADg$useMemo(()=>new $iFADg$DateFormatter(locale, options)\n    , [\n        locale,\n        options\n    ]);\n}\nfunction $896ba0a80a8f4d36$var$isEqual(a, b) {\n    if (a === b) return true;\n    let aKeys = Object.keys(a);\n    let bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) return false;\n    for (let key of aKeys){\n        if (b[key] !== a[key]) return false;\n    }\n    return true;\n}\n\n\n\n\n\nfunction $a916eb452884faea$export$b7a616150fdb9f44(options = {\n}) {\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    return $iFADg$useMemo(()=>new $iFADg$NumberFormatter(locale, options)\n    , [\n        locale,\n        options\n    ]);\n}\n\n\n\nlet $325a3faab7a68acd$var$cache = new Map();\nfunction $325a3faab7a68acd$export$a16aca283550c30d(options) {\n    let { locale: locale  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1\n    ).join() : \'\');\n    if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);\n    let formatter = new Intl.Collator(locale, options);\n    $325a3faab7a68acd$var$cache.set(cacheKey, formatter);\n    return formatter;\n}\n\n\n\nfunction $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n    let collator = $325a3faab7a68acd$export$a16aca283550c30d({\n        usage: \'search\',\n        ...options\n    });\n    // TODO(later): these methods don\'t currently support the ignorePunctuation option.\n    return {\n        startsWith (string, substring) {\n            if (substring.length === 0) return true;\n            // Normalize both strings so we can slice safely\n            // TODO: take into account the ignorePunctuation option as well...\n            string = string.normalize(\'NFC\');\n            substring = substring.normalize(\'NFC\');\n            return collator.compare(string.slice(0, substring.length), substring) === 0;\n        },\n        endsWith (string, substring) {\n            if (substring.length === 0) return true;\n            string = string.normalize(\'NFC\');\n            substring = substring.normalize(\'NFC\');\n            return collator.compare(string.slice(-substring.length), substring) === 0;\n        },\n        contains (string, substring) {\n            if (substring.length === 0) return true;\n            string = string.normalize(\'NFC\');\n            substring = substring.normalize(\'NFC\');\n            let scan = 0;\n            let sliceLen = substring.length;\n            for(; scan + sliceLen <= string.length; scan++){\n                let slice = string.slice(scan, scan + sliceLen);\n                if (collator.compare(substring, slice) === 0) return true;\n            }\n            return false;\n        }\n    };\n}\n\n\n\n\n\n//# sourceMappingURL=real-module.js.map\n\n;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== "function" && b !== null)\r\n        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o["default"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\r\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === "m") throw new TypeError("Private method is not writable");\r\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\r\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\r\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nfunction __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use \'in\' operator on non-object");\r\n    return typeof state === "function" ? receiver === state : state.has(receiver);\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-messageformat-parser/lib/error.js\nvar ErrorKind;\n(function (ErrorKind) {\n    /** Argument is unclosed (e.g. `{0`) */\n    ErrorKind[ErrorKind["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";\n    /** Argument is empty (e.g. `{}`). */\n    ErrorKind[ErrorKind["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";\n    /** Argument is malformed (e.g. `{foo!}``) */\n    ErrorKind[ErrorKind["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";\n    /** Expect an argument type (e.g. `{foo,}`) */\n    ErrorKind[ErrorKind["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";\n    /** Unsupported argument type (e.g. `{foo,foo}`) */\n    ErrorKind[ErrorKind["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";\n    /** Expect an argument style (e.g. `{foo, number, }`) */\n    ErrorKind[ErrorKind["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";\n    /** The number skeleton is invalid. */\n    ErrorKind[ErrorKind["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";\n    /** The date time skeleton is invalid. */\n    ErrorKind[ErrorKind["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";\n    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */\n    ErrorKind[ErrorKind["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";\n    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */\n    ErrorKind[ErrorKind["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";\n    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, \'test`) */\n    ErrorKind[ErrorKind["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";\n    /** Missing select argument options (e.g. `{foo, select}`) */\n    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";\n    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */\n    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";\n    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */\n    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";\n    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */\n    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";\n    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */\n    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";\n    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */\n    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";\n    /**\n     * Expecting a message fragment after the `plural` or `selectordinal` selector\n     * (e.g. `{foo, plural, one}`)\n     */\n    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";\n    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */\n    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";\n    /**\n     * Duplicate selectors in `plural` or `selectordinal` argument.\n     * (e.g. {foo, plural, one {#} one {#}})\n     */\n    ErrorKind[ErrorKind["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";\n    /** Duplicate selectors in `select` argument.\n     * (e.g. {foo, select, apple {apple} apple {apple}})\n     */\n    ErrorKind[ErrorKind["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";\n    /** Plural or select argument option must have `other` clause. */\n    ErrorKind[ErrorKind["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";\n    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */\n    ErrorKind[ErrorKind["INVALID_TAG"] = 23] = "INVALID_TAG";\n    /** The tag name is invalid. (e.g. `<123>foo</123>`) */\n    ErrorKind[ErrorKind["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";\n    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */\n    ErrorKind[ErrorKind["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";\n    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */\n    ErrorKind[ErrorKind["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";\n})(ErrorKind || (ErrorKind = {}));\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-messageformat-parser/lib/types.js\nvar TYPE;\n(function (TYPE) {\n    /**\n     * Raw text\n     */\n    TYPE[TYPE["literal"] = 0] = "literal";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */\n    TYPE[TYPE["argument"] = 1] = "argument";\n    /**\n     * Variable w/ number format\n     */\n    TYPE[TYPE["number"] = 2] = "number";\n    /**\n     * Variable w/ date format\n     */\n    TYPE[TYPE["date"] = 3] = "date";\n    /**\n     * Variable w/ time format\n     */\n    TYPE[TYPE["time"] = 4] = "time";\n    /**\n     * Variable w/ select format\n     */\n    TYPE[TYPE["select"] = 5] = "select";\n    /**\n     * Variable w/ plural format\n     */\n    TYPE[TYPE["plural"] = 6] = "plural";\n    /**\n     * Only possible within plural argument.\n     * This is the `#` symbol that will be substituted with the count.\n     */\n    TYPE[TYPE["pound"] = 7] = "pound";\n    /**\n     * XML-like tag\n     */\n    TYPE[TYPE["tag"] = 8] = "tag";\n})(TYPE || (TYPE = {}));\nvar SKELETON_TYPE;\n(function (SKELETON_TYPE) {\n    SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";\n    SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";\n})(SKELETON_TYPE || (SKELETON_TYPE = {}));\n/**\n * Type Guards\n */\nfunction isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nfunction isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nfunction isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nfunction isDateElement(el) {\n    return el.type === TYPE.date;\n}\nfunction isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nfunction isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nfunction isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nfunction isPoundElement(el) {\n    return el.type === TYPE.pound;\n}\nfunction isTagElement(el) {\n    return el.type === TYPE.tag;\n}\nfunction isNumberSkeleton(el) {\n    return !!(el && typeof el === \'object\' && el.type === SKELETON_TYPE.number);\n}\nfunction isDateTimeSkeleton(el) {\n    return !!(el && typeof el === \'object\' && el.type === SKELETON_TYPE.dateTime);\n}\nfunction createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value,\n    };\n}\nfunction createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style,\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js\n// @generated from regex-gen.ts\nvar SPACE_SEPARATOR_REGEX = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^\']*\'[^\']*\')*[^\']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nfunction parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n        var len = match.length;\n        switch (match[0]) {\n            // Era\n            case \'G\':\n                result.era = len === 4 ? \'long\' : len === 5 ? \'narrow\' : \'short\';\n                break;\n            // Year\n            case \'y\':\n                result.year = len === 2 ? \'2-digit\' : \'numeric\';\n                break;\n            case \'Y\':\n            case \'u\':\n            case \'U\':\n            case \'r\':\n                throw new RangeError(\'`Y/u/U/r` (year) patterns are not supported, use `y` instead\');\n            // Quarter\n            case \'q\':\n            case \'Q\':\n                throw new RangeError(\'`q/Q` (quarter) patterns are not supported\');\n            // Month\n            case \'M\':\n            case \'L\':\n                result.month = [\'numeric\', \'2-digit\', \'short\', \'long\', \'narrow\'][len - 1];\n                break;\n            // Week\n            case \'w\':\n            case \'W\':\n                throw new RangeError(\'`w/W` (week) patterns are not supported\');\n            case \'d\':\n                result.day = [\'numeric\', \'2-digit\'][len - 1];\n                break;\n            case \'D\':\n            case \'F\':\n            case \'g\':\n                throw new RangeError(\'`D/F/g` (day) patterns are not supported, use `d` instead\');\n            // Weekday\n            case \'E\':\n                result.weekday = len === 4 ? \'short\' : len === 5 ? \'narrow\' : \'short\';\n                break;\n            case \'e\':\n                if (len < 4) {\n                    throw new RangeError(\'`e..eee` (weekday) patterns are not supported\');\n                }\n                result.weekday = [\'short\', \'long\', \'narrow\', \'short\'][len - 4];\n                break;\n            case \'c\':\n                if (len < 4) {\n                    throw new RangeError(\'`c..ccc` (weekday) patterns are not supported\');\n                }\n                result.weekday = [\'short\', \'long\', \'narrow\', \'short\'][len - 4];\n                break;\n            // Period\n            case \'a\': // AM, PM\n                result.hour12 = true;\n                break;\n            case \'b\': // am, pm, noon, midnight\n            case \'B\': // flexible day periods\n                throw new RangeError(\'`b/B` (period) patterns are not supported, use `a` instead\');\n            // Hour\n            case \'h\':\n                result.hourCycle = \'h12\';\n                result.hour = [\'numeric\', \'2-digit\'][len - 1];\n                break;\n            case \'H\':\n                result.hourCycle = \'h23\';\n                result.hour = [\'numeric\', \'2-digit\'][len - 1];\n                break;\n            case \'K\':\n                result.hourCycle = \'h11\';\n                result.hour = [\'numeric\', \'2-digit\'][len - 1];\n                break;\n            case \'k\':\n                result.hourCycle = \'h24\';\n                result.hour = [\'numeric\', \'2-digit\'][len - 1];\n                break;\n            case \'j\':\n            case \'J\':\n            case \'C\':\n                throw new RangeError(\'`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead\');\n            // Minute\n            case \'m\':\n                result.minute = [\'numeric\', \'2-digit\'][len - 1];\n                break;\n            // Second\n            case \'s\':\n                result.second = [\'numeric\', \'2-digit\'][len - 1];\n                break;\n            case \'S\':\n            case \'A\':\n                throw new RangeError(\'`S/A` (second) patterns are not supported, use `s` instead\');\n            // Zone\n            case \'z\': // 1..3, 4: specific non-location format\n                result.timeZoneName = len < 4 ? \'short\' : \'long\';\n                break;\n            case \'Z\': // 1..3, 4, 5: The ISO8601 varios formats\n            case \'O\': // 1, 4: miliseconds in day short, long\n            case \'v\': // 1, 4: generic non-location format\n            case \'V\': // 1, 2, 3, 4: time zone ID or city\n            case \'X\': // 1, 2, 3, 4: The ISO8601 varios formats\n            case \'x\': // 1, 2, 3, 4: The ISO8601 varios formats\n                throw new RangeError(\'`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead\');\n        }\n        return \'\';\n    });\n    return result;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js\n// @generated from regex-gen.ts\nvar regex_generated_WHITE_SPACE_REGEX = /[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/i;\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-skeleton-parser/lib/number.js\n\n\nfunction parseNumberSkeletonFromString(skeleton) {\n    if (skeleton.length === 0) {\n        throw new Error(\'Number skeleton cannot be empty\');\n    }\n    // Parse the skeleton\n    var stringTokens = skeleton\n        .split(regex_generated_WHITE_SPACE_REGEX)\n        .filter(function (x) { return x.length > 0; });\n    var tokens = [];\n    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n        var stringToken = stringTokens_1[_i];\n        var stemAndOptions = stringToken.split(\'/\');\n        if (stemAndOptions.length === 0) {\n            throw new Error(\'Invalid number skeleton\');\n        }\n        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);\n        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n            var option = options_1[_a];\n            if (option.length === 0) {\n                throw new Error(\'Invalid number skeleton\');\n            }\n        }\n        tokens.push({ stem: stem, options: options });\n    }\n    return tokens;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, \'\');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    if (str[str.length - 1] === \'r\') {\n        result.roundingPriority = \'morePrecision\';\n    }\n    else if (str[str.length - 1] === \'s\') {\n        result.roundingPriority = \'lessPrecision\';\n    }\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== \'string\') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === \'+\') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === \'#\') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === \'string\' ? g2.length : 0);\n        }\n        return \'\';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case \'sign-auto\':\n            return {\n                signDisplay: \'auto\',\n            };\n        case \'sign-accounting\':\n        case \'()\':\n            return {\n                currencySign: \'accounting\',\n            };\n        case \'sign-always\':\n        case \'+!\':\n            return {\n                signDisplay: \'always\',\n            };\n        case \'sign-accounting-always\':\n        case \'()!\':\n            return {\n                signDisplay: \'always\',\n                currencySign: \'accounting\',\n            };\n        case \'sign-except-zero\':\n        case \'+?\':\n            return {\n                signDisplay: \'exceptZero\',\n            };\n        case \'sign-accounting-except-zero\':\n        case \'()?\':\n            return {\n                signDisplay: \'exceptZero\',\n                currencySign: \'accounting\',\n            };\n        case \'sign-never\':\n        case \'+_\':\n            return {\n                signDisplay: \'never\',\n            };\n    }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n    // Engineering\n    var result;\n    if (stem[0] === \'E\' && stem[1] === \'E\') {\n        result = {\n            notation: \'engineering\',\n        };\n        stem = stem.slice(2);\n    }\n    else if (stem[0] === \'E\') {\n        result = {\n            notation: \'scientific\',\n        };\n        stem = stem.slice(1);\n    }\n    if (result) {\n        var signDisplay = stem.slice(0, 2);\n        if (signDisplay === \'+!\') {\n            result.signDisplay = \'always\';\n            stem = stem.slice(2);\n        }\n        else if (signDisplay === \'+?\') {\n            result.signDisplay = \'exceptZero\';\n            stem = stem.slice(2);\n        }\n        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n            throw new Error(\'Malformed concise eng/scientific notation\');\n        }\n        result.minimumIntegerDigits = stem.length;\n    }\n    return result;\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case \'percent\':\n            case \'%\':\n                result.style = \'percent\';\n                continue;\n            case \'%x100\':\n                result.style = \'percent\';\n                result.scale = 100;\n                continue;\n            case \'currency\':\n                result.style = \'currency\';\n                result.currency = token.options[0];\n                continue;\n            case \'group-off\':\n            case \',_\':\n                result.useGrouping = false;\n                continue;\n            case \'precision-integer\':\n            case \'.\':\n                result.maximumFractionDigits = 0;\n                continue;\n            case \'measure-unit\':\n            case \'unit\':\n                result.style = \'unit\';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case \'compact-short\':\n            case \'K\':\n                result.notation = \'compact\';\n                result.compactDisplay = \'short\';\n                continue;\n            case \'compact-long\':\n            case \'KK\':\n                result.notation = \'compact\';\n                result.compactDisplay = \'long\';\n                continue;\n            case \'scientific\':\n                result = __assign(__assign(__assign({}, result), { notation: \'scientific\' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case \'engineering\':\n                result = __assign(__assign(__assign({}, result), { notation: \'engineering\' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case \'notation-simple\':\n                result.notation = \'standard\';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case \'unit-width-narrow\':\n                result.currencyDisplay = \'narrowSymbol\';\n                result.unitDisplay = \'narrow\';\n                continue;\n            case \'unit-width-short\':\n                result.currencyDisplay = \'code\';\n                result.unitDisplay = \'short\';\n                continue;\n            case \'unit-width-full-name\':\n                result.currencyDisplay = \'name\';\n                result.unitDisplay = \'long\';\n                continue;\n            case \'unit-width-iso-code\':\n                result.currencyDisplay = \'symbol\';\n                continue;\n            case \'scale\':\n                result.scale = parseFloat(token.options[0]);\n                continue;\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n            case \'integer-width\':\n                if (token.options.length > 1) {\n                    throw new RangeError(\'integer-width stems only accept a single optional option\');\n                }\n                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n                    if (g1) {\n                        result.minimumIntegerDigits = g2.length;\n                    }\n                    else if (g3 && g4) {\n                        throw new Error(\'We currently do not support maximum integer digits\');\n                    }\n                    else if (g5) {\n                        throw new Error(\'We currently do not support exact integer digits\');\n                    }\n                    return \'\';\n                });\n                continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n            result.minimumIntegerDigits = token.stem.length;\n            continue;\n        }\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            // Precision\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n            // precision-integer case\n            if (token.options.length > 1) {\n                throw new RangeError(\'Fraction-precision stems only accept a single optional option\');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === \'*\') {\n                    result.minimumFractionDigits = g1.length;\n                }\n                // .### case\n                else if (g3 && g3[0] === \'#\') {\n                    result.maximumFractionDigits = g3.length;\n                }\n                // .00## case\n                else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                }\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return \'\';\n            });\n            var opt = token.options[0];\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n            if (opt === \'w\') {\n                result = __assign(__assign({}, result), { trailingZeroDisplay: \'stripIfInteger\' });\n            }\n            else if (opt) {\n                result = __assign(__assign({}, result), parseSignificantPrecision(opt));\n            }\n            continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = __assign(__assign({}, result), signOpts);\n        }\n        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n        if (conciseScientificAndEngineeringOpts) {\n            result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);\n        }\n    }\n    return result;\n}\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js\n// @generated from time-data-gen.ts\n// prettier-ignore  \nvar timeData = {\n    "AX": [\n        "H"\n    ],\n    "BQ": [\n        "H"\n    ],\n    "CP": [\n        "H"\n    ],\n    "CZ": [\n        "H"\n    ],\n    "DK": [\n        "H"\n    ],\n    "FI": [\n        "H"\n    ],\n    "ID": [\n        "H"\n    ],\n    "IS": [\n        "H"\n    ],\n    "ML": [\n        "H"\n    ],\n    "NE": [\n        "H"\n    ],\n    "RU": [\n        "H"\n    ],\n    "SE": [\n        "H"\n    ],\n    "SJ": [\n        "H"\n    ],\n    "SK": [\n        "H"\n    ],\n    "AS": [\n        "h",\n        "H"\n    ],\n    "BT": [\n        "h",\n        "H"\n    ],\n    "DJ": [\n        "h",\n        "H"\n    ],\n    "ER": [\n        "h",\n        "H"\n    ],\n    "GH": [\n        "h",\n        "H"\n    ],\n    "IN": [\n        "h",\n        "H"\n    ],\n    "LS": [\n        "h",\n        "H"\n    ],\n    "PG": [\n        "h",\n        "H"\n    ],\n    "PW": [\n        "h",\n        "H"\n    ],\n    "SO": [\n        "h",\n        "H"\n    ],\n    "TO": [\n        "h",\n        "H"\n    ],\n    "VU": [\n        "h",\n        "H"\n    ],\n    "WS": [\n        "h",\n        "H"\n    ],\n    "001": [\n        "H",\n        "h"\n    ],\n    "AL": [\n        "h",\n        "H",\n        "hB"\n    ],\n    "TD": [\n        "h",\n        "H",\n        "hB"\n    ],\n    "ca-ES": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "CF": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "CM": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "fr-CA": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "gl-ES": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "it-CH": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "it-IT": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "LU": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "NP": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "PF": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "SC": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "SM": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "SN": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "TF": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "VA": [\n        "H",\n        "h",\n        "hB"\n    ],\n    "CY": [\n        "h",\n        "H",\n        "hb",\n        "hB"\n    ],\n    "GR": [\n        "h",\n        "H",\n        "hb",\n        "hB"\n    ],\n    "CO": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "DO": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "KP": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "KR": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "NA": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "PA": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "PR": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "VE": [\n        "h",\n        "H",\n        "hB",\n        "hb"\n    ],\n    "AC": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "AI": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "BW": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "BZ": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "CC": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "CK": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "CX": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "DG": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "FK": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "GB": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "GG": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "GI": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "IE": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "IM": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "IO": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "JE": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "LT": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "MK": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "MN": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "MS": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "NF": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "NG": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "NR": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "NU": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "PN": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "SH": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "SX": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "TA": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "ZA": [\n        "H",\n        "h",\n        "hb",\n        "hB"\n    ],\n    "af-ZA": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "AR": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "CL": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "CR": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "CU": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "EA": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "es-BO": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "es-BR": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "es-EC": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "es-ES": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "es-GQ": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "es-PE": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "GT": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "HN": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "IC": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "KG": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "KM": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "LK": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "MA": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "MX": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "NI": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "PY": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "SV": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "UY": [\n        "H",\n        "h",\n        "hB",\n        "hb"\n    ],\n    "JP": [\n        "H",\n        "h",\n        "K"\n    ],\n    "AD": [\n        "H",\n        "hB"\n    ],\n    "AM": [\n        "H",\n        "hB"\n    ],\n    "AO": [\n        "H",\n        "hB"\n    ],\n    "AT": [\n        "H",\n        "hB"\n    ],\n    "AW": [\n        "H",\n        "hB"\n    ],\n    "BE": [\n        "H",\n        "hB"\n    ],\n    "BF": [\n        "H",\n        "hB"\n    ],\n    "BJ": [\n        "H",\n        "hB"\n    ],\n    "BL": [\n        "H",\n        "hB"\n    ],\n    "BR": [\n        "H",\n        "hB"\n    ],\n    "CG": [\n        "H",\n        "hB"\n    ],\n    "CI": [\n        "H",\n        "hB"\n    ],\n    "CV": [\n        "H",\n        "hB"\n    ],\n    "DE": [\n        "H",\n        "hB"\n    ],\n    "EE": [\n        "H",\n        "hB"\n    ],\n    "FR": [\n        "H",\n        "hB"\n    ],\n    "GA": [\n        "H",\n        "hB"\n    ],\n    "GF": [\n        "H",\n        "hB"\n    ],\n    "GN": [\n        "H",\n        "hB"\n    ],\n    "GP": [\n        "H",\n        "hB"\n    ],\n    "GW": [\n        "H",\n        "hB"\n    ],\n    "HR": [\n        "H",\n        "hB"\n    ],\n    "IL": [\n        "H",\n        "hB"\n    ],\n    "IT": [\n        "H",\n        "hB"\n    ],\n    "KZ": [\n        "H",\n        "hB"\n    ],\n    "MC": [\n        "H",\n        "hB"\n    ],\n    "MD": [\n        "H",\n        "hB"\n    ],\n    "MF": [\n        "H",\n        "hB"\n    ],\n    "MQ": [\n        "H",\n        "hB"\n    ],\n    "MZ": [\n        "H",\n        "hB"\n    ],\n    "NC": [\n        "H",\n        "hB"\n    ],\n    "NL": [\n        "H",\n        "hB"\n    ],\n    "PM": [\n        "H",\n        "hB"\n    ],\n    "PT": [\n        "H",\n        "hB"\n    ],\n    "RE": [\n        "H",\n        "hB"\n    ],\n    "RO": [\n        "H",\n        "hB"\n    ],\n    "SI": [\n        "H",\n        "hB"\n    ],\n    "SR": [\n        "H",\n        "hB"\n    ],\n    "ST": [\n        "H",\n        "hB"\n    ],\n    "TG": [\n        "H",\n        "hB"\n    ],\n    "TR": [\n        "H",\n        "hB"\n    ],\n    "WF": [\n        "H",\n        "hB"\n    ],\n    "YT": [\n        "H",\n        "hB"\n    ],\n    "BD": [\n        "h",\n        "hB",\n        "H"\n    ],\n    "PK": [\n        "h",\n        "hB",\n        "H"\n    ],\n    "AZ": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "BA": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "BG": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "CH": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "GE": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "LI": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "ME": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "RS": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "UA": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "UZ": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "XK": [\n        "H",\n        "hB",\n        "h"\n    ],\n    "AG": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "AU": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "BB": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "BM": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "BS": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "CA": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "DM": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "en-001": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "FJ": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "FM": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "GD": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "GM": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "GU": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "GY": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "JM": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "KI": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "KN": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "KY": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "LC": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "LR": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "MH": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "MP": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "MW": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "NZ": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "SB": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "SG": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "SL": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "SS": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "SZ": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "TC": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "TT": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "UM": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "US": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "VC": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "VG": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "VI": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "ZM": [\n        "h",\n        "hb",\n        "H",\n        "hB"\n    ],\n    "BO": [\n        "H",\n        "hB",\n        "h",\n        "hb"\n    ],\n    "EC": [\n        "H",\n        "hB",\n        "h",\n        "hb"\n    ],\n    "ES": [\n        "H",\n        "hB",\n        "h",\n        "hb"\n    ],\n    "GQ": [\n        "H",\n        "hB",\n        "h",\n        "hb"\n    ],\n    "PE": [\n        "H",\n        "hB",\n        "h",\n        "hb"\n    ],\n    "AE": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "ar-001": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "BH": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "DZ": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "EG": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "EH": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "HK": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "IQ": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "JO": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "KW": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "LB": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "LY": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "MO": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "MR": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "OM": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "PH": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "PS": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "QA": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "SA": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "SD": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "SY": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "TN": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "YE": [\n        "h",\n        "hB",\n        "hb",\n        "H"\n    ],\n    "AF": [\n        "H",\n        "hb",\n        "hB",\n        "h"\n    ],\n    "LA": [\n        "H",\n        "hb",\n        "hB",\n        "h"\n    ],\n    "CN": [\n        "H",\n        "hB",\n        "hb",\n        "h"\n    ],\n    "LV": [\n        "H",\n        "hB",\n        "hb",\n        "h"\n    ],\n    "TL": [\n        "H",\n        "hB",\n        "hb",\n        "h"\n    ],\n    "zu-ZA": [\n        "H",\n        "hB",\n        "hb",\n        "h"\n    ],\n    "CD": [\n        "hB",\n        "H"\n    ],\n    "IR": [\n        "hB",\n        "H"\n    ],\n    "hi-IN": [\n        "hB",\n        "h",\n        "H"\n    ],\n    "kn-IN": [\n        "hB",\n        "h",\n        "H"\n    ],\n    "ml-IN": [\n        "hB",\n        "h",\n        "H"\n    ],\n    "te-IN": [\n        "hB",\n        "h",\n        "H"\n    ],\n    "KH": [\n        "hB",\n        "h",\n        "H",\n        "hb"\n    ],\n    "ta-IN": [\n        "hB",\n        "h",\n        "hb",\n        "H"\n    ],\n    "BN": [\n        "hb",\n        "hB",\n        "h",\n        "H"\n    ],\n    "MY": [\n        "hb",\n        "hB",\n        "h",\n        "H"\n    ],\n    "ET": [\n        "hB",\n        "hb",\n        "h",\n        "H"\n    ],\n    "gu-IN": [\n        "hB",\n        "hb",\n        "h",\n        "H"\n    ],\n    "mr-IN": [\n        "hB",\n        "hb",\n        "h",\n        "H"\n    ],\n    "pa-IN": [\n        "hB",\n        "hb",\n        "h",\n        "H"\n    ],\n    "TW": [\n        "hB",\n        "hb",\n        "h",\n        "H"\n    ],\n    "KE": [\n        "hB",\n        "hb",\n        "H",\n        "h"\n    ],\n    "MM": [\n        "hB",\n        "hb",\n        "H",\n        "h"\n    ],\n    "TZ": [\n        "hB",\n        "hb",\n        "H",\n        "h"\n    ],\n    "UG": [\n        "hB",\n        "hb",\n        "H",\n        "h"\n    ]\n};\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js\n\n/**\n * Returns the best matching date time pattern if a date time skeleton\n * pattern is provided with a locale. Follows the Unicode specification:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns\n * @param skeleton date time skeleton pattern that possibly includes j, J or C\n * @param locale\n */\nfunction getBestPattern(skeleton, locale) {\n    var skeletonCopy = \'\';\n    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {\n        var patternChar = skeleton.charAt(patternPos);\n        if (patternChar === \'j\') {\n            var extraLength = 0;\n            while (patternPos + 1 < skeleton.length &&\n                skeleton.charAt(patternPos + 1) === patternChar) {\n                extraLength++;\n                patternPos++;\n            }\n            var hourLen = 1 + (extraLength & 1);\n            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);\n            var dayPeriodChar = \'a\';\n            var hourChar = getDefaultHourSymbolFromLocale(locale);\n            if (hourChar == \'H\' || hourChar == \'k\') {\n                dayPeriodLen = 0;\n            }\n            while (dayPeriodLen-- > 0) {\n                skeletonCopy += dayPeriodChar;\n            }\n            while (hourLen-- > 0) {\n                skeletonCopy = hourChar + skeletonCopy;\n            }\n        }\n        else if (patternChar === \'J\') {\n            skeletonCopy += \'H\';\n        }\n        else {\n            skeletonCopy += patternChar;\n        }\n    }\n    return skeletonCopy;\n}\n/**\n * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n * of the given `locale` to the corresponding time pattern.\n * @param locale\n */\nfunction getDefaultHourSymbolFromLocale(locale) {\n    var hourCycle = locale.hourCycle;\n    if (hourCycle === undefined &&\n        // @ts-ignore hourCycle(s) is not identified yet\n        locale.hourCycles &&\n        // @ts-ignore\n        locale.hourCycles.length) {\n        // @ts-ignore\n        hourCycle = locale.hourCycles[0];\n    }\n    if (hourCycle) {\n        switch (hourCycle) {\n            case \'h24\':\n                return \'k\';\n            case \'h23\':\n                return \'H\';\n            case \'h12\':\n                return \'h\';\n            case \'h11\':\n                return \'K\';\n            default:\n                throw new Error(\'Invalid hourCycle\');\n        }\n    }\n    // TODO: Once hourCycle is fully supported remove the following with data generation\n    var languageTag = locale.language;\n    var regionTag;\n    if (languageTag !== \'root\') {\n        regionTag = locale.maximize().region;\n    }\n    var hourCycles = timeData[regionTag || \'\'] ||\n        timeData[languageTag || \'\'] ||\n        timeData["".concat(languageTag, "-001")] ||\n        timeData["001"];\n    return hourCycles[0];\n}\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-messageformat-parser/lib/parser.js\nvar _a;\n\n\n\n\n\n\nvar SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));\nvar SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));\nfunction createLocation(start, end) {\n    return { start: start, end: end };\n}\n// #region Ponyfills\n// Consolidate these variables up top for easier toggling during debugging\nvar hasNativeStartsWith = !!String.prototype.startsWith;\nvar hasNativeFromCodePoint = !!String.fromCodePoint;\nvar hasNativeFromEntries = !!Object.fromEntries;\nvar hasNativeCodePointAt = !!String.prototype.codePointAt;\nvar hasTrimStart = !!String.prototype.trimStart;\nvar hasTrimEnd = !!String.prototype.trimEnd;\nvar hasNativeIsSafeInteger = !!Number.isSafeInteger;\nvar isSafeInteger = hasNativeIsSafeInteger\n    ? Number.isSafeInteger\n    : function (n) {\n        return (typeof n === \'number\' &&\n            isFinite(n) &&\n            Math.floor(n) === n &&\n            Math.abs(n) <= 0x1fffffffffffff);\n    };\n// IE11 does not support y and u.\nvar REGEX_SUPPORTS_U_AND_Y = true;\ntry {\n    var re = RE(\'([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)\', \'yu\');\n    /**\n     * legacy Edge or Xbox One browser\n     * Unicode flag support: supported\n     * Pattern_Syntax support: not supported\n     * See https://github.com/formatjs/formatjs/issues/2822\n     */\n    REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec(\'a\')) === null || _a === void 0 ? void 0 : _a[0]) === \'a\';\n}\ncatch (_) {\n    REGEX_SUPPORTS_U_AND_Y = false;\n}\nvar startsWith = hasNativeStartsWith\n    ? // Native\n        function startsWith(s, search, position) {\n            return s.startsWith(search, position);\n        }\n    : // For IE11\n        function startsWith(s, search, position) {\n            return s.slice(position, position + search.length) === search;\n        };\nvar fromCodePoint = hasNativeFromCodePoint\n    ? String.fromCodePoint\n    : // IE11\n        function fromCodePoint() {\n            var codePoints = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                codePoints[_i] = arguments[_i];\n            }\n            var elements = \'\';\n            var length = codePoints.length;\n            var i = 0;\n            var code;\n            while (length > i) {\n                code = codePoints[i++];\n                if (code > 0x10ffff)\n                    throw RangeError(code + \' is not a valid code point\');\n                elements +=\n                    code < 0x10000\n                        ? String.fromCharCode(code)\n                        : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);\n            }\n            return elements;\n        };\nvar fromEntries = \n// native\nhasNativeFromEntries\n    ? Object.fromEntries\n    : // Ponyfill\n        function fromEntries(entries) {\n            var obj = {};\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                var _a = entries_1[_i], k = _a[0], v = _a[1];\n                obj[k] = v;\n            }\n            return obj;\n        };\nvar codePointAt = hasNativeCodePointAt\n    ? // Native\n        function codePointAt(s, index) {\n            return s.codePointAt(index);\n        }\n    : // IE 11\n        function codePointAt(s, index) {\n            var size = s.length;\n            if (index < 0 || index >= size) {\n                return undefined;\n            }\n            var first = s.charCodeAt(index);\n            var second;\n            return first < 0xd800 ||\n                first > 0xdbff ||\n                index + 1 === size ||\n                (second = s.charCodeAt(index + 1)) < 0xdc00 ||\n                second > 0xdfff\n                ? first\n                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;\n        };\nvar trimStart = hasTrimStart\n    ? // Native\n        function trimStart(s) {\n            return s.trimStart();\n        }\n    : // Ponyfill\n        function trimStart(s) {\n            return s.replace(SPACE_SEPARATOR_START_REGEX, \'\');\n        };\nvar trimEnd = hasTrimEnd\n    ? // Native\n        function trimEnd(s) {\n            return s.trimEnd();\n        }\n    : // Ponyfill\n        function trimEnd(s) {\n            return s.replace(SPACE_SEPARATOR_END_REGEX, \'\');\n        };\n// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.\nfunction RE(s, flag) {\n    return new RegExp(s, flag);\n}\n// #endregion\nvar matchIdentifierAtIndex;\nif (REGEX_SUPPORTS_U_AND_Y) {\n    // Native\n    var IDENTIFIER_PREFIX_RE_1 = RE(\'([^\\\\p{White_Space}\\\\p{Pattern_Syntax}]*)\', \'yu\');\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var _a;\n        IDENTIFIER_PREFIX_RE_1.lastIndex = index;\n        var match = IDENTIFIER_PREFIX_RE_1.exec(s);\n        return (_a = match[1]) !== null && _a !== void 0 ? _a : \'\';\n    };\n}\nelse {\n    // IE11\n    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {\n        var match = [];\n        while (true) {\n            var c = codePointAt(s, index);\n            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {\n                break;\n            }\n            match.push(c);\n            index += c >= 0x10000 ? 2 : 1;\n        }\n        return fromCodePoint.apply(void 0, match);\n    };\n}\nvar parser_Parser = /** @class */ (function () {\n    function Parser(message, options) {\n        if (options === void 0) { options = {}; }\n        this.message = message;\n        this.position = { offset: 0, line: 1, column: 1 };\n        this.ignoreTag = !!options.ignoreTag;\n        this.locale = options.locale;\n        this.requiresOtherClause = !!options.requiresOtherClause;\n        this.shouldParseSkeletons = !!options.shouldParseSkeletons;\n    }\n    Parser.prototype.parse = function () {\n        if (this.offset() !== 0) {\n            throw Error(\'parser can only be used once\');\n        }\n        return this.parseMessage(0, \'\', false);\n    };\n    Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {\n        var elements = [];\n        while (!this.isEOF()) {\n            var char = this.char();\n            if (char === 123 /* `{` */) {\n                var result = this.parseArgument(nestingLevel, expectingCloseTag);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n            else if (char === 125 /* `}` */ && nestingLevel > 0) {\n                break;\n            }\n            else if (char === 35 /* `#` */ &&\n                (parentArgType === \'plural\' || parentArgType === \'selectordinal\')) {\n                var position = this.clonePosition();\n                this.bump();\n                elements.push({\n                    type: TYPE.pound,\n                    location: createLocation(position, this.clonePosition()),\n                });\n            }\n            else if (char === 60 /* `<` */ &&\n                !this.ignoreTag &&\n                this.peek() === 47 // char code for \'/\'\n            ) {\n                if (expectingCloseTag) {\n                    break;\n                }\n                else {\n                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));\n                }\n            }\n            else if (char === 60 /* `<` */ &&\n                !this.ignoreTag &&\n                _isAlpha(this.peek() || 0)) {\n                var result = this.parseTag(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n            else {\n                var result = this.parseLiteral(nestingLevel, parentArgType);\n                if (result.err) {\n                    return result;\n                }\n                elements.push(result.val);\n            }\n        }\n        return { val: elements, err: null };\n    };\n    /**\n     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the\n     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters\n     * are accepted:\n     *\n     * ```\n     * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"\n     * tagName ::= [a-z] (PENChar)*\n     * PENChar ::=\n     *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |\n     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |\n     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n     * ```\n     *\n     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * NOTE: We\'re a bit more lax here since HTML technically does not allow uppercase HTML element but we do\n     * since other tag-based engines like React allow it\n     */\n    Parser.prototype.parseTag = function (nestingLevel, parentArgType) {\n        var startPosition = this.clonePosition();\n        this.bump(); // `<`\n        var tagName = this.parseTagName();\n        this.bumpSpace();\n        if (this.bumpIf(\'/>\')) {\n            // Self closing tag\n            return {\n                val: {\n                    type: TYPE.literal,\n                    value: "<".concat(tagName, "/>"),\n                    location: createLocation(startPosition, this.clonePosition()),\n                },\n                err: null,\n            };\n        }\n        else if (this.bumpIf(\'>\')) {\n            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);\n            if (childrenResult.err) {\n                return childrenResult;\n            }\n            var children = childrenResult.val;\n            // Expecting a close tag\n            var endTagStartPosition = this.clonePosition();\n            if (this.bumpIf(\'</\')) {\n                if (this.isEOF() || !_isAlpha(this.char())) {\n                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                var closingTagNameStartPosition = this.clonePosition();\n                var closingTagName = this.parseTagName();\n                if (tagName !== closingTagName) {\n                    return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));\n                }\n                this.bumpSpace();\n                if (!this.bumpIf(\'>\')) {\n                    return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));\n                }\n                return {\n                    val: {\n                        type: TYPE.tag,\n                        value: tagName,\n                        children: children,\n                        location: createLocation(startPosition, this.clonePosition()),\n                    },\n                    err: null,\n                };\n            }\n            else {\n                return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));\n            }\n        }\n        else {\n            return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));\n        }\n    };\n    /**\n     * This method assumes that the caller has peeked ahead for the first tag character.\n     */\n    Parser.prototype.parseTagName = function () {\n        var startOffset = this.offset();\n        this.bump(); // the first tag name character\n        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {\n            this.bump();\n        }\n        return this.message.slice(startOffset, this.offset());\n    };\n    Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {\n        var start = this.clonePosition();\n        var value = \'\';\n        while (true) {\n            var parseQuoteResult = this.tryParseQuote(parentArgType);\n            if (parseQuoteResult) {\n                value += parseQuoteResult;\n                continue;\n            }\n            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);\n            if (parseUnquotedResult) {\n                value += parseUnquotedResult;\n                continue;\n            }\n            var parseLeftAngleResult = this.tryParseLeftAngleBracket();\n            if (parseLeftAngleResult) {\n                value += parseLeftAngleResult;\n                continue;\n            }\n            break;\n        }\n        var location = createLocation(start, this.clonePosition());\n        return {\n            val: { type: TYPE.literal, value: value, location: location },\n            err: null,\n        };\n    };\n    Parser.prototype.tryParseLeftAngleBracket = function () {\n        if (!this.isEOF() &&\n            this.char() === 60 /* `<` */ &&\n            (this.ignoreTag ||\n                // If at the opening tag or closing tag position, bail.\n                !_isAlphaOrSlash(this.peek() || 0))) {\n            this.bump(); // `<`\n            return \'<\';\n        }\n        return null;\n    };\n    /**\n     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes\n     * a character that requires quoting (that is, "only where needed"), and works the same in\n     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.\n     */\n    Parser.prototype.tryParseQuote = function (parentArgType) {\n        if (this.isEOF() || this.char() !== 39 /* `\'` */) {\n            return null;\n        }\n        // Parse escaped char following the apostrophe, or early return if there is no escaped char.\n        // Check if is valid escaped character\n        switch (this.peek()) {\n            case 39 /* `\'` */:\n                // double quote, should return as a single quote.\n                this.bump();\n                this.bump();\n                return "\'";\n            // \'{\', \'<\', \'>\', \'}\'\n            case 123:\n            case 60:\n            case 62:\n            case 125:\n                break;\n            case 35: // \'#\'\n                if (parentArgType === \'plural\' || parentArgType === \'selectordinal\') {\n                    break;\n                }\n                return null;\n            default:\n                return null;\n        }\n        this.bump(); // apostrophe\n        var codePoints = [this.char()]; // escaped char\n        this.bump();\n        // read chars until the optional closing apostrophe is found\n        while (!this.isEOF()) {\n            var ch = this.char();\n            if (ch === 39 /* `\'` */) {\n                if (this.peek() === 39 /* `\'` */) {\n                    codePoints.push(39);\n                    // Bump one more time because we need to skip 2 characters.\n                    this.bump();\n                }\n                else {\n                    // Optional closing apostrophe.\n                    this.bump();\n                    break;\n                }\n            }\n            else {\n                codePoints.push(ch);\n            }\n            this.bump();\n        }\n        return fromCodePoint.apply(void 0, codePoints);\n    };\n    Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {\n        if (this.isEOF()) {\n            return null;\n        }\n        var ch = this.char();\n        if (ch === 60 /* `<` */ ||\n            ch === 123 /* `{` */ ||\n            (ch === 35 /* `#` */ &&\n                (parentArgType === \'plural\' || parentArgType === \'selectordinal\')) ||\n            (ch === 125 /* `}` */ && nestingLevel > 0)) {\n            return null;\n        }\n        else {\n            this.bump();\n            return fromCodePoint(ch);\n        }\n    };\n    Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {\n        var openingBracePosition = this.clonePosition();\n        this.bump(); // `{`\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        if (this.char() === 125 /* `}` */) {\n            this.bump();\n            return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        // argument name\n        var value = this.parseIdentifierIfPossible().value;\n        if (!value) {\n            return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bumpSpace();\n        if (this.isEOF()) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        switch (this.char()) {\n            // Simple argument: `{name}`\n            case 125 /* `}` */: {\n                this.bump(); // `}`\n                return {\n                    val: {\n                        type: TYPE.argument,\n                        // value does not include the opening and closing braces.\n                        value: value,\n                        location: createLocation(openingBracePosition, this.clonePosition()),\n                    },\n                    err: null,\n                };\n            }\n            // Argument with options: `{name, format, ...}`\n            case 44 /* `,` */: {\n                this.bump(); // `,`\n                this.bumpSpace();\n                if (this.isEOF()) {\n                    return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n                }\n                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);\n            }\n            default:\n                return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));\n        }\n    };\n    /**\n     * Advance the parser until the end of the identifier, if it is currently on\n     * an identifier character. Return an empty string otherwise.\n     */\n    Parser.prototype.parseIdentifierIfPossible = function () {\n        var startingPosition = this.clonePosition();\n        var startOffset = this.offset();\n        var value = matchIdentifierAtIndex(this.message, startOffset);\n        var endOffset = startOffset + value.length;\n        this.bumpTo(endOffset);\n        var endPosition = this.clonePosition();\n        var location = createLocation(startingPosition, endPosition);\n        return { value: value, location: location };\n    };\n    Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {\n        var _a;\n        // Parse this range:\n        // {name, type, style}\n        //        ^---^\n        var typeStartPosition = this.clonePosition();\n        var argType = this.parseIdentifierIfPossible().value;\n        var typeEndPosition = this.clonePosition();\n        switch (argType) {\n            case \'\':\n                // Expecting a style string number, date, time, plural, selectordinal, or select.\n                return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n            case \'number\':\n            case \'date\':\n            case \'time\': {\n                // Parse this range:\n                // {name, number, style}\n                //              ^-------^\n                this.bumpSpace();\n                var styleAndLocation = null;\n                if (this.bumpIf(\',\')) {\n                    this.bumpSpace();\n                    var styleStartPosition = this.clonePosition();\n                    var result = this.parseSimpleArgStyleIfPossible();\n                    if (result.err) {\n                        return result;\n                    }\n                    var style = trimEnd(result.val);\n                    if (style.length === 0) {\n                        return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));\n                    }\n                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());\n                    styleAndLocation = { style: style, styleLocation: styleLocation };\n                }\n                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                if (argCloseResult.err) {\n                    return argCloseResult;\n                }\n                var location_1 = createLocation(openingBracePosition, this.clonePosition());\n                // Extract style or skeleton\n                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, \'::\', 0)) {\n                    // Skeleton starts with `::`.\n                    var skeleton = trimStart(styleAndLocation.style.slice(2));\n                    if (argType === \'number\') {\n                        var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);\n                        if (result.err) {\n                            return result;\n                        }\n                        return {\n                            val: { type: TYPE.number, value: value, location: location_1, style: result.val },\n                            err: null,\n                        };\n                    }\n                    else {\n                        if (skeleton.length === 0) {\n                            return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);\n                        }\n                        var dateTimePattern = skeleton;\n                        // Get "best match" pattern only if locale is passed, if not, let it\n                        // pass as-is where `parseDateTimeSkeleton()` will throw an error\n                        // for unsupported patterns.\n                        if (this.locale) {\n                            dateTimePattern = getBestPattern(skeleton, this.locale);\n                        }\n                        var style = {\n                            type: SKELETON_TYPE.dateTime,\n                            pattern: dateTimePattern,\n                            location: styleAndLocation.styleLocation,\n                            parsedOptions: this.shouldParseSkeletons\n                                ? parseDateTimeSkeleton(dateTimePattern)\n                                : {},\n                        };\n                        var type = argType === \'date\' ? TYPE.date : TYPE.time;\n                        return {\n                            val: { type: type, value: value, location: location_1, style: style },\n                            err: null,\n                        };\n                    }\n                }\n                // Regular style or no style.\n                return {\n                    val: {\n                        type: argType === \'number\'\n                            ? TYPE.number\n                            : argType === \'date\'\n                                ? TYPE.date\n                                : TYPE.time,\n                        value: value,\n                        location: location_1,\n                        style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,\n                    },\n                    err: null,\n                };\n            }\n            case \'plural\':\n            case \'selectordinal\':\n            case \'select\': {\n                // Parse this range:\n                // {name, plural, options}\n                //              ^---------^\n                var typeEndPosition_1 = this.clonePosition();\n                this.bumpSpace();\n                if (!this.bumpIf(\',\')) {\n                    return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));\n                }\n                this.bumpSpace();\n                // Parse offset:\n                // {name, plural, offset:1, options}\n                //                ^-----^\n                //\n                // or the first option:\n                //\n                // {name, plural, one {...} other {...}}\n                //                ^--^\n                var identifierAndLocation = this.parseIdentifierIfPossible();\n                var pluralOffset = 0;\n                if (argType !== \'select\' && identifierAndLocation.value === \'offset\') {\n                    if (!this.bumpIf(\':\')) {\n                        return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));\n                    }\n                    this.bumpSpace();\n                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);\n                    if (result.err) {\n                        return result;\n                    }\n                    // Parse another identifier for option parsing\n                    this.bumpSpace();\n                    identifierAndLocation = this.parseIdentifierIfPossible();\n                    pluralOffset = result.val;\n                }\n                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);\n                if (optionsResult.err) {\n                    return optionsResult;\n                }\n                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n                if (argCloseResult.err) {\n                    return argCloseResult;\n                }\n                var location_2 = createLocation(openingBracePosition, this.clonePosition());\n                if (argType === \'select\') {\n                    return {\n                        val: {\n                            type: TYPE.select,\n                            value: value,\n                            options: fromEntries(optionsResult.val),\n                            location: location_2,\n                        },\n                        err: null,\n                    };\n                }\n                else {\n                    return {\n                        val: {\n                            type: TYPE.plural,\n                            value: value,\n                            options: fromEntries(optionsResult.val),\n                            offset: pluralOffset,\n                            pluralType: argType === \'plural\' ? \'cardinal\' : \'ordinal\',\n                            location: location_2,\n                        },\n                        err: null,\n                    };\n                }\n            }\n            default:\n                return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));\n        }\n    };\n    Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {\n        // Parse: {value, number, ::currency/GBP }\n        //\n        if (this.isEOF() || this.char() !== 125 /* `}` */) {\n            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));\n        }\n        this.bump(); // `}`\n        return { val: true, err: null };\n    };\n    /**\n     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659\n     */\n    Parser.prototype.parseSimpleArgStyleIfPossible = function () {\n        var nestedBraces = 0;\n        var startPosition = this.clonePosition();\n        while (!this.isEOF()) {\n            var ch = this.char();\n            switch (ch) {\n                case 39 /* `\'` */: {\n                    // Treat apostrophe as quoting but include it in the style part.\n                    // Find the end of the quoted literal text.\n                    this.bump();\n                    var apostrophePosition = this.clonePosition();\n                    if (!this.bumpUntil("\'")) {\n                        return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));\n                    }\n                    this.bump();\n                    break;\n                }\n                case 123 /* `{` */: {\n                    nestedBraces += 1;\n                    this.bump();\n                    break;\n                }\n                case 125 /* `}` */: {\n                    if (nestedBraces > 0) {\n                        nestedBraces -= 1;\n                    }\n                    else {\n                        return {\n                            val: this.message.slice(startPosition.offset, this.offset()),\n                            err: null,\n                        };\n                    }\n                    break;\n                }\n                default:\n                    this.bump();\n                    break;\n            }\n        }\n        return {\n            val: this.message.slice(startPosition.offset, this.offset()),\n            err: null,\n        };\n    };\n    Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {\n        var tokens = [];\n        try {\n            tokens = parseNumberSkeletonFromString(skeleton);\n        }\n        catch (e) {\n            return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);\n        }\n        return {\n            val: {\n                type: SKELETON_TYPE.number,\n                tokens: tokens,\n                location: location,\n                parsedOptions: this.shouldParseSkeletons\n                    ? parseNumberSkeleton(tokens)\n                    : {},\n            },\n            err: null,\n        };\n    };\n    /**\n     * @param nesting_level The current nesting level of messages.\n     *     This can be positive when parsing message fragment in select or plural argument options.\n     * @param parent_arg_type The parent argument\'s type.\n     * @param parsed_first_identifier If provided, this is the first identifier-like selector of\n     *     the argument. It is a by-product of a previous parsing attempt.\n     * @param expecting_close_tag If true, this message is directly or indirectly nested inside\n     *     between a pair of opening and closing tags. The nested message will not parse beyond\n     *     the closing tag boundary.\n     */\n    Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {\n        var _a;\n        var hasOtherClause = false;\n        var options = [];\n        var parsedSelectors = new Set();\n        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;\n        // Parse:\n        // one {one apple}\n        // ^--^\n        while (true) {\n            if (selector.length === 0) {\n                var startPosition = this.clonePosition();\n                if (parentArgType !== \'select\' && this.bumpIf(\'=\')) {\n                    // Try parse `={number}` selector\n                    var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);\n                    if (result.err) {\n                        return result;\n                    }\n                    selectorLocation = createLocation(startPosition, this.clonePosition());\n                    selector = this.message.slice(startPosition.offset, this.offset());\n                }\n                else {\n                    break;\n                }\n            }\n            // Duplicate selector clauses\n            if (parsedSelectors.has(selector)) {\n                return this.error(parentArgType === \'select\'\n                    ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR\n                    : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);\n            }\n            if (selector === \'other\') {\n                hasOtherClause = true;\n            }\n            // Parse:\n            // one {one apple}\n            //     ^----------^\n            this.bumpSpace();\n            var openingBracePosition = this.clonePosition();\n            if (!this.bumpIf(\'{\')) {\n                return this.error(parentArgType === \'select\'\n                    ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT\n                    : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));\n            }\n            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);\n            if (fragmentResult.err) {\n                return fragmentResult;\n            }\n            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);\n            if (argCloseResult.err) {\n                return argCloseResult;\n            }\n            options.push([\n                selector,\n                {\n                    value: fragmentResult.val,\n                    location: createLocation(openingBracePosition, this.clonePosition()),\n                },\n            ]);\n            // Keep track of the existing selectors\n            parsedSelectors.add(selector);\n            // Prep next selector clause.\n            this.bumpSpace();\n            (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);\n        }\n        if (options.length === 0) {\n            return this.error(parentArgType === \'select\'\n                ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR\n                : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        if (this.requiresOtherClause && !hasOtherClause) {\n            return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));\n        }\n        return { val: options, err: null };\n    };\n    Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {\n        var sign = 1;\n        var startingPosition = this.clonePosition();\n        if (this.bumpIf(\'+\')) {\n        }\n        else if (this.bumpIf(\'-\')) {\n            sign = -1;\n        }\n        var hasDigits = false;\n        var decimal = 0;\n        while (!this.isEOF()) {\n            var ch = this.char();\n            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {\n                hasDigits = true;\n                decimal = decimal * 10 + (ch - 48);\n                this.bump();\n            }\n            else {\n                break;\n            }\n        }\n        var location = createLocation(startingPosition, this.clonePosition());\n        if (!hasDigits) {\n            return this.error(expectNumberError, location);\n        }\n        decimal *= sign;\n        if (!isSafeInteger(decimal)) {\n            return this.error(invalidNumberError, location);\n        }\n        return { val: decimal, err: null };\n    };\n    Parser.prototype.offset = function () {\n        return this.position.offset;\n    };\n    Parser.prototype.isEOF = function () {\n        return this.offset() === this.message.length;\n    };\n    Parser.prototype.clonePosition = function () {\n        // This is much faster than `Object.assign` or spread.\n        return {\n            offset: this.position.offset,\n            line: this.position.line,\n            column: this.position.column,\n        };\n    };\n    /**\n     * Return the code point at the current position of the parser.\n     * Throws if the index is out of bound.\n     */\n    Parser.prototype.char = function () {\n        var offset = this.position.offset;\n        if (offset >= this.message.length) {\n            throw Error(\'out of bound\');\n        }\n        var code = codePointAt(this.message, offset);\n        if (code === undefined) {\n            throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));\n        }\n        return code;\n    };\n    Parser.prototype.error = function (kind, location) {\n        return {\n            val: null,\n            err: {\n                kind: kind,\n                message: this.message,\n                location: location,\n            },\n        };\n    };\n    /** Bump the parser to the next UTF-16 code unit. */\n    Parser.prototype.bump = function () {\n        if (this.isEOF()) {\n            return;\n        }\n        var code = this.char();\n        if (code === 10 /* \'\\n\' */) {\n            this.position.line += 1;\n            this.position.column = 1;\n            this.position.offset += 1;\n        }\n        else {\n            this.position.column += 1;\n            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.\n            this.position.offset += code < 0x10000 ? 1 : 2;\n        }\n    };\n    /**\n     * If the substring starting at the current position of the parser has\n     * the given prefix, then bump the parser to the character immediately\n     * following the prefix and return true. Otherwise, don\'t bump the parser\n     * and return false.\n     */\n    Parser.prototype.bumpIf = function (prefix) {\n        if (startsWith(this.message, prefix, this.offset())) {\n            for (var i = 0; i < prefix.length; i++) {\n                this.bump();\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Bump the parser until the pattern character is found and return `true`.\n     * Otherwise bump to the end of the file and return `false`.\n     */\n    Parser.prototype.bumpUntil = function (pattern) {\n        var currentOffset = this.offset();\n        var index = this.message.indexOf(pattern, currentOffset);\n        if (index >= 0) {\n            this.bumpTo(index);\n            return true;\n        }\n        else {\n            this.bumpTo(this.message.length);\n            return false;\n        }\n    };\n    /**\n     * Bump the parser to the target offset.\n     * If target offset is beyond the end of the input, bump the parser to the end of the input.\n     */\n    Parser.prototype.bumpTo = function (targetOffset) {\n        if (this.offset() > targetOffset) {\n            throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));\n        }\n        targetOffset = Math.min(targetOffset, this.message.length);\n        while (true) {\n            var offset = this.offset();\n            if (offset === targetOffset) {\n                break;\n            }\n            if (offset > targetOffset) {\n                throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));\n            }\n            this.bump();\n            if (this.isEOF()) {\n                break;\n            }\n        }\n    };\n    /** advance the parser through all whitespace to the next non-whitespace code unit. */\n    Parser.prototype.bumpSpace = function () {\n        while (!this.isEOF() && _isWhiteSpace(this.char())) {\n            this.bump();\n        }\n    };\n    /**\n     * Peek at the *next* Unicode codepoint in the input without advancing the parser.\n     * If the input has been exhausted, then this returns null.\n     */\n    Parser.prototype.peek = function () {\n        if (this.isEOF()) {\n            return null;\n        }\n        var code = this.char();\n        var offset = this.offset();\n        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));\n        return nextCode !== null && nextCode !== void 0 ? nextCode : null;\n    };\n    return Parser;\n}());\n\n/**\n * This check if codepoint is alphabet (lower & uppercase)\n * @param codepoint\n * @returns\n */\nfunction _isAlpha(codepoint) {\n    return ((codepoint >= 97 && codepoint <= 122) ||\n        (codepoint >= 65 && codepoint <= 90));\n}\nfunction _isAlphaOrSlash(codepoint) {\n    return _isAlpha(codepoint) || codepoint === 47; /* \'/\' */\n}\n/** See `parseTag` function docs. */\nfunction _isPotentialElementNameChar(c) {\n    return (c === 45 /* \'-\' */ ||\n        c === 46 /* \'.\' */ ||\n        (c >= 48 && c <= 57) /* 0..9 */ ||\n        c === 95 /* \'_\' */ ||\n        (c >= 97 && c <= 122) /** a..z */ ||\n        (c >= 65 && c <= 90) /* A..Z */ ||\n        c == 0xb7 ||\n        (c >= 0xc0 && c <= 0xd6) ||\n        (c >= 0xd8 && c <= 0xf6) ||\n        (c >= 0xf8 && c <= 0x37d) ||\n        (c >= 0x37f && c <= 0x1fff) ||\n        (c >= 0x200c && c <= 0x200d) ||\n        (c >= 0x203f && c <= 0x2040) ||\n        (c >= 0x2070 && c <= 0x218f) ||\n        (c >= 0x2c00 && c <= 0x2fef) ||\n        (c >= 0x3001 && c <= 0xd7ff) ||\n        (c >= 0xf900 && c <= 0xfdcf) ||\n        (c >= 0xfdf0 && c <= 0xfffd) ||\n        (c >= 0x10000 && c <= 0xeffff));\n}\n/**\n * Code point equivalent of regex `\\p{White_Space}`.\n * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isWhiteSpace(c) {\n    return ((c >= 0x0009 && c <= 0x000d) ||\n        c === 0x0020 ||\n        c === 0x0085 ||\n        (c >= 0x200e && c <= 0x200f) ||\n        c === 0x2028 ||\n        c === 0x2029);\n}\n/**\n * Code point equivalent of regex `\\p{Pattern_Syntax}`.\n * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n */\nfunction _isPatternSyntax(c) {\n    return ((c >= 0x0021 && c <= 0x0023) ||\n        c === 0x0024 ||\n        (c >= 0x0025 && c <= 0x0027) ||\n        c === 0x0028 ||\n        c === 0x0029 ||\n        c === 0x002a ||\n        c === 0x002b ||\n        c === 0x002c ||\n        c === 0x002d ||\n        (c >= 0x002e && c <= 0x002f) ||\n        (c >= 0x003a && c <= 0x003b) ||\n        (c >= 0x003c && c <= 0x003e) ||\n        (c >= 0x003f && c <= 0x0040) ||\n        c === 0x005b ||\n        c === 0x005c ||\n        c === 0x005d ||\n        c === 0x005e ||\n        c === 0x0060 ||\n        c === 0x007b ||\n        c === 0x007c ||\n        c === 0x007d ||\n        c === 0x007e ||\n        c === 0x00a1 ||\n        (c >= 0x00a2 && c <= 0x00a5) ||\n        c === 0x00a6 ||\n        c === 0x00a7 ||\n        c === 0x00a9 ||\n        c === 0x00ab ||\n        c === 0x00ac ||\n        c === 0x00ae ||\n        c === 0x00b0 ||\n        c === 0x00b1 ||\n        c === 0x00b6 ||\n        c === 0x00bb ||\n        c === 0x00bf ||\n        c === 0x00d7 ||\n        c === 0x00f7 ||\n        (c >= 0x2010 && c <= 0x2015) ||\n        (c >= 0x2016 && c <= 0x2017) ||\n        c === 0x2018 ||\n        c === 0x2019 ||\n        c === 0x201a ||\n        (c >= 0x201b && c <= 0x201c) ||\n        c === 0x201d ||\n        c === 0x201e ||\n        c === 0x201f ||\n        (c >= 0x2020 && c <= 0x2027) ||\n        (c >= 0x2030 && c <= 0x2038) ||\n        c === 0x2039 ||\n        c === 0x203a ||\n        (c >= 0x203b && c <= 0x203e) ||\n        (c >= 0x2041 && c <= 0x2043) ||\n        c === 0x2044 ||\n        c === 0x2045 ||\n        c === 0x2046 ||\n        (c >= 0x2047 && c <= 0x2051) ||\n        c === 0x2052 ||\n        c === 0x2053 ||\n        (c >= 0x2055 && c <= 0x205e) ||\n        (c >= 0x2190 && c <= 0x2194) ||\n        (c >= 0x2195 && c <= 0x2199) ||\n        (c >= 0x219a && c <= 0x219b) ||\n        (c >= 0x219c && c <= 0x219f) ||\n        c === 0x21a0 ||\n        (c >= 0x21a1 && c <= 0x21a2) ||\n        c === 0x21a3 ||\n        (c >= 0x21a4 && c <= 0x21a5) ||\n        c === 0x21a6 ||\n        (c >= 0x21a7 && c <= 0x21ad) ||\n        c === 0x21ae ||\n        (c >= 0x21af && c <= 0x21cd) ||\n        (c >= 0x21ce && c <= 0x21cf) ||\n        (c >= 0x21d0 && c <= 0x21d1) ||\n        c === 0x21d2 ||\n        c === 0x21d3 ||\n        c === 0x21d4 ||\n        (c >= 0x21d5 && c <= 0x21f3) ||\n        (c >= 0x21f4 && c <= 0x22ff) ||\n        (c >= 0x2300 && c <= 0x2307) ||\n        c === 0x2308 ||\n        c === 0x2309 ||\n        c === 0x230a ||\n        c === 0x230b ||\n        (c >= 0x230c && c <= 0x231f) ||\n        (c >= 0x2320 && c <= 0x2321) ||\n        (c >= 0x2322 && c <= 0x2328) ||\n        c === 0x2329 ||\n        c === 0x232a ||\n        (c >= 0x232b && c <= 0x237b) ||\n        c === 0x237c ||\n        (c >= 0x237d && c <= 0x239a) ||\n        (c >= 0x239b && c <= 0x23b3) ||\n        (c >= 0x23b4 && c <= 0x23db) ||\n        (c >= 0x23dc && c <= 0x23e1) ||\n        (c >= 0x23e2 && c <= 0x2426) ||\n        (c >= 0x2427 && c <= 0x243f) ||\n        (c >= 0x2440 && c <= 0x244a) ||\n        (c >= 0x244b && c <= 0x245f) ||\n        (c >= 0x2500 && c <= 0x25b6) ||\n        c === 0x25b7 ||\n        (c >= 0x25b8 && c <= 0x25c0) ||\n        c === 0x25c1 ||\n        (c >= 0x25c2 && c <= 0x25f7) ||\n        (c >= 0x25f8 && c <= 0x25ff) ||\n        (c >= 0x2600 && c <= 0x266e) ||\n        c === 0x266f ||\n        (c >= 0x2670 && c <= 0x2767) ||\n        c === 0x2768 ||\n        c === 0x2769 ||\n        c === 0x276a ||\n        c === 0x276b ||\n        c === 0x276c ||\n        c === 0x276d ||\n        c === 0x276e ||\n        c === 0x276f ||\n        c === 0x2770 ||\n        c === 0x2771 ||\n        c === 0x2772 ||\n        c === 0x2773 ||\n        c === 0x2774 ||\n        c === 0x2775 ||\n        (c >= 0x2794 && c <= 0x27bf) ||\n        (c >= 0x27c0 && c <= 0x27c4) ||\n        c === 0x27c5 ||\n        c === 0x27c6 ||\n        (c >= 0x27c7 && c <= 0x27e5) ||\n        c === 0x27e6 ||\n        c === 0x27e7 ||\n        c === 0x27e8 ||\n        c === 0x27e9 ||\n        c === 0x27ea ||\n        c === 0x27eb ||\n        c === 0x27ec ||\n        c === 0x27ed ||\n        c === 0x27ee ||\n        c === 0x27ef ||\n        (c >= 0x27f0 && c <= 0x27ff) ||\n        (c >= 0x2800 && c <= 0x28ff) ||\n        (c >= 0x2900 && c <= 0x2982) ||\n        c === 0x2983 ||\n        c === 0x2984 ||\n        c === 0x2985 ||\n        c === 0x2986 ||\n        c === 0x2987 ||\n        c === 0x2988 ||\n        c === 0x2989 ||\n        c === 0x298a ||\n        c === 0x298b ||\n        c === 0x298c ||\n        c === 0x298d ||\n        c === 0x298e ||\n        c === 0x298f ||\n        c === 0x2990 ||\n        c === 0x2991 ||\n        c === 0x2992 ||\n        c === 0x2993 ||\n        c === 0x2994 ||\n        c === 0x2995 ||\n        c === 0x2996 ||\n        c === 0x2997 ||\n        c === 0x2998 ||\n        (c >= 0x2999 && c <= 0x29d7) ||\n        c === 0x29d8 ||\n        c === 0x29d9 ||\n        c === 0x29da ||\n        c === 0x29db ||\n        (c >= 0x29dc && c <= 0x29fb) ||\n        c === 0x29fc ||\n        c === 0x29fd ||\n        (c >= 0x29fe && c <= 0x2aff) ||\n        (c >= 0x2b00 && c <= 0x2b2f) ||\n        (c >= 0x2b30 && c <= 0x2b44) ||\n        (c >= 0x2b45 && c <= 0x2b46) ||\n        (c >= 0x2b47 && c <= 0x2b4c) ||\n        (c >= 0x2b4d && c <= 0x2b73) ||\n        (c >= 0x2b74 && c <= 0x2b75) ||\n        (c >= 0x2b76 && c <= 0x2b95) ||\n        c === 0x2b96 ||\n        (c >= 0x2b97 && c <= 0x2bff) ||\n        (c >= 0x2e00 && c <= 0x2e01) ||\n        c === 0x2e02 ||\n        c === 0x2e03 ||\n        c === 0x2e04 ||\n        c === 0x2e05 ||\n        (c >= 0x2e06 && c <= 0x2e08) ||\n        c === 0x2e09 ||\n        c === 0x2e0a ||\n        c === 0x2e0b ||\n        c === 0x2e0c ||\n        c === 0x2e0d ||\n        (c >= 0x2e0e && c <= 0x2e16) ||\n        c === 0x2e17 ||\n        (c >= 0x2e18 && c <= 0x2e19) ||\n        c === 0x2e1a ||\n        c === 0x2e1b ||\n        c === 0x2e1c ||\n        c === 0x2e1d ||\n        (c >= 0x2e1e && c <= 0x2e1f) ||\n        c === 0x2e20 ||\n        c === 0x2e21 ||\n        c === 0x2e22 ||\n        c === 0x2e23 ||\n        c === 0x2e24 ||\n        c === 0x2e25 ||\n        c === 0x2e26 ||\n        c === 0x2e27 ||\n        c === 0x2e28 ||\n        c === 0x2e29 ||\n        (c >= 0x2e2a && c <= 0x2e2e) ||\n        c === 0x2e2f ||\n        (c >= 0x2e30 && c <= 0x2e39) ||\n        (c >= 0x2e3a && c <= 0x2e3b) ||\n        (c >= 0x2e3c && c <= 0x2e3f) ||\n        c === 0x2e40 ||\n        c === 0x2e41 ||\n        c === 0x2e42 ||\n        (c >= 0x2e43 && c <= 0x2e4f) ||\n        (c >= 0x2e50 && c <= 0x2e51) ||\n        c === 0x2e52 ||\n        (c >= 0x2e53 && c <= 0x2e7f) ||\n        (c >= 0x3001 && c <= 0x3003) ||\n        c === 0x3008 ||\n        c === 0x3009 ||\n        c === 0x300a ||\n        c === 0x300b ||\n        c === 0x300c ||\n        c === 0x300d ||\n        c === 0x300e ||\n        c === 0x300f ||\n        c === 0x3010 ||\n        c === 0x3011 ||\n        (c >= 0x3012 && c <= 0x3013) ||\n        c === 0x3014 ||\n        c === 0x3015 ||\n        c === 0x3016 ||\n        c === 0x3017 ||\n        c === 0x3018 ||\n        c === 0x3019 ||\n        c === 0x301a ||\n        c === 0x301b ||\n        c === 0x301c ||\n        c === 0x301d ||\n        (c >= 0x301e && c <= 0x301f) ||\n        c === 0x3020 ||\n        c === 0x3030 ||\n        c === 0xfd3e ||\n        c === 0xfd3f ||\n        (c >= 0xfe45 && c <= 0xfe46));\n}\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/icu-messageformat-parser/lib/index.js\n\n\n\n\nfunction pruneLocation(els) {\n    els.forEach(function (el) {\n        delete el.location;\n        if (isSelectElement(el) || isPluralElement(el)) {\n            for (var k in el.options) {\n                delete el.options[k].location;\n                pruneLocation(el.options[k].value);\n            }\n        }\n        else if (isNumberElement(el) && isNumberSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if ((isDateElement(el) || isTimeElement(el)) &&\n            isDateTimeSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if (isTagElement(el)) {\n            pruneLocation(el.children);\n        }\n    });\n}\nfunction parse(message, opts) {\n    if (opts === void 0) { opts = {}; }\n    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);\n    var result = new parser_Parser(message, opts).parse();\n    if (result.err) {\n        var error = SyntaxError(ErrorKind[result.err.kind]);\n        // @ts-expect-error Assign to error object\n        error.location = result.err.location;\n        // @ts-expect-error Assign to error object\n        error.originalMessage = result.err.message;\n        throw error;\n    }\n    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n        pruneLocation(result.val);\n    }\n    return result.val;\n}\n\n// only for testing\nvar _Parser = (/* unused pure expression or super */ null && (Parser));\n\n;// CONCATENATED MODULE: ./node_modules/@formatjs/fast-memoize/lib/index.js\n//\n// Main\n//\nfunction memoize(fn, options) {\n    var cache = options && options.cache ? options.cache : cacheDefault;\n    var serializer = options && options.serializer ? options.serializer : serializerDefault;\n    var strategy = options && options.strategy ? options.strategy : strategyDefault;\n    return strategy(fn, {\n        cache: cache,\n        serializer: serializer,\n    });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n    return (value == null || typeof value === \'number\' || typeof value === \'boolean\'); // || typeof value === "string" \'unsafe\' primitive for our needs\n}\nfunction monadic(fn, cache, serializer, arg) {\n    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === \'undefined\') {\n        computedValue = fn.call(this, arg);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n    var args = Array.prototype.slice.call(arguments, 3);\n    var cacheKey = serializer(args);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === \'undefined\') {\n        computedValue = fn.apply(this, args);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n    return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n    var strategy = fn.length === 1 ? monadic : variadic;\n    return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n    return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n    return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function () {\n    return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nfunction ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n}\nObjectWithoutPrototypeCache.prototype.get = function (key) {\n    return this.cache[key];\n};\nObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n    this.cache[key] = value;\n};\nvar cacheDefault = {\n    create: function create() {\n        // @ts-ignore\n        return new ObjectWithoutPrototypeCache();\n    },\n};\nvar strategies = {\n    variadic: strategyVariadic,\n    monadic: strategyMonadic,\n};\n\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat/lib/src/error.js\n\nvar ErrorCode;\n(function (ErrorCode) {\n    // When we have a placeholder but no value to format\n    ErrorCode["MISSING_VALUE"] = "MISSING_VALUE";\n    // When value supplied is invalid\n    ErrorCode["INVALID_VALUE"] = "INVALID_VALUE";\n    // When we need specific Intl API but it\'s not available\n    ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */ (function (_super) {\n    __extends(FormatError, _super);\n    function FormatError(msg, code, originalMessage) {\n        var _this = _super.call(this, msg) || this;\n        _this.code = code;\n        _this.originalMessage = originalMessage;\n        return _this;\n    }\n    FormatError.prototype.toString = function () {\n        return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);\n    };\n    return FormatError;\n}(Error));\n\nvar InvalidValueError = /** @class */ (function (_super) {\n    __extends(InvalidValueError, _super);\n    function InvalidValueError(variableId, value, options, originalMessage) {\n        return _super.call(this, "Invalid values for \\"".concat(variableId, "\\": \\"").concat(value, "\\". Options are \\"").concat(Object.keys(options).join(\'", "\'), "\\""), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueError;\n}(FormatError));\n\nvar InvalidValueTypeError = /** @class */ (function (_super) {\n    __extends(InvalidValueTypeError, _super);\n    function InvalidValueTypeError(value, type, originalMessage) {\n        return _super.call(this, "Value for \\"".concat(value, "\\" must be of type ").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueTypeError;\n}(FormatError));\n\nvar MissingValueError = /** @class */ (function (_super) {\n    __extends(MissingValueError, _super);\n    function MissingValueError(variableId, originalMessage) {\n        return _super.call(this, "The intl string context variable \\"".concat(variableId, "\\" was not provided to the string \\"").concat(originalMessage, "\\""), ErrorCode.MISSING_VALUE, originalMessage) || this;\n    }\n    return MissingValueError;\n}(FormatError));\n\n\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat/lib/src/formatters.js\n\n\nvar PART_TYPE;\n(function (PART_TYPE) {\n    PART_TYPE[PART_TYPE["literal"] = 0] = "literal";\n    PART_TYPE[PART_TYPE["object"] = 1] = "object";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function (all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart ||\n            lastPart.type !== PART_TYPE.literal ||\n            part.type !== PART_TYPE.literal) {\n            all.push(part);\n        }\n        else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\nfunction isFormatXMLElementFn(el) {\n    return typeof el === \'function\';\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue, \n// For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && isLiteralElement(els[0])) {\n        return [\n            {\n                type: PART_TYPE.literal,\n                value: els[0].value,\n            },\n        ];\n    }\n    var result = [];\n    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if (isLiteralElement(el)) {\n            result.push({\n                type: PART_TYPE.literal,\n                value: el.value,\n            });\n            continue;\n        }\n        // TODO: should this part be literal type?\n        // Replace `#` in plural rules with the actual numeric value.\n        if (isPoundElement(el)) {\n            if (typeof currentPluralValue === \'number\') {\n                result.push({\n                    type: PART_TYPE.literal,\n                    value: formatters.getNumberFormat(locales).format(currentPluralValue),\n                });\n            }\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new MissingValueError(varName, originalMessage);\n        }\n        var value = values[varName];\n        if (isArgumentElement(el)) {\n            if (!value || typeof value === \'string\' || typeof value === \'number\') {\n                value =\n                    typeof value === \'string\' || typeof value === \'number\'\n                        ? String(value)\n                        : \'\';\n            }\n            result.push({\n                type: typeof value === \'string\' ? PART_TYPE.literal : PART_TYPE.object,\n                value: value,\n            });\n            continue;\n        }\n        // Recursively format plural and select parts\' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = typeof el.style === \'string\'\n                ? formats.date[el.style]\n                : isDateTimeSkeleton(el.style)\n                    ? el.style.parsedOptions\n                    : undefined;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isTimeElement(el)) {\n            var style = typeof el.style === \'string\'\n                ? formats.time[el.style]\n                : isDateTimeSkeleton(el.style)\n                    ? el.style.parsedOptions\n                    : formats.time.medium;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isNumberElement(el)) {\n            var style = typeof el.style === \'string\'\n                ? formats.number[el.style]\n                : isNumberSkeleton(el.style)\n                    ? el.style.parsedOptions\n                    : undefined;\n            if (style && style.scale) {\n                value =\n                    value *\n                        (style.scale || 1);\n            }\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters\n                    .getNumberFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isTagElement(el)) {\n            var children = el.children, value_1 = el.value;\n            var formatFn = values[value_1];\n            if (!isFormatXMLElementFn(formatFn)) {\n                throw new InvalidValueTypeError(value_1, \'function\', originalMessage);\n            }\n            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n            var chunks = formatFn(parts.map(function (p) { return p.value; }));\n            if (!Array.isArray(chunks)) {\n                chunks = [chunks];\n            }\n            result.push.apply(result, chunks.map(function (c) {\n                return {\n                    type: typeof c === \'string\' ? PART_TYPE.literal : PART_TYPE.object,\n                    value: c,\n                };\n            }));\n        }\n        if (isSelectElement(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if (isPluralElement(el)) {\n            var opt = el.options["=".concat(value)];\n            if (!opt) {\n                if (!Intl.PluralRules) {\n                    throw new FormatError("Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\"@formatjs/intl-pluralrules\\"\\n", ErrorCode.MISSING_INTL_API, originalMessage);\n                }\n                var rule = formatters\n                    .getPluralRules(locales, { type: el.pluralType })\n                    .select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\n\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat/lib/src/core.js\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n    return {\n        create: function () {\n            return {\n                get: function (key) {\n                    return store[key];\n                },\n                set: function (key, value) {\n                    store[key] = value;\n                },\n            };\n        },\n    };\n}\nfunction createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoize(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.number),\n            strategy: strategies.variadic,\n        }),\n        getDateTimeFormat: memoize(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.dateTime),\n            strategy: strategies.variadic,\n        }),\n        getPluralRules: memoize(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.pluralRules),\n            strategy: strategies.variadic,\n        }),\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        var _this = this;\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function (all, part) {\n                if (!all.length ||\n                    part.type !== PART_TYPE.literal ||\n                    typeof all[all.length - 1] !== \'string\') {\n                    all.push(part.value);\n                }\n                else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || \'\';\n            }\n            return result;\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function () {\n            var _a;\n            return ({\n                locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) ||\n                    Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],\n            });\n        };\n        this.getAst = function () { return _this.ast; };\n        // Defined first because it\'s used to build the format pattern.\n        this.locales = locales;\n        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n        if (typeof message === \'string\') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError(\'IntlMessageFormat.__parse must be set to process `message` of type `string`\');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, {\n                ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,\n                locale: this.resolvedLocale,\n            });\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError(\'A message must be provided as a String or AST.\');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, "defaultLocale", {\n        get: function () {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale =\n                    new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.resolveLocale = function (locales) {\n        if (typeof Intl.Locale === \'undefined\') {\n            return;\n        }\n        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n        if (supportedLocales.length > 0) {\n            return new Intl.Locale(supportedLocales[0]);\n        }\n        return new Intl.Locale(typeof locales === \'string\' ? locales : locales[0]);\n    };\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            integer: {\n                maximumFractionDigits: 0,\n            },\n            currency: {\n                style: \'currency\',\n            },\n            percent: {\n                style: \'percent\',\n            },\n        },\n        date: {\n            short: {\n                month: \'numeric\',\n                day: \'numeric\',\n                year: \'2-digit\',\n            },\n            medium: {\n                month: \'short\',\n                day: \'numeric\',\n                year: \'numeric\',\n            },\n            long: {\n                month: \'long\',\n                day: \'numeric\',\n                year: \'numeric\',\n            },\n            full: {\n                weekday: \'long\',\n                month: \'long\',\n                day: \'numeric\',\n                year: \'numeric\',\n            },\n        },\n        time: {\n            short: {\n                hour: \'numeric\',\n                minute: \'numeric\',\n            },\n            medium: {\n                hour: \'numeric\',\n                minute: \'numeric\',\n                second: \'numeric\',\n            },\n            long: {\n                hour: \'numeric\',\n                minute: \'numeric\',\n                second: \'numeric\',\n                timeZoneName: \'short\',\n            },\n            full: {\n                hour: \'numeric\',\n                minute: \'numeric\',\n                second: \'numeric\',\n                timeZoneName: \'short\',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\n\n\n;// CONCATENATED MODULE: ./node_modules/intl-messageformat/lib/index.js\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n\n\n\n/* harmony default export */ var lib = (IntlMessageFormat);\n\n;// CONCATENATED MODULE: ./node_modules/@internationalized/message/dist/module.js\n\n\nclass $d6fd23bc337660df$export$64839e615120df17 {\n    getStringForLocale(key, locale) {\n        let strings = this.messages[locale];\n        if (!strings) {\n            strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n            this.messages[locale] = strings;\n        }\n        let string = strings[key];\n        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n        return string;\n    }\n    constructor(messages, defaultLocale = \'en-US\'){\n        // Clone messages so we don\'t modify the original object.\n        this.messages = {\n            ...messages\n        };\n        this.defaultLocale = defaultLocale;\n    }\n}\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings, defaultLocale = \'en-US\') {\n    // If there is an exact match, use it.\n    if (strings[locale]) return strings[locale];\n    // Attempt to find the closest match by language.\n    // For example, if the locale is fr-CA (French Canadian), but there is only\n    // an fr-FR (France) set of strings, use that.\n    // This could be replaced with Intl.LocaleMatcher once it is supported.\n    // https://github.com/tc39/proposal-intl-localematcher\n    let language = $d6fd23bc337660df$var$getLanguage(locale);\n    if (strings[language]) return strings[language];\n    for(let key in strings){\n        if (key.startsWith(language + \'-\')) return strings[key];\n    }\n    // Nothing close, use english.\n    return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n    // @ts-ignore\n    if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n    return locale.split(\'-\')[0];\n}\n\n\n\nclass $972eb555d604f491$export$526ebc05ff964723 {\n    format(key, variables) {\n        let message = this.cache[key];\n        if (!message) {\n            let msg = this.messages.getStringForLocale(key, this.locale);\n            if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n            message = new lib(msg, this.locale);\n            this.cache[key] = message;\n        }\n        let varCopy;\n        if (variables) varCopy = Object.keys(variables).reduce((acc, key)=>{\n            acc[key] = variables[key] == null ? false : variables[key];\n            return acc;\n        }, {\n        });\n        return message.format(varCopy);\n    }\n    constructor(locale, messages){\n        this.locale = locale;\n        this.messages = messages;\n        this.cache = {\n        };\n    }\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n\n;// CONCATENATED MODULE: ./node_modules/@react-aria/i18n/dist/useMessageFormatter.module.js\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\n\nconst cache = new WeakMap();\n\nfunction getCachedDictionary(strings) {\n  let dictionary = cache.get(strings);\n\n  if (!dictionary) {\n    dictionary = new $d6fd23bc337660df$export$64839e615120df17(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n * @deprecated - use useLocalizedStringFormatter instead.\n */\n\n\nfunction useMessageFormatter(strings) {\n  let {\n    locale\n  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n  let dictionary = (0,react.useMemo)(() => getCachedDictionary(strings), [strings]);\n  let formatter = (0,react.useMemo)(() => new $972eb555d604f491$export$526ebc05ff964723(locale, dictionary), [locale, dictionary]);\n  return (0,react.useCallback)((key, variables) => formatter.format(key, variables), [formatter]);\n}\n\n// EXTERNAL MODULE: ./node_modules/dom-helpers/ownerDocument.js\nvar ownerDocument = __webpack_require__(9981);\nvar ownerDocument_default = /*#__PURE__*/__webpack_require__.n(ownerDocument);\n// EXTERNAL MODULE: ./node_modules/dom-helpers/query/scrollTop.js\nvar scrollTop = __webpack_require__(504);\nvar scrollTop_default = /*#__PURE__*/__webpack_require__.n(scrollTop);\n// EXTERNAL MODULE: ./node_modules/dom-helpers/query/scrollLeft.js\nvar scrollLeft = __webpack_require__(5770);\nvar scrollLeft_default = /*#__PURE__*/__webpack_require__.n(scrollLeft);\n// EXTERNAL MODULE: ./node_modules/dom-helpers/query/position.js\nvar position = __webpack_require__(7265);\nvar position_default = /*#__PURE__*/__webpack_require__.n(position);\n// EXTERNAL MODULE: ./node_modules/dom-helpers/query/offset.js\nvar query_offset = __webpack_require__(2565);\nvar offset_default = /*#__PURE__*/__webpack_require__.n(query_offset);\n// EXTERNAL MODULE: ./node_modules/dom-helpers/style/index.js\nvar style = __webpack_require__(162);\nvar style_default = /*#__PURE__*/__webpack_require__.n(style);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(2122);\n;// CONCATENATED MODULE: ./node_modules/@react-aria/overlays/dist/module.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst $d45e305fb90d49e7c81f49bb4afe323b$var$AXIS = {\n  top: \'top\',\n  bottom: \'top\',\n  left: \'left\',\n  right: \'left\'\n};\nconst $d45e305fb90d49e7c81f49bb4afe323b$var$FLIPPED_DIRECTION = {\n  top: \'bottom\',\n  bottom: \'top\',\n  left: \'right\',\n  right: \'left\'\n};\nconst $d45e305fb90d49e7c81f49bb4afe323b$var$CROSS_AXIS = {\n  top: \'left\',\n  left: \'top\'\n};\nconst $d45e305fb90d49e7c81f49bb4afe323b$var$AXIS_SIZE = {\n  top: \'height\',\n  left: \'width\'\n};\nconst $d45e305fb90d49e7c81f49bb4afe323b$var$PARSED_PLACEMENT_CACHE = {}; // @ts-ignore\n\nlet $d45e305fb90d49e7c81f49bb4afe323b$var$visualViewport = typeof window !== \'undefined\' && window.visualViewport;\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$getContainerDimensions(containerNode) {\n  let width = 0,\n      height = 0,\n      top = 0,\n      left = 0;\n  let scroll = {};\n\n  if (containerNode.tagName === \'BODY\') {\n    var _visualViewport$width, _visualViewport$heigh;\n\n    width = (_visualViewport$width = $d45e305fb90d49e7c81f49bb4afe323b$var$visualViewport == null ? void 0 : $d45e305fb90d49e7c81f49bb4afe323b$var$visualViewport.width) != null ? _visualViewport$width : document.documentElement.clientWidth;\n    height = (_visualViewport$heigh = $d45e305fb90d49e7c81f49bb4afe323b$var$visualViewport == null ? void 0 : $d45e305fb90d49e7c81f49bb4afe323b$var$visualViewport.height) != null ? _visualViewport$heigh : document.documentElement.clientHeight;\n    scroll.top = scrollTop_default()(ownerDocument_default()(containerNode).documentElement) || scrollTop_default()(containerNode);\n    scroll.left = scrollLeft_default()(ownerDocument_default()(containerNode).documentElement) || scrollLeft_default()(containerNode);\n  } else {\n    ({\n      width,\n      height,\n      top,\n      left\n    } = offset_default()(containerNode));\n    scroll.top = scrollTop_default()(containerNode);\n    scroll.left = scrollLeft_default()(containerNode);\n  }\n\n  return {\n    width,\n    height,\n    scroll,\n    top,\n    left\n  };\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$getScroll(node) {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight\n  };\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$getDelta(axis, offset, size, containerDimensions, padding) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[$d45e305fb90d49e7c81f49bb4afe323b$var$AXIS_SIZE[axis]];\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$getMargins(node) {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0\n  };\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$parsePlacement(input) {\n  if ($d45e305fb90d49e7c81f49bb4afe323b$var$PARSED_PLACEMENT_CACHE[input]) {\n    return $d45e305fb90d49e7c81f49bb4afe323b$var$PARSED_PLACEMENT_CACHE[input];\n  }\n\n  let [placement, crossPlacement] = input.split(\' \');\n  let axis = $d45e305fb90d49e7c81f49bb4afe323b$var$AXIS[placement] || \'right\';\n  let crossAxis = $d45e305fb90d49e7c81f49bb4afe323b$var$CROSS_AXIS[axis];\n\n  if (!$d45e305fb90d49e7c81f49bb4afe323b$var$AXIS[crossPlacement]) {\n    crossPlacement = \'center\';\n  }\n\n  let size = $d45e305fb90d49e7c81f49bb4afe323b$var$AXIS_SIZE[axis];\n  let crossSize = $d45e305fb90d49e7c81f49bb4afe323b$var$AXIS_SIZE[crossAxis];\n  $d45e305fb90d49e7c81f49bb4afe323b$var$PARSED_PLACEMENT_CACHE[input] = {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize\n  };\n  return $d45e305fb90d49e7c81f49bb4afe323b$var$PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {\n  let {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize\n  } = placementInfo;\n  let position = {}; // button position\n\n  position[crossAxis] = childOffset[crossAxis];\n\n  if (crossPlacement === \'center\') {\n    //  + (button size / 2) - (overlay size / 2)\n    // at this point the overlay center should match the button center\n    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    //  + (button size) - (overlay size)\n    // at this point the overlay bottom should match the button bottom\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  }\n  /* else {\n   the overlay top should match the button top\n  } */\n  // add the crossOffset from props\n\n\n  position[crossAxis] += crossOffset; // this is button center position - the overlay size + half of the button to align bottom of overlay with button center\n\n  let minViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2 - overlaySize[crossSize]; // this is button position of center, aligns top of overlay with button center\n\n  let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2; // clamp it into the range of the min/max positions\n\n  position[crossAxis] = Math.min(Math.max(minViablePosition, position[crossAxis]), maxViablePosition); // Floor these so the position isn\'t placed on a partial pixel, only whole pixels. Shouldn\'t matter if it was floored or ceiled, so chose one.\n\n  if (placement === axis) {\n    // If the container is positioned (non-static), then we use the container\'s actual\n    // height, as `bottom` will be relative to this height.  But if the container is static,\n    // then it can only be the `document.body`, and `bottom` will be relative to _its_\n    // container, which should be as large as boundaryDimensions.\n    const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];\n    position[$d45e305fb90d49e7c81f49bb4afe323b$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n\n  return position;\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {\n  return position.top != null // We want the distance between the top of the overlay to the bottom of the boundary\n  ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - ( // this is the bottom of the boundary\n  containerOffsetWithBoundary.top + position.top) // this is the top of the overlay\n  - (margins.top + margins.bottom + padding) // save additional space for margin and padding\n  ) // We want the distance between the top of the trigger to the top of the boundary\n  : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - ( // this is the top of the trigger\n  boundaryDimensions.top + boundaryDimensions.scroll.top) // this is the top of the boundary\n  - (margins.top + margins.bottom + padding) // save additional space for margin and padding\n  );\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {\n  let {\n    placement,\n    axis,\n    size\n  } = placementInfo;\n\n  if (placement === axis) {\n    return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$d45e305fb90d49e7c81f49bb4afe323b$var$FLIPPED_DIRECTION[axis]] - padding);\n  }\n\n  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$d45e305fb90d49e7c81f49bb4afe323b$var$FLIPPED_DIRECTION[axis]] - padding);\n}\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$export$calculatePositionInternal(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned) {\n  let placementInfo = $d45e305fb90d49e7c81f49bb4afe323b$var$parsePlacement(placementInput);\n  let {\n    size,\n    crossAxis,\n    crossSize,\n    placement,\n    crossPlacement\n  } = placementInfo;\n  let position = $d45e305fb90d49e7c81f49bb4afe323b$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  let normalizedOffset = offset;\n  let space = $d45e305fb90d49e7c81f49bb4afe323b$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo); // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip\n\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = $d45e305fb90d49e7c81f49bb4afe323b$var$parsePlacement($d45e305fb90d49e7c81f49bb4afe323b$var$FLIPPED_DIRECTION[placement] + " " + crossPlacement);\n    let flippedPosition = $d45e305fb90d49e7c81f49bb4afe323b$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n    let flippedSpace = $d45e305fb90d49e7c81f49bb4afe323b$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo); // If the available space for the flipped position is greater than the original available space, flip.\n\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n\n  let delta = $d45e305fb90d49e7c81f49bb4afe323b$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  let maxHeight = $d45e305fb90d49e7c81f49bb4afe323b$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n  position = $d45e305fb90d49e7c81f49bb4afe323b$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  delta = $d45e305fb90d49e7c81f49bb4afe323b$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  let arrowPosition = {};\n  arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement\n  };\n}\n/**\n * Determines where to place the overlay with regards to the target and the position of an optional indicator.\n */\n\n\nfunction $d45e305fb90d49e7c81f49bb4afe323b$export$calculatePosition(opts) {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset\n  } = opts;\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === \'BODY\';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== \'static\';\n  let childOffset = isBodyContainer ? offset_default()(targetNode) : position_default()(targetNode, container);\n\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(style_default()(targetNode, \'marginTop\'), 10) || 0;\n    childOffset.left += parseInt(style_default()(targetNode, \'marginLeft\'), 10) || 0;\n  }\n\n  let overlaySize = offset_default()(overlayNode);\n\n  let margins = $d45e305fb90d49e7c81f49bb4afe323b$var$getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n  let scrollSize = $d45e305fb90d49e7c81f49bb4afe323b$var$getScroll(scrollNode);\n  let boundaryDimensions = $d45e305fb90d49e7c81f49bb4afe323b$var$getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary = boundaryElement.tagName === \'BODY\' ? offset_default()(container) : position_default()(container, boundaryElement);\n  return $d45e305fb90d49e7c81f49bb4afe323b$export$calculatePositionInternal(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned);\n}\n\n// This behavior moved from useOverlayTrigger to useOverlayPosition.\n// For backward compatibility, where useOverlayTrigger handled hiding the popover on close,\n// it sets a close function here mapped from the trigger element. This way we can avoid\n// forcing users to pass an onClose function to useOverlayPosition which could be considered\n// a breaking change.\nconst $df1b2f080f58bf9e74aeb666b8c96ba$export$onCloseMap = new WeakMap();\n\n/** @private */\nfunction $df1b2f080f58bf9e74aeb666b8c96ba$export$useCloseOnScroll(opts) {\n  let {\n    triggerRef,\n    isOpen,\n    onClose\n  } = opts;\n  (0,react.useEffect)(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    let onScroll = e => {\n      // Ignore if scrolling an scrollable region outside the trigger\'s tree.\n      let target = e.target;\n\n      if (!triggerRef.current || !target.contains(triggerRef.current)) {\n        return;\n      }\n\n      let onCloseHandler = onClose || $df1b2f080f58bf9e74aeb666b8c96ba$export$onCloseMap.get(triggerRef.current);\n\n      if (onCloseHandler) {\n        onCloseHandler();\n      }\n    };\n\n    window.addEventListener(\'scroll\', onScroll, true);\n    return () => {\n      window.removeEventListener(\'scroll\', onScroll, true);\n    };\n  }, [isOpen, onClose, triggerRef]);\n}\n\n// @ts-ignore\nlet $ae841ee9d3f76b31663cf0594adb0fc$var$visualViewport = typeof window !== \'undefined\' && window.visualViewport;\n/**\n * Handles positioning overlays like popovers and menus relative to a trigger\n * element, and updating the position when the window resizes.\n */\n\nfunction useOverlayPosition(props) {\n  let {\n    direction\n  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();\n  let {\n    targetRef,\n    overlayRef,\n    scrollRef = overlayRef,\n    placement = \'bottom\',\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== \'undefined\' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    onClose\n  } = props;\n  let [position, setPosition] = (0,react.useState)({\n    position: {},\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined,\n    maxHeight: undefined,\n    placement: undefined\n  });\n  let deps = [shouldUpdatePosition, placement, overlayRef.current, targetRef.current, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction];\n  let updatePosition = (0,react.useCallback)(() => {\n    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) {\n      return;\n    }\n\n    setPosition($d45e305fb90d49e7c81f49bb4afe323b$export$calculatePosition({\n      placement: $ae841ee9d3f76b31663cf0594adb0fc$var$translateRTL(placement, direction),\n      overlayNode: overlayRef.current,\n      targetNode: targetRef.current,\n      scrollNode: scrollRef.current,\n      padding: containerPadding,\n      shouldFlip,\n      boundaryElement,\n      offset,\n      crossOffset\n    }));\n  }, deps); // Update position when anything changes\n\n  (0,react.useEffect)(updatePosition, deps); // Update position on window resize\n\n  $ae841ee9d3f76b31663cf0594adb0fc$var$useResize(updatePosition); // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n\n  let isResizing = (0,react.useRef)(false);\n  (0,react.useEffect)(() => {\n    let timeout;\n\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n      updatePosition();\n    };\n\n    $ae841ee9d3f76b31663cf0594adb0fc$var$visualViewport == null ? void 0 : $ae841ee9d3f76b31663cf0594adb0fc$var$visualViewport.addEventListener(\'resize\', onResize);\n    return () => {\n      $ae841ee9d3f76b31663cf0594adb0fc$var$visualViewport == null ? void 0 : $ae841ee9d3f76b31663cf0594adb0fc$var$visualViewport.removeEventListener(\'resize\', onResize);\n    };\n  }, [updatePosition]);\n  let close = (0,react.useCallback)(() => {\n    if (!isResizing.current) {\n      onClose();\n    }\n  }, [onClose, isResizing]); // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n\n  $df1b2f080f58bf9e74aeb666b8c96ba$export$useCloseOnScroll({\n    triggerRef: targetRef,\n    isOpen,\n    onClose: onClose ? close : undefined\n  });\n  return {\n    overlayProps: {\n      style: (0,esm_extends/* default */.Z)({\n        position: \'absolute\',\n        zIndex: 100000\n      }, position.position, {\n        maxHeight: position.maxHeight\n      })\n    },\n    placement: position.placement,\n    arrowProps: {\n      style: {\n        left: position.arrowOffsetLeft,\n        top: position.arrowOffsetTop\n      }\n    },\n    updatePosition\n  };\n}\n\nfunction $ae841ee9d3f76b31663cf0594adb0fc$var$useResize(onResize) {\n  (0,react.useEffect)(() => {\n    window.addEventListener(\'resize\', onResize, false);\n    return () => {\n      window.removeEventListener(\'resize\', onResize, false);\n    };\n  }, [onResize]);\n}\n\nfunction $ae841ee9d3f76b31663cf0594adb0fc$var$translateRTL(position, direction) {\n  if (direction === \'rtl\') {\n    return position.replace(\'start\', \'right\').replace(\'end\', \'left\');\n  }\n\n  return position.replace(\'start\', \'left\').replace(\'end\', \'right\');\n}\n\nconst $e4d5b842fe0e1058e95712442330b88c$var$visibleOverlays = [];\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\n\nfunction useOverlay(props, ref) {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isDismissable = false,\n    isKeyboardDismissDisabled = false,\n    shouldCloseOnInteractOutside\n  } = props; // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n\n  (0,react.useEffect)(() => {\n    if (isOpen) {\n      $e4d5b842fe0e1058e95712442330b88c$var$visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = $e4d5b842fe0e1058e95712442330b88c$var$visibleOverlays.indexOf(ref);\n\n      if (index >= 0) {\n        $e4d5b842fe0e1058e95712442330b88c$var$visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]); // Only hide the overlay when it is the topmost visible overlay in the stack.\n\n  let onHide = () => {\n    if ($e4d5b842fe0e1058e95712442330b88c$var$visibleOverlays[$e4d5b842fe0e1058e95712442330b88c$var$visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  let onInteractOutside = e => {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {\n      onHide();\n    }\n  }; // Handle the escape key\n\n\n  let onKeyDown = e => {\n    if (e.key === \'Escape\' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  }; // Handle clicking outside the overlay to close it\n\n\n  (0,interactions_dist_module/* useInteractOutside */.Fc)({\n    ref,\n    onInteractOutside: isDismissable ? onInteractOutside : null\n  });\n  let {\n    focusWithinProps\n  } = (0,interactions_dist_module/* useFocusWithin */.L_)({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: e => {\n      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) {\n        onClose();\n      }\n    }\n  });\n  return {\n    overlayProps: (0,esm_extends/* default */.Z)({\n      onKeyDown\n    }, focusWithinProps)\n  };\n}\n\n/**\n * Handles the behavior and accessibility for an overlay trigger, e.g. a button\n * that opens a popover, menu, or other overlay that is positioned relative to the trigger.\n */\nfunction useOverlayTrigger(props, state, ref) {\n  let {\n    type\n  } = props;\n  let {\n    isOpen\n  } = state; // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll\n  // without forcing users to pass onClose.\n\n  (0,react.useEffect)(() => {\n    if (ref.current) {\n      $df1b2f080f58bf9e74aeb666b8c96ba$export$onCloseMap.set(ref.current, state.close);\n    }\n  }); // Aria 1.1 supports multiple values for aria-haspopup other than just menus.\n  // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\n  // However, we only add it for menus for now because screen readers often\n  // announce it as a menu even for other values.\n\n  let ariaHasPopup = undefined;\n\n  if (type === \'menu\') {\n    ariaHasPopup = true;\n  } else if (type === \'listbox\') {\n    ariaHasPopup = \'listbox\';\n  }\n\n  let overlayId = (0,dist_module/* useId */.Me)();\n  return {\n    triggerProps: {\n      \'aria-haspopup\': ariaHasPopup,\n      \'aria-expanded\': isOpen,\n      \'aria-controls\': isOpen ? overlayId : null\n    },\n    overlayProps: {\n      id: overlayId\n    }\n  };\n}\n// @ts-ignore\nconst $ece0076f06e8a828c60ba0c94f22f89$var$visualViewport = typeof window !== \'undefined\' && window.visualViewport; // HTML input types that do not cause the software keyboard to appear.\n\nconst $ece0076f06e8a828c60ba0c94f22f89$var$nonTextInputTypes = new Set([\'checkbox\', \'radio\', \'range\', \'color\', \'file\', \'image\', \'button\', \'submit\', \'reset\']);\n/**\n * Prevents scrolling on the document body on mount, and\n * restores it on unmount. Also ensures that content does not\n * shift due to the scrollbars disappearing.\n */\n\nfunction usePreventScroll(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    isDisabled\n  } = options;\n  (0,dist_module/* useLayoutEffect */.bt)(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    if ((0,dist_module/* isIOS */.gn)()) {\n      return $ece0076f06e8a828c60ba0c94f22f89$var$preventScrollMobileSafari();\n    } else {\n      return $ece0076f06e8a828c60ba0c94f22f89$var$preventScrollStandard();\n    }\n  }, [isDisabled]);\n} // For most browsers, all we need to do is set `overflow: hidden` on the root element, and\n// add some padding to prevent the page from shifting when the scrollbar is hidden.\n\nfunction $ece0076f06e8a828c60ba0c94f22f89$var$preventScrollStandard() {\n  return (0,dist_module/* chain */.tS)($ece0076f06e8a828c60ba0c94f22f89$var$setStyle(document.documentElement, \'paddingRight\', window.innerWidth - document.documentElement.clientWidth + "px"), $ece0076f06e8a828c60ba0c94f22f89$var$setStyle(document.documentElement, \'overflow\', \'hidden\'));\n} // Mobile Safari is a whole different beast. Even with overflow: hidden,\n// it still scrolls the page in many situations:\n//\n// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.\n// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of\n//    it, so it becomes scrollable.\n// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.\n//    This may cause even fixed position elements to scroll off the screen.\n// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always\n//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.\n//\n// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:\n//\n// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling\n//    on the window.\n// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the\n//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.\n// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.\n// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top\n//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element\n//    into view ourselves, without scrolling the whole page.\n// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the\n//    same visually, but makes the actual scroll position always zero. This is required to make all of the\n//    above work or Safari will still try to scroll the page when focusing an input.\n// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting\n//    to navigate to an input with the next/previous buttons that\'s outside a modal.\n\n\nfunction $ece0076f06e8a828c60ba0c94f22f89$var$preventScrollMobileSafari() {\n  let scrollable;\n  let lastY = 0;\n\n  let onTouchStart = e => {\n    // Store the nearest scrollable parent element from the element that the user touched.\n    scrollable = (0,dist_module/* getScrollParent */.rP)(e.target);\n\n    if (scrollable === document.documentElement && scrollable === document.body) {\n      return;\n    }\n\n    lastY = e.changedTouches[0].pageY;\n  };\n\n  let onTouchMove = e => {\n    // Prevent scrolling the window.\n    if (scrollable === document.documentElement || scrollable === document.body) {\n      e.preventDefault();\n      return;\n    } // Prevent scrolling up when at the top and scrolling down when at the bottom\n    // of a nested scrollable area, otherwise mobile Safari will start scrolling\n    // the window instead. Unfortunately, this disables bounce scrolling when at\n    // the top but it\'s the best we can do.\n\n\n    let y = e.changedTouches[0].pageY;\n    let scrollTop = scrollable.scrollTop;\n    let bottom = scrollable.scrollHeight - scrollable.clientHeight;\n\n    if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY) {\n      e.preventDefault();\n    }\n\n    lastY = y;\n  };\n\n  let onTouchEnd = e => {\n    let target = e.target;\n\n    if (target instanceof HTMLInputElement && !$ece0076f06e8a828c60ba0c94f22f89$var$nonTextInputTypes.has(target.type)) {\n      e.preventDefault(); // Apply a transform to trick Safari into thinking the input is at the top of the page\n      // so it doesn\'t try to scroll it into view. When tapping on an input, this needs to\n      // be done before the "focus" event, so we have to focus the element ourselves.\n\n      target.style.transform = \'translateY(-2000px)\';\n      target.focus();\n      requestAnimationFrame(() => {\n        target.style.transform = \'\';\n      });\n    }\n  };\n\n  let onFocus = e => {\n    let target = e.target;\n\n    if (target instanceof HTMLInputElement && !$ece0076f06e8a828c60ba0c94f22f89$var$nonTextInputTypes.has(target.type)) {\n      // Transform also needs to be applied in the focus event in cases where focus moves\n      // software keyboard. In these cases, it seems applying the transform in the focus event\n      // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️\n      target.style.transform = \'translateY(-2000px)\';\n      requestAnimationFrame(() => {\n        target.style.transform = \'\'; // This will have prevented the browser from scrolling the focused element into view,\n        // so we need to do this ourselves in a way that doesn\'t cause the whole page to scroll.\n\n        if ($ece0076f06e8a828c60ba0c94f22f89$var$visualViewport) {\n          if ($ece0076f06e8a828c60ba0c94f22f89$var$visualViewport.height < window.innerHeight) {\n            // If the keyboard is already visible, do this after one additional frame\n            // to wait for the transform to be removed.\n            requestAnimationFrame(() => {\n              $ece0076f06e8a828c60ba0c94f22f89$var$scrollIntoView(target);\n            });\n          } else {\n            // Otherwise, wait for the visual viewport to resize before scrolling so we can\n            // measure the correct position to scroll to.\n            $ece0076f06e8a828c60ba0c94f22f89$var$visualViewport.addEventListener(\'resize\', () => $ece0076f06e8a828c60ba0c94f22f89$var$scrollIntoView(target), {\n              once: true\n            });\n          }\n        }\n      });\n    }\n  };\n\n  let onWindowScroll = () => {\n    // Last resort. If the window scrolled, scroll it back to the top.\n    // It should always be at the top because the body will have a negative margin (see below).\n    window.scrollTo(0, 0);\n  }; // Record the original scroll position so we can restore it.\n  // Then apply a negative margin to the body to offset it by the scroll position. This will\n  // enable us to scroll the window to the top, which is required for the rest of this to work.\n\n\n  let scrollX = window.pageXOffset;\n  let scrollY = window.pageYOffset;\n  let restoreStyles = (0,dist_module/* chain */.tS)($ece0076f06e8a828c60ba0c94f22f89$var$setStyle(document.documentElement, \'paddingRight\', window.innerWidth - document.documentElement.clientWidth + "px"), $ece0076f06e8a828c60ba0c94f22f89$var$setStyle(document.documentElement, \'overflow\', \'hidden\'), $ece0076f06e8a828c60ba0c94f22f89$var$setStyle(document.body, \'marginTop\', "-" + scrollY + "px")); // Scroll to the top. The negative margin on the body will make this appear the same.\n\n  window.scrollTo(0, 0);\n  let removeEvents = (0,dist_module/* chain */.tS)($ece0076f06e8a828c60ba0c94f22f89$var$addEvent(document, \'touchstart\', onTouchStart, {\n    passive: false,\n    capture: true\n  }), $ece0076f06e8a828c60ba0c94f22f89$var$addEvent(document, \'touchmove\', onTouchMove, {\n    passive: false,\n    capture: true\n  }), $ece0076f06e8a828c60ba0c94f22f89$var$addEvent(document, \'touchend\', onTouchEnd, {\n    passive: false,\n    capture: true\n  }), $ece0076f06e8a828c60ba0c94f22f89$var$addEvent(document, \'focus\', onFocus, true), $ece0076f06e8a828c60ba0c94f22f89$var$addEvent(window, \'scroll\', onWindowScroll));\n  return () => {\n    // Restore styles and scroll the page back to where it was.\n    restoreStyles();\n    removeEvents();\n    window.scrollTo(scrollX, scrollY);\n  };\n} // Sets a CSS property on an element, and returns a function to revert it to the previous value.\n\n\nfunction $ece0076f06e8a828c60ba0c94f22f89$var$setStyle(element, style, value) {\n  let cur = element.style[style];\n  element.style[style] = value;\n  return () => {\n    element.style[style] = cur;\n  };\n} // Adds an event listener to an element, and returns a function to remove it.\n\n\nfunction $ece0076f06e8a828c60ba0c94f22f89$var$addEvent(target, event, handler, options) {\n  target.addEventListener(event, handler, options);\n  return () => {\n    target.removeEventListener(event, handler, options);\n  };\n}\n\nfunction $ece0076f06e8a828c60ba0c94f22f89$var$scrollIntoView(target) {\n  // Find the parent scrollable element and adjust the scroll position if the target is not already in view.\n  let scrollable = (0,dist_module/* getScrollParent */.rP)(target);\n\n  if (scrollable !== document.documentElement && scrollable !== document.body) {\n    let scrollableTop = scrollable.getBoundingClientRect().top;\n    let targetTop = target.getBoundingClientRect().top;\n\n    if (targetTop > scrollableTop + target.clientHeight) {\n      scrollable.scrollTop += targetTop - scrollableTop;\n    }\n  }\n}\n\nconst $b876e5ac9c98db373bf726bce3d604e$var$Context = /*#__PURE__*/react.createContext(null);\n/**\n * Each ModalProvider tracks how many modals are open in its subtree. On mount, the modals\n * trigger `addModal` to increment the count, and trigger `removeModal` on unmount to decrement it.\n * This is done recursively so that all parent providers are incremented and decremented.\n * If the modal count is greater than zero, we add `aria-hidden` to this provider to hide its\n * subtree from screen readers. This is done using React context in order to account for things\n * like portals, which can cause the React tree and the DOM tree to differ significantly in structure.\n */\n\n\nfunction ModalProvider(props) {\n  let {\n    children\n  } = props;\n  let parent = (0,react.useContext)($b876e5ac9c98db373bf726bce3d604e$var$Context);\n  let [modalCount, setModalCount] = (0,react.useState)(0);\n  let context = (0,react.useMemo)(() => ({\n    parent,\n    modalCount,\n\n    addModal() {\n      setModalCount(count => count + 1);\n\n      if (parent) {\n        parent.addModal();\n      }\n    },\n\n    removeModal() {\n      setModalCount(count => count - 1);\n\n      if (parent) {\n        parent.removeModal();\n      }\n    }\n\n  }), [parent, modalCount]);\n  return /*#__PURE__*/react.createElement($b876e5ac9c98db373bf726bce3d604e$var$Context.Provider, {\n    value: context\n  }, children);\n}\n\n/**\n * Used to determine if the tree should be aria-hidden based on how many\n * modals are open.\n */\nfunction useModalProvider() {\n  let context = (0,react.useContext)($b876e5ac9c98db373bf726bce3d604e$var$Context);\n  return {\n    modalProviderProps: {\n      \'aria-hidden\': context && context.modalCount > 0 ? true : null\n    }\n  };\n}\n/**\n * Creates a root node that will be aria-hidden if there are other modals open.\n */\n\nfunction $b876e5ac9c98db373bf726bce3d604e$var$OverlayContainerDOM(props) {\n  let {\n    modalProviderProps\n  } = useModalProvider();\n  return /*#__PURE__*/react.createElement("div", (0,esm_extends/* default */.Z)({}, props, modalProviderProps));\n}\n/**\n * An OverlayProvider acts as a container for the top-level application.\n * Any application that uses modal dialogs or other overlays should\n * be wrapped in a `<OverlayProvider>`. This is used to ensure that\n * the main content of the application is hidden from screen readers\n * if a modal or other overlay is opened. Only the top-most modal or\n * overlay should be accessible at once.\n */\n\n\nfunction OverlayProvider(props) {\n  return /*#__PURE__*/react.createElement(ModalProvider, null, /*#__PURE__*/react.createElement($b876e5ac9c98db373bf726bce3d604e$var$OverlayContainerDOM, props));\n}\n/**\n * A container for overlays like modals and popovers. Renders the overlay\n * into a Portal which is placed at the end of the document body.\n * Also ensures that the overlay is hidden from screen readers if a\n * nested modal is opened. Only the top-most modal or overlay should\n * be accessible at once.\n */\n\nfunction OverlayContainer(props) {\n  let contents = /*#__PURE__*/react.createElement(OverlayProvider, props);\n\n  return /*#__PURE__*/react_dom.createPortal(contents, document.body);\n}\n\n/**\n * Hides content outside the current `<OverlayContainer>` from screen readers\n * on mount and restores it on unmount. Typically used by modal dialogs and\n * other types of overlays to ensure that only the top-most modal is\n * accessible at once.\n */\nfunction useModal(options) {\n  // Add aria-hidden to all parent providers on mount, and restore on unmount.\n  let context = (0,react.useContext)($b876e5ac9c98db373bf726bce3d604e$var$Context);\n\n  if (!context) {\n    throw new Error(\'Modal is not contained within a provider\');\n  }\n\n  (0,react.useEffect)(() => {\n    if ((options == null ? void 0 : options.isDisabled) || !context || !context.parent) {\n      return;\n    } // The immediate context is from the provider containing this modal, so we only\n    // want to trigger aria-hidden on its parents not on the modal provider itself.\n\n\n    context.parent.addModal();\n    return () => {\n      if (context && context.parent) {\n        context.parent.removeModal();\n      }\n    };\n  }, [context, context.parent, options == null ? void 0 : options.isDisabled]);\n  return {\n    modalProps: {\n      \'data-ismodal\': !(options == null ? void 0 : options.isDisabled)\n    }\n  };\n}\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ar-AE.json\nvar $e325a364098e05bf51160d06dcffdbe$exports = {};\n$e325a364098e05bf51160d06dcffdbe$exports = JSON.parse("{\\"dismiss\\":\\"تجاهل\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/bg-BG.json\nvar $ab088cc547d59c1be83369f8351a064$exports = {};\n$ab088cc547d59c1be83369f8351a064$exports = JSON.parse("{\\"dismiss\\":\\"Отхвърляне\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/cs-CZ.json\nvar $cec67ea16ca47059e10ca5e77187d8c2$exports = {};\n$cec67ea16ca47059e10ca5e77187d8c2$exports = JSON.parse("{\\"dismiss\\":\\"Odstranit\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/da-DK.json\nvar $d962fe1ed718c5ca37da1414136036f8$exports = {};\n$d962fe1ed718c5ca37da1414136036f8$exports = JSON.parse("{\\"dismiss\\":\\"Luk\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/de-DE.json\nvar $c5167dda40dde69038848f007e5$exports = {};\n$c5167dda40dde69038848f007e5$exports = JSON.parse("{\\"dismiss\\":\\"Schließen\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/el-GR.json\nvar $ecdd1ac0020e47f58a9ed51b5fb$exports = {};\n$ecdd1ac0020e47f58a9ed51b5fb$exports = JSON.parse("{\\"dismiss\\":\\"Απόρριψη\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/en-US.json\nvar $f33e30a89f4dff807f90ebe8c$exports = {};\n$f33e30a89f4dff807f90ebe8c$exports = JSON.parse("{\\"dismiss\\":\\"Dismiss\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/es-ES.json\nvar $ba353e2c61dcc5141af4537eeb3ef85c$exports = {};\n$ba353e2c61dcc5141af4537eeb3ef85c$exports = JSON.parse("{\\"dismiss\\":\\"Descartar\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/et-EE.json\nvar $dd3e8aaecbf1f2c2c0f9d51aacfd$exports = {};\n$dd3e8aaecbf1f2c2c0f9d51aacfd$exports = JSON.parse("{\\"dismiss\\":\\"Lõpeta\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/fi-FI.json\nvar $f730aaed9f4652842b2a8f94a4a$exports = {};\n$f730aaed9f4652842b2a8f94a4a$exports = JSON.parse("{\\"dismiss\\":\\"Hylkää\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/fr-FR.json\nvar $e76b22aab4e46b7806205b4af9ca3$exports = {};\n$e76b22aab4e46b7806205b4af9ca3$exports = JSON.parse("{\\"dismiss\\":\\"Rejeter\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/he-IL.json\nvar $c33ffdd5a9931bfc82c1c9b55e98de2f$exports = {};\n$c33ffdd5a9931bfc82c1c9b55e98de2f$exports = JSON.parse("{\\"dismiss\\":\\"התעלם\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/hr-HR.json\nvar $d64cb70d4ce170f599f4df5adf4e9898$exports = {};\n$d64cb70d4ce170f599f4df5adf4e9898$exports = JSON.parse("{\\"dismiss\\":\\"Odbaci\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/hu-HU.json\nvar $c05270a6513a8b6d8a6552a35a162$exports = {};\n$c05270a6513a8b6d8a6552a35a162$exports = JSON.parse("{\\"dismiss\\":\\"Elutasítás\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/it-IT.json\nvar $df915df637af1f3c14c8376c69dfd$exports = {};\n$df915df637af1f3c14c8376c69dfd$exports = JSON.parse("{\\"dismiss\\":\\"Ignora\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ja-JP.json\nvar $e8bf1e6480d2c65d558c3537ec0d59ce$exports = {};\n$e8bf1e6480d2c65d558c3537ec0d59ce$exports = JSON.parse("{\\"dismiss\\":\\"閉じる\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ko-KR.json\nvar $e06e93e1c9472a7e2fc5b26a87ea7$exports = {};\n$e06e93e1c9472a7e2fc5b26a87ea7$exports = JSON.parse("{\\"dismiss\\":\\"무시\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/lt-LT.json\nvar $fef82498418eab30c69349263b64e050$exports = {};\n$fef82498418eab30c69349263b64e050$exports = JSON.parse("{\\"dismiss\\":\\"Atmesti\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/lv-LV.json\nvar $c4df2502cb7b65c6578bcb8a165f6fc$exports = {};\n$c4df2502cb7b65c6578bcb8a165f6fc$exports = JSON.parse("{\\"dismiss\\":\\"Nerādīt\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/nb-NO.json\nvar $b50f4e499c19f4d55113139bba$exports = {};\n$b50f4e499c19f4d55113139bba$exports = JSON.parse("{\\"dismiss\\":\\"Lukk\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/nl-NL.json\nvar $e45d2f0079f29e4f5c6469cca7c$exports = {};\n$e45d2f0079f29e4f5c6469cca7c$exports = JSON.parse("{\\"dismiss\\":\\"Negeren\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/pl-PL.json\nvar $fcb5bfa87b2378a249bd7fb591ec22c2$exports = {};\n$fcb5bfa87b2378a249bd7fb591ec22c2$exports = JSON.parse("{\\"dismiss\\":\\"Zignoruj\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/pt-BR.json\nvar $edae5c6f18c937cf0015f2aa266d9fea$exports = {};\n$edae5c6f18c937cf0015f2aa266d9fea$exports = JSON.parse("{\\"dismiss\\":\\"Descartar\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/pt-PT.json\nvar $c016edcd88f37a017208da7518133d$exports = {};\n$c016edcd88f37a017208da7518133d$exports = JSON.parse("{\\"dismiss\\":\\"Dispensar\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ro-RO.json\nvar $df1162b231d383d942e0fdb2bbf$exports = {};\n$df1162b231d383d942e0fdb2bbf$exports = JSON.parse("{\\"dismiss\\":\\"Revocare\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/ru-RU.json\nvar $fa17537bfd201c57fa41fd31dbd9f074$exports = {};\n$fa17537bfd201c57fa41fd31dbd9f074$exports = JSON.parse("{\\"dismiss\\":\\"Пропустить\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sk-SK.json\nvar $c30db5bcff54a9e266ee7379a6cb8$exports = {};\n$c30db5bcff54a9e266ee7379a6cb8$exports = JSON.parse("{\\"dismiss\\":\\"Zrušiť\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sl-SI.json\nvar $c86d8cad7c0045ad51a1fea185411a61$exports = {};\n$c86d8cad7c0045ad51a1fea185411a61$exports = JSON.parse("{\\"dismiss\\":\\"Opusti\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sr-SP.json\nvar $c610b0b50ebc0061e6c42c420a2e1be$exports = {};\n$c610b0b50ebc0061e6c42c420a2e1be$exports = JSON.parse("{\\"dismiss\\":\\"Odbaci\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/sv-SE.json\nvar $c298c5c92c55ce8d8289d8cc18ea512$exports = {};\n$c298c5c92c55ce8d8289d8cc18ea512$exports = JSON.parse("{\\"dismiss\\":\\"Avvisa\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/tr-TR.json\nvar $f438196d9674b9d180ea6e74d7$exports = {};\n$f438196d9674b9d180ea6e74d7$exports = JSON.parse("{\\"dismiss\\":\\"Kapat\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/uk-UA.json\nvar $fa842ebaf07187d5bc74e0fa6c4679b$exports = {};\n$fa842ebaf07187d5bc74e0fa6c4679b$exports = JSON.parse("{\\"dismiss\\":\\"Скасувати\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/zh-CN.json\nvar $cdcbe39f22ae1814551e7f30dcfc8$exports = {};\n$cdcbe39f22ae1814551e7f30dcfc8$exports = JSON.parse("{\\"dismiss\\":\\"取消\\"}");\n// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/overlays/intl/zh-TW.json\nvar $a8c729d90cde82a4eb34bebfb46a6$exports = {};\n$a8c729d90cde82a4eb34bebfb46a6$exports = JSON.parse("{\\"dismiss\\":\\"關閉\\"}");\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// @ts-ignore\nconst $c94f95b3263b356bb2e58a3832a84$var$intlMessages = {\n  "ar-AE": _interopRequireDefault($e325a364098e05bf51160d06dcffdbe$exports).default,\n  "bg-BG": _interopRequireDefault($ab088cc547d59c1be83369f8351a064$exports).default,\n  "cs-CZ": _interopRequireDefault($cec67ea16ca47059e10ca5e77187d8c2$exports).default,\n  "da-DK": _interopRequireDefault($d962fe1ed718c5ca37da1414136036f8$exports).default,\n  "de-DE": _interopRequireDefault($c5167dda40dde69038848f007e5$exports).default,\n  "el-GR": _interopRequireDefault($ecdd1ac0020e47f58a9ed51b5fb$exports).default,\n  "en-US": _interopRequireDefault($f33e30a89f4dff807f90ebe8c$exports).default,\n  "es-ES": _interopRequireDefault($ba353e2c61dcc5141af4537eeb3ef85c$exports).default,\n  "et-EE": _interopRequireDefault($dd3e8aaecbf1f2c2c0f9d51aacfd$exports).default,\n  "fi-FI": _interopRequireDefault($f730aaed9f4652842b2a8f94a4a$exports).default,\n  "fr-FR": _interopRequireDefault($e76b22aab4e46b7806205b4af9ca3$exports).default,\n  "he-IL": _interopRequireDefault($c33ffdd5a9931bfc82c1c9b55e98de2f$exports).default,\n  "hr-HR": _interopRequireDefault($d64cb70d4ce170f599f4df5adf4e9898$exports).default,\n  "hu-HU": _interopRequireDefault($c05270a6513a8b6d8a6552a35a162$exports).default,\n  "it-IT": _interopRequireDefault($df915df637af1f3c14c8376c69dfd$exports).default,\n  "ja-JP": _interopRequireDefault($e8bf1e6480d2c65d558c3537ec0d59ce$exports).default,\n  "ko-KR": _interopRequireDefault($e06e93e1c9472a7e2fc5b26a87ea7$exports).default,\n  "lt-LT": _interopRequireDefault($fef82498418eab30c69349263b64e050$exports).default,\n  "lv-LV": _interopRequireDefault($c4df2502cb7b65c6578bcb8a165f6fc$exports).default,\n  "nb-NO": _interopRequireDefault($b50f4e499c19f4d55113139bba$exports).default,\n  "nl-NL": _interopRequireDefault($e45d2f0079f29e4f5c6469cca7c$exports).default,\n  "pl-PL": _interopRequireDefault($fcb5bfa87b2378a249bd7fb591ec22c2$exports).default,\n  "pt-BR": _interopRequireDefault($edae5c6f18c937cf0015f2aa266d9fea$exports).default,\n  "pt-PT": _interopRequireDefault($c016edcd88f37a017208da7518133d$exports).default,\n  "ro-RO": _interopRequireDefault($df1162b231d383d942e0fdb2bbf$exports).default,\n  "ru-RU": _interopRequireDefault($fa17537bfd201c57fa41fd31dbd9f074$exports).default,\n  "sk-SK": _interopRequireDefault($c30db5bcff54a9e266ee7379a6cb8$exports).default,\n  "sl-SI": _interopRequireDefault($c86d8cad7c0045ad51a1fea185411a61$exports).default,\n  "sr-SP": _interopRequireDefault($c610b0b50ebc0061e6c42c420a2e1be$exports).default,\n  "sv-SE": _interopRequireDefault($c298c5c92c55ce8d8289d8cc18ea512$exports).default,\n  "tr-TR": _interopRequireDefault($f438196d9674b9d180ea6e74d7$exports).default,\n  "uk-UA": _interopRequireDefault($fa842ebaf07187d5bc74e0fa6c4679b$exports).default,\n  "zh-CN": _interopRequireDefault($cdcbe39f22ae1814551e7f30dcfc8$exports).default,\n  "zh-TW": _interopRequireDefault($a8c729d90cde82a4eb34bebfb46a6$exports).default\n};\n\n/**\n * A visually hidden button that can be used to allow screen reader\n * users to dismiss a modal or popup when there is no visual\n * affordance to do so.\n */\nfunction DismissButton(props) {\n  let {\n    onDismiss\n  } = props;\n  let formatMessage = useMessageFormatter($c94f95b3263b356bb2e58a3832a84$var$intlMessages);\n\n  let onClick = () => {\n    if (onDismiss) {\n      onDismiss();\n    }\n  };\n\n  return /*#__PURE__*/react.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /*#__PURE__*/react.createElement("button", {\n    tabIndex: -1,\n    "aria-label": formatMessage(\'dismiss\'),\n    onClick: onClick\n  }));\n}\n// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.\nlet $d006cf2ec48f5151923b9435b3d$var$refCountMap = new WeakMap();\n/**\n * Hides all elements in the DOM outside the given targets from screen readers using aria-hidden,\n * and returns a function to revert these changes. In addition, changes to the DOM are watched\n * and new elements outside the targets are automatically hidden.\n * @param targets - The elements that should remain visible.\n * @param root - Nothing will be hidden above this element.\n * @returns - A function to restore all hidden elements.\n */\n\nfunction ariaHideOutside(targets, root) {\n  if (root === void 0) {\n    root = document.body;\n  }\n\n  let visibleNodes = new Set(targets);\n  let hiddenNodes = new Set();\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      // If this node is a live announcer, add it to the set of nodes to keep visible.\n      if (node instanceof HTMLElement && node.dataset.liveAnnouncer === \'true\') {\n        visibleNodes.add(node);\n      } // Skip this node and its children if it is one of the target nodes, or a live announcer.\n      // Also skip children of already hidden nodes, as aria-hidden is recursive.\n\n\n      if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement)) {\n        return NodeFilter.FILTER_REJECT;\n      } // VoiceOver on iOS has issues hiding elements with role="row". Hide the cells inside instead.\n      // https://bugs.webkit.org/show_bug.cgi?id=222623\n\n\n      if (node instanceof HTMLElement && node.getAttribute(\'role\') === \'row\') {\n        return NodeFilter.FILTER_SKIP;\n      } // Skip this node but continue to children if one of the targets is inside the node.\n\n\n      if (targets.some(target => node.contains(target))) {\n        return NodeFilter.FILTER_SKIP;\n      }\n\n      return NodeFilter.FILTER_ACCEPT;\n    }\n\n  });\n\n  let hide = node => {\n    var _refCountMap$get;\n\n    let refCount = (_refCountMap$get = $d006cf2ec48f5151923b9435b3d$var$refCountMap.get(node)) != null ? _refCountMap$get : 0; // If already aria-hidden, and the ref count is zero, then this element\n    // was already hidden and there\'s nothing for us to do.\n\n    if (node.getAttribute(\'aria-hidden\') === \'true\' && refCount === 0) {\n      return;\n    }\n\n    if (refCount === 0) {\n      node.setAttribute(\'aria-hidden\', \'true\');\n    }\n\n    hiddenNodes.add(node);\n    $d006cf2ec48f5151923b9435b3d$var$refCountMap.set(node, refCount + 1);\n  };\n\n  let node = walker.nextNode();\n\n  while (node != null) {\n    hide(node);\n    node = walker.nextNode();\n  }\n\n  let observer = new MutationObserver(changes => {\n    for (let change of changes) {\n      if (change.type !== \'childList\' || change.addedNodes.length === 0) {\n        continue;\n      } // If the parent element of the added nodes is not within one of the targets,\n      // and not already inside a hidden node, hide all of the new children.\n\n\n      if (![...visibleNodes, ...hiddenNodes].some(node => node.contains(change.target))) {\n        for (let node of change.addedNodes) {\n          if (node instanceof HTMLElement && node.dataset.liveAnnouncer === \'true\') {\n            visibleNodes.add(node);\n          } else if (node instanceof Element) {\n            hide(node);\n          }\n        }\n      }\n    }\n  });\n  observer.observe(root, {\n    childList: true,\n    subtree: true\n  });\n  return () => {\n    observer.disconnect();\n\n    for (let node of hiddenNodes) {\n      let count = $d006cf2ec48f5151923b9435b3d$var$refCountMap.get(node);\n\n      if (count === 1) {\n        node.removeAttribute(\'aria-hidden\');\n        $d006cf2ec48f5151923b9435b3d$var$refCountMap.delete(node);\n      } else {\n        $d006cf2ec48f5151923b9435b3d$var$refCountMap.set(node, count - 1);\n      }\n    }\n  };\n}\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1925\n')},8831:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gP\": function() { return /* binding */ $704cf1d3b684cc5c$export$619500959fc48b26; },\n/* harmony export */   \"Av\": function() { return /* binding */ $704cf1d3b684cc5c$export$535bd6ca7f90a273; }\n/* harmony export */ });\n/* unused harmony export SSRProvider */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst $704cf1d3b684cc5c$var$defaultContext = {\n    prefix: String(Math.round(Math.random() * 10000000000)),\n    current: 0\n};\nconst $704cf1d3b684cc5c$var$SSRContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext($704cf1d3b684cc5c$var$defaultContext);\nfunction $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {\n    let cur = $89yE2$useContext($704cf1d3b684cc5c$var$SSRContext);\n    let value = $89yE2$useMemo(()=>({\n            // If this is the first SSRProvider, start with an empty string prefix, otherwise\n            // append and increment the counter.\n            prefix: cur === $704cf1d3b684cc5c$var$defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n            current: 0\n        })\n    , [\n        cur\n    ]);\n    return(/*#__PURE__*/ $89yE2$react.createElement($704cf1d3b684cc5c$var$SSRContext.Provider, {\n        value: value\n    }, props.children));\n}\nlet $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction $704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {\n    let ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)($704cf1d3b684cc5c$var$SSRContext);\n    // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n    // provide a warning to hint to the developer to add one.\n    if (ctx === $704cf1d3b684cc5c$var$defaultContext && !$704cf1d3b684cc5c$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>defaultId || `react-aria${ctx.prefix}-${++ctx.current}`\n    , [\n        defaultId\n    ]);\n}\nfunction $704cf1d3b684cc5c$export$535bd6ca7f90a273() {\n    let cur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)($704cf1d3b684cc5c$var$SSRContext);\n    let isInSSRContext = cur !== $704cf1d3b684cc5c$var$defaultContext;\n    let [isSSR, setIsSSR] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isInSSRContext);\n    // If on the client, and the component was initially server rendered,\n    // then schedule a layout effect to update the component after hydration.\n    if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        setIsSSR(false);\n    }, []);\n    return isSSR;\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AcmVhY3QtYXJpYS9zc3IvZGlzdC9tb2R1bGUuanM/ZmE1MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUs7OztBQUd2SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsZ0RBQTBCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsV0FBVyxHQUFHLGNBQWM7QUFDdkc7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlEQUFpQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOENBQWMsK0JBQStCLFdBQVcsR0FBRyxjQUFjO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlEQUFpQjtBQUMvQjtBQUNBLDRCQUE0QiwrQ0FBZTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBc0I7QUFDMUI7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7Ozs7QUFLb0w7QUFDcEwiLCJmaWxlIjoiODgzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAkODl5RTIkcmVhY3QsIHt1c2VDb250ZXh0IGFzICQ4OXlFMiR1c2VDb250ZXh0LCB1c2VNZW1vIGFzICQ4OXlFMiR1c2VNZW1vLCB1c2VTdGF0ZSBhcyAkODl5RTIkdXNlU3RhdGUsIHVzZUxheW91dEVmZmVjdCBhcyAkODl5RTIkdXNlTGF5b3V0RWZmZWN0fSBmcm9tIFwicmVhY3RcIjtcblxuXG4vLyBEZWZhdWx0IGNvbnRleHQgdmFsdWUgdG8gdXNlIGluIGNhc2UgdGhlcmUgaXMgbm8gU1NSUHJvdmlkZXIuIFRoaXMgaXMgZmluZSBmb3Jcbi8vIGNsaWVudC1vbmx5IGFwcHMuIEluIG9yZGVyIHRvIHN1cHBvcnQgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IEFyaWEgcG90ZW50aWFsbHlcbi8vIGJlaW5nIG9uIHRoZSBwYWdlIGF0IG9uY2UsIHRoZSBwcmVmaXggaXMgc2V0IHRvIGEgcmFuZG9tIG51bWJlci4gU1NSUHJvdmlkZXJcbi8vIHdpbGwgcmVzZXQgdGhpcyB0byB6ZXJvIGZvciBjb25zaXN0ZW5jeSBiZXR3ZWVuIHNlcnZlciBhbmQgY2xpZW50LCBzbyBpbiB0aGVcbi8vIFNTUiBjYXNlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBBcmlhIGlzIG5vdCBzdXBwb3J0ZWQuXG5jb25zdCAkNzA0Y2YxZDNiNjg0Y2M1YyR2YXIkZGVmYXVsdENvbnRleHQgPSB7XG4gICAgcHJlZml4OiBTdHJpbmcoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMDApKSxcbiAgICBjdXJyZW50OiAwXG59O1xuY29uc3QgJDcwNGNmMWQzYjY4NGNjNWMkdmFyJFNTUkNvbnRleHQgPSAvKiNfX1BVUkVfXyovICQ4OXlFMiRyZWFjdC5jcmVhdGVDb250ZXh0KCQ3MDRjZjFkM2I2ODRjYzVjJHZhciRkZWZhdWx0Q29udGV4dCk7XG5mdW5jdGlvbiAkNzA0Y2YxZDNiNjg0Y2M1YyRleHBvcnQkOWY4YWM5NmFmNGIxYjJhZShwcm9wcykge1xuICAgIGxldCBjdXIgPSAkODl5RTIkdXNlQ29udGV4dCgkNzA0Y2YxZDNiNjg0Y2M1YyR2YXIkU1NSQ29udGV4dCk7XG4gICAgbGV0IHZhbHVlID0gJDg5eUUyJHVzZU1lbW8oKCk9Pih7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBTU1JQcm92aWRlciwgc3RhcnQgd2l0aCBhbiBlbXB0eSBzdHJpbmcgcHJlZml4LCBvdGhlcndpc2VcbiAgICAgICAgICAgIC8vIGFwcGVuZCBhbmQgaW5jcmVtZW50IHRoZSBjb3VudGVyLlxuICAgICAgICAgICAgcHJlZml4OiBjdXIgPT09ICQ3MDRjZjFkM2I2ODRjYzVjJHZhciRkZWZhdWx0Q29udGV4dCA/ICcnIDogYCR7Y3VyLnByZWZpeH0tJHsrK2N1ci5jdXJyZW50fWAsXG4gICAgICAgICAgICBjdXJyZW50OiAwXG4gICAgICAgIH0pXG4gICAgLCBbXG4gICAgICAgIGN1clxuICAgIF0pO1xuICAgIHJldHVybigvKiNfX1BVUkVfXyovICQ4OXlFMiRyZWFjdC5jcmVhdGVFbGVtZW50KCQ3MDRjZjFkM2I2ODRjYzVjJHZhciRTU1JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0sIHByb3BzLmNoaWxkcmVuKSk7XG59XG5sZXQgJDcwNGNmMWQzYjY4NGNjNWMkdmFyJGNhblVzZURPTSA9IEJvb2xlYW4odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uICQ3MDRjZjFkM2I2ODRjYzVjJGV4cG9ydCQ2MTk1MDA5NTlmYzQ4YjI2KGRlZmF1bHRJZCkge1xuICAgIGxldCBjdHggPSAkODl5RTIkdXNlQ29udGV4dCgkNzA0Y2YxZDNiNjg0Y2M1YyR2YXIkU1NSQ29udGV4dCk7XG4gICAgLy8gSWYgd2UgYXJlIHJlbmRlcmluZyBpbiBhIG5vbi1ET00gZW52aXJvbm1lbnQsIGFuZCB0aGVyZSdzIG5vIFNTUlByb3ZpZGVyLFxuICAgIC8vIHByb3ZpZGUgYSB3YXJuaW5nIHRvIGhpbnQgdG8gdGhlIGRldmVsb3BlciB0byBhZGQgb25lLlxuICAgIGlmIChjdHggPT09ICQ3MDRjZjFkM2I2ODRjYzVjJHZhciRkZWZhdWx0Q29udGV4dCAmJiAhJDcwNGNmMWQzYjY4NGNjNWMkdmFyJGNhblVzZURPTSkgY29uc29sZS53YXJuKCdXaGVuIHNlcnZlciByZW5kZXJpbmcsIHlvdSBtdXN0IHdyYXAgeW91ciBhcHBsaWNhdGlvbiBpbiBhbiA8U1NSUHJvdmlkZXI+IHRvIGVuc3VyZSBjb25zaXN0ZW50IGlkcyBhcmUgZ2VuZXJhdGVkIGJldHdlZW4gdGhlIGNsaWVudCBhbmQgc2VydmVyLicpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICByZXR1cm4gJDg5eUUyJHVzZU1lbW8oKCk9PmRlZmF1bHRJZCB8fCBgcmVhY3QtYXJpYSR7Y3R4LnByZWZpeH0tJHsrK2N0eC5jdXJyZW50fWBcbiAgICAsIFtcbiAgICAgICAgZGVmYXVsdElkXG4gICAgXSk7XG59XG5mdW5jdGlvbiAkNzA0Y2YxZDNiNjg0Y2M1YyRleHBvcnQkNTM1YmQ2Y2E3ZjkwYTI3MygpIHtcbiAgICBsZXQgY3VyID0gJDg5eUUyJHVzZUNvbnRleHQoJDcwNGNmMWQzYjY4NGNjNWMkdmFyJFNTUkNvbnRleHQpO1xuICAgIGxldCBpc0luU1NSQ29udGV4dCA9IGN1ciAhPT0gJDcwNGNmMWQzYjY4NGNjNWMkdmFyJGRlZmF1bHRDb250ZXh0O1xuICAgIGxldCBbaXNTU1IsIHNldElzU1NSXSA9ICQ4OXlFMiR1c2VTdGF0ZShpc0luU1NSQ29udGV4dCk7XG4gICAgLy8gSWYgb24gdGhlIGNsaWVudCwgYW5kIHRoZSBjb21wb25lbnQgd2FzIGluaXRpYWxseSBzZXJ2ZXIgcmVuZGVyZWQsXG4gICAgLy8gdGhlbiBzY2hlZHVsZSBhIGxheW91dCBlZmZlY3QgdG8gdXBkYXRlIHRoZSBjb21wb25lbnQgYWZ0ZXIgaHlkcmF0aW9uLlxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luU1NSQ29udGV4dCkgLy8gVGhpcyBpZiBzdGF0ZW1lbnQgdGVjaG5pY2FsbHkgYnJlYWtzIHRoZSBydWxlcyBvZiBob29rcywgYnV0IGlzIHNhZmVcbiAgICAvLyBiZWNhdXNlIHRoZSBjb25kaXRpb24gbmV2ZXIgY2hhbmdlcyBhZnRlciBtb3VudGluZy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAkODl5RTIkdXNlTGF5b3V0RWZmZWN0KCgpPT57XG4gICAgICAgIHNldElzU1NSKGZhbHNlKTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGlzU1NSO1xufVxuXG5cblxuXG5leHBvcnQgeyQ3MDRjZjFkM2I2ODRjYzVjJGV4cG9ydCQ5ZjhhYzk2YWY0YjFiMmFlIGFzIFNTUlByb3ZpZGVyLCAkNzA0Y2YxZDNiNjg0Y2M1YyRleHBvcnQkNjE5NTAwOTU5ZmM0OGIyNiBhcyB1c2VTU1JTYWZlSWQsICQ3MDRjZjFkM2I2ODRjYzVjJGV4cG9ydCQ1MzViZDZjYTdmOTBhMjczIGFzIHVzZUlzU1NSfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8831\n")},3952:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Me\": function() { return /* binding */ $bdb11010cef70236$export$f680877a34711e37; },\n/* harmony export */   \"mp\": function() { return /* binding */ $bdb11010cef70236$export$b4cc09c592e8fdb8; },\n/* harmony export */   \"tS\": function() { return /* binding */ $ff5963eb1fccf552$export$e08e3b67e392101e; },\n/* harmony export */   \"dG\": function() { return /* binding */ $3ef42575df84b30b$export$9d1611c77c2fe928; },\n/* harmony export */   \"zL\": function() { return /* binding */ $65484d02dcb7eb3e$export$457c3d6518dd4c6f; },\n/* harmony export */   \"Ao\": function() { return /* binding */ $7215afc6de606d6b$export$de79e2c695e052f3; },\n/* harmony export */   \"QB\": function() { return /* binding */ $bbed8b41f857bcc0$export$24490316f764c430; },\n/* harmony export */   \"bt\": function() { return /* binding */ $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c; },\n/* harmony export */   \"lE\": function() { return /* binding */ $e7801be82b4b2a53$export$4debdb1a3f0fa79e; },\n/* harmony export */   \"rP\": function() { return /* binding */ $62d8ded9296f3872$export$cfa2225e87938781; },\n/* harmony export */   \"V5\": function() { return /* binding */ $c87311424ea30a05$export$9ac100e40613ea10; },\n/* harmony export */   \"gn\": function() { return /* binding */ $c87311424ea30a05$export$fedb369cb70207f1; },\n/* harmony export */   \"Zj\": function() { return /* binding */ $6a7db85432448f7f$export$60278871457622de; }\n/* harmony export */ });\n/* unused harmony exports mergeIds, mergeRefs, getOffset, useDrag1D, useGlobalListeners, useLabels, useObjectRef, useUpdateEffect, useResizeObserver, useViewportSize, useDescription, isIPhone, isIPad, isAppleDevice, isWebKit, isChrome, isAndroid, useEvent, useValueEffect, scrollIntoView, isVirtualPointerEvent */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _react_aria_ssr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8831);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6010);\n\n\n\n\n\n\n\nconst $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : ()=>{\n};\n\n\n\n\nlet $bdb11010cef70236$var$idsUpdaterMap = new Map();\nfunction $bdb11010cef70236$export$f680877a34711e37(defaultId) {\n    let [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultId);\n    let nextId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    let res = (0,_react_aria_ssr__WEBPACK_IMPORTED_MODULE_2__/* .useSSRSafeId */ .gP)(value);\n    let updateValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((val)=>{\n        nextId.current = val;\n    }, []);\n    $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);\n    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(()=>{\n        let r = res;\n        return ()=>{\n            $bdb11010cef70236$var$idsUpdaterMap.delete(r);\n        };\n    }, [\n        res\n    ]);\n    // This cannot cause an infinite loop because the ref is updated first.\n    // eslint-disable-next-line\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let newId = nextId.current;\n        if (newId) {\n            nextId.current = null;\n            setValue(newId);\n        }\n    });\n    return res;\n}\nfunction $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {\n    if (idA === idB) return idA;\n    let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);\n    if (setIdA) {\n        setIdA(idB);\n        return idB;\n    }\n    let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);\n    if (setIdB) {\n        setIdB(idA);\n        return idA;\n    }\n    return idB;\n}\nfunction $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {\n    let id = $bdb11010cef70236$export$f680877a34711e37();\n    let [resolvedId, setResolvedId] = $1dbecbe27a04f9af$export$14d238f342723f25(id);\n    let updateId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setResolvedId(function*() {\n            yield id;\n            yield document.getElementById(id) ? id : undefined;\n        });\n    }, [\n        id,\n        setResolvedId\n    ]);\n    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updateId, [\n        id,\n        updateId,\n        ...depArray\n    ]);\n    return resolvedId;\n}\n\n\nfunction $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {\n    return (...args)=>{\n        for (let callback of callbacks)if (typeof callback === 'function') callback(...args);\n    };\n}\n\n\n\n\n\nfunction $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {\n    // Start with a base clone of the first argument. This is a lot faster than starting\n    // with an empty object and adding properties as we go.\n    let result = {\n        ...args[0]\n    };\n    for(let i = 1; i < args.length; i++){\n        let props = args[i];\n        for(let key in props){\n            let a = result[key];\n            let b = props[key];\n            // Chain events\n            if (typeof a === 'function' && typeof b === 'function' && // This is a lot faster than a regex.\n            key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >= /* 'A' */ 65 && key.charCodeAt(2) <= /* 'Z' */ 90) result[key] = $ff5963eb1fccf552$export$e08e3b67e392101e(a, b);\n            else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') result[key] = (0,clsx__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(a, b);\n            else if (key === 'id' && a && b) result.id = $bdb11010cef70236$export$cd8c9cb68f842629(a, b);\n            else result[key] = b !== undefined ? b : a;\n        }\n    }\n    return result;\n}\n\n\nfunction $5dc95899b306f630$export$c9058316764c140e(...refs) {\n    return (value)=>{\n        for (let ref of refs){\n            if (typeof ref === 'function') ref(value);\n            else if (ref != null) ref.current = value;\n        }\n    };\n}\n\n\nconst $65484d02dcb7eb3e$var$DOMPropNames = new Set([\n    'id'\n]);\nconst $65484d02dcb7eb3e$var$labelablePropNames = new Set([\n    'aria-label',\n    'aria-labelledby',\n    'aria-describedby',\n    'aria-details'\n]);\nconst $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;\nfunction $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {\n}) {\n    let { labelable: labelable , propNames: propNames  } = opts;\n    let filteredProps = {\n    };\n    for(const prop in props)if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];\n    return filteredProps;\n}\n\n\nfunction $7215afc6de606d6b$export$de79e2c695e052f3(element) {\n    if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({\n        preventScroll: true\n    });\n    else {\n        let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);\n        element.focus();\n        $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);\n    }\n}\nlet $7215afc6de606d6b$var$supportsPreventScrollCached = null;\nfunction $7215afc6de606d6b$var$supportsPreventScroll() {\n    if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {\n        $7215afc6de606d6b$var$supportsPreventScrollCached = false;\n        try {\n            var focusElem = document.createElement('div');\n            focusElem.focus({\n                get preventScroll () {\n                    $7215afc6de606d6b$var$supportsPreventScrollCached = true;\n                    return true;\n                }\n            });\n        } catch (e) {\n        // Ignore\n        }\n    }\n    return $7215afc6de606d6b$var$supportsPreventScrollCached;\n}\nfunction $7215afc6de606d6b$var$getScrollableElements(element) {\n    var parent = element.parentNode;\n    var scrollableElements = [];\n    var rootScrollingElement = document.scrollingElement || document.documentElement;\n    while(parent instanceof HTMLElement && parent !== rootScrollingElement){\n        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({\n            element: parent,\n            scrollTop: parent.scrollTop,\n            scrollLeft: parent.scrollLeft\n        });\n        parent = parent.parentNode;\n    }\n    if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({\n        element: rootScrollingElement,\n        scrollTop: rootScrollingElement.scrollTop,\n        scrollLeft: rootScrollingElement.scrollLeft\n    });\n    return scrollableElements;\n}\nfunction $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {\n    for (let { element: element , scrollTop: scrollTop , scrollLeft: scrollLeft  } of scrollableElements){\n        element.scrollTop = scrollTop;\n        element.scrollLeft = scrollLeft;\n    }\n}\n\n\nfunction $ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = 'horizontal') {\n    let rect = element.getBoundingClientRect();\n    if (reverse) return orientation === 'horizontal' ? rect.right : rect.bottom;\n    return orientation === 'horizontal' ? rect.left : rect.top;\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // We store a global list of elements that are currently transitioning,\n// mapped to a set of CSS properties that are transitioning for that element.\n// This is necessary rather than a simple count of transitions because of browser\n// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather\n// than one or the other. So we need to track what's actually transitioning so that\n// we can ignore these duplicate events.\nlet $bbed8b41f857bcc0$var$transitionsByElement = new Map();\n// A list of callbacks to call once there are no transitioning elements.\nlet $bbed8b41f857bcc0$var$transitionCallbacks = new Set();\nfunction $bbed8b41f857bcc0$var$setupGlobalEvents() {\n    if (typeof window === 'undefined') return;\n    let onTransitionStart = (e)=>{\n        // Add the transitioning property to the list for this element.\n        let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);\n        if (!transitions) {\n            transitions = new Set();\n            $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);\n            // The transitioncancel event must be registered on the element itself, rather than as a global\n            // event. This enables us to handle when the node is deleted from the document while it is transitioning.\n            // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.\n            e.target.addEventListener('transitioncancel', onTransitionEnd);\n        }\n        transitions.add(e.propertyName);\n    };\n    let onTransitionEnd = (e)=>{\n        // Remove property from list of transitioning properties.\n        let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);\n        if (!properties) return;\n        properties.delete(e.propertyName);\n        // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.\n        if (properties.size === 0) {\n            e.target.removeEventListener('transitioncancel', onTransitionEnd);\n            $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);\n        }\n        // If no transitioning elements, call all of the queued callbacks.\n        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {\n            for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)cb();\n            $bbed8b41f857bcc0$var$transitionCallbacks.clear();\n        }\n    };\n    document.body.addEventListener('transitionrun', onTransitionStart);\n    document.body.addEventListener('transitionend', onTransitionEnd);\n}\nif (typeof document !== 'undefined') {\n    if (document.readyState !== 'loading') $bbed8b41f857bcc0$var$setupGlobalEvents();\n    else document.addEventListener('DOMContentLoaded', $bbed8b41f857bcc0$var$setupGlobalEvents);\n}\nfunction $bbed8b41f857bcc0$export$24490316f764c430(fn) {\n    // Wait one frame to see if an animation starts, e.g. a transition on mount.\n    requestAnimationFrame(()=>{\n        // If no transitions are running, call the function immediately.\n        // Otherwise, add it to a list of callbacks to run at the end of the animation.\n        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();\n        else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);\n    });\n}\n\n\n\n\n// Keep track of elements that we are currently handling dragging for via useDrag1D.\n// If there's an ancestor and a descendant both using useDrag1D(), and the user starts\n// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.\nconst $9cc09df9fd7676be$var$draggingElements = (/* unused pure expression or super */ null && ([]));\nfunction $9cc09df9fd7676be$export$7bbed75feba39706(props) {\n    console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');\n    let { containerRef: containerRef , reverse: reverse , orientation: orientation , onHover: onHover , onDrag: onDrag , onPositionChange: onPositionChange , onIncrement: onIncrement , onDecrement: onDecrement , onIncrementToMax: onIncrementToMax , onDecrementToMin: onDecrementToMin , onCollapseToggle: onCollapseToggle  } = props;\n    let getPosition = (e)=>orientation === 'horizontal' ? e.clientX : e.clientY\n    ;\n    let getNextOffset = (e)=>{\n        let containerOffset = $ab71dadb03a6fb2e$export$622cea445a1c5b7d(containerRef.current, reverse, orientation);\n        let mouseOffset = getPosition(e);\n        let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;\n        return nextOffset;\n    };\n    let dragging = $12uGp$useRef(false);\n    let prevPosition = $12uGp$useRef(0);\n    // Keep track of the current handlers in a ref so that the events can access them.\n    let handlers = $12uGp$useRef({\n        onPositionChange: onPositionChange,\n        onDrag: onDrag\n    });\n    handlers.current.onDrag = onDrag;\n    handlers.current.onPositionChange = onPositionChange;\n    let onMouseDragged = (e)=>{\n        e.preventDefault();\n        let nextOffset = getNextOffset(e);\n        if (!dragging.current) {\n            dragging.current = true;\n            if (handlers.current.onDrag) handlers.current.onDrag(true);\n            if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);\n        }\n        if (prevPosition.current === nextOffset) return;\n        prevPosition.current = nextOffset;\n        if (onPositionChange) onPositionChange(nextOffset);\n    };\n    let onMouseUp = (e)=>{\n        const target = e.target;\n        dragging.current = false;\n        let nextOffset = getNextOffset(e);\n        if (handlers.current.onDrag) handlers.current.onDrag(false);\n        if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);\n        $9cc09df9fd7676be$var$draggingElements.splice($9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);\n        window.removeEventListener('mouseup', onMouseUp, false);\n        window.removeEventListener('mousemove', onMouseDragged, false);\n    };\n    let onMouseDown = (e)=>{\n        const target = e.currentTarget;\n        // If we're already handling dragging on a descendant with useDrag1D, then\n        // we don't want to handle the drag motion on this target as well.\n        if ($9cc09df9fd7676be$var$draggingElements.some((elt)=>target.contains(elt)\n        )) return;\n        $9cc09df9fd7676be$var$draggingElements.push(target);\n        window.addEventListener('mousemove', onMouseDragged, false);\n        window.addEventListener('mouseup', onMouseUp, false);\n    };\n    let onMouseEnter = ()=>{\n        if (onHover) onHover(true);\n    };\n    let onMouseOut = ()=>{\n        if (onHover) onHover(false);\n    };\n    let onKeyDown = (e)=>{\n        switch(e.key){\n            case 'Left':\n            case 'ArrowLeft':\n                if (orientation === 'horizontal') {\n                    e.preventDefault();\n                    if (onDecrement && !reverse) onDecrement();\n                    else if (onIncrement && reverse) onIncrement();\n                }\n                break;\n            case 'Up':\n            case 'ArrowUp':\n                if (orientation === 'vertical') {\n                    e.preventDefault();\n                    if (onDecrement && !reverse) onDecrement();\n                    else if (onIncrement && reverse) onIncrement();\n                }\n                break;\n            case 'Right':\n            case 'ArrowRight':\n                if (orientation === 'horizontal') {\n                    e.preventDefault();\n                    if (onIncrement && !reverse) onIncrement();\n                    else if (onDecrement && reverse) onDecrement();\n                }\n                break;\n            case 'Down':\n            case 'ArrowDown':\n                if (orientation === 'vertical') {\n                    e.preventDefault();\n                    if (onIncrement && !reverse) onIncrement();\n                    else if (onDecrement && reverse) onDecrement();\n                }\n                break;\n            case 'Home':\n                e.preventDefault();\n                if (onDecrementToMin) onDecrementToMin();\n                break;\n            case 'End':\n                e.preventDefault();\n                if (onIncrementToMax) onIncrementToMax();\n                break;\n            case 'Enter':\n                e.preventDefault();\n                if (onCollapseToggle) onCollapseToggle();\n                break;\n        }\n    };\n    return {\n        onMouseDown: onMouseDown,\n        onMouseEnter: onMouseEnter,\n        onMouseOut: onMouseOut,\n        onKeyDown: onKeyDown\n    };\n}\n\n\n\nfunction $03deb23ff14920c4$export$4eaf04e54aa8eed6() {\n    let globalListeners = $12uGp$useRef(new Map());\n    let addGlobalListener = $12uGp$useCallback((eventTarget, type, listener, options)=>{\n        // Make sure we remove the listener after it is called with the `once` option.\n        let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args)=>{\n            globalListeners.current.delete(listener);\n            listener(...args);\n        } : listener;\n        globalListeners.current.set(listener, {\n            type: type,\n            eventTarget: eventTarget,\n            fn: fn,\n            options: options\n        });\n        eventTarget.addEventListener(type, listener, options);\n    }, []);\n    let removeGlobalListener = $12uGp$useCallback((eventTarget, type, listener, options)=>{\n        var ref;\n        let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;\n        eventTarget.removeEventListener(type, fn, options);\n        globalListeners.current.delete(listener);\n    }, []);\n    let removeAllGlobalListeners = $12uGp$useCallback(()=>{\n        globalListeners.current.forEach((value, key)=>{\n            removeGlobalListener(value.eventTarget, value.type, key, value.options);\n        });\n    }, [\n        removeGlobalListener\n    ]);\n    // eslint-disable-next-line arrow-body-style\n    $12uGp$useEffect(()=>{\n        return removeAllGlobalListeners;\n    }, [\n        removeAllGlobalListeners\n    ]);\n    return {\n        addGlobalListener: addGlobalListener,\n        removeGlobalListener: removeGlobalListener,\n        removeAllGlobalListeners: removeAllGlobalListeners\n    };\n}\n\n\n\nfunction $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {\n    let { id: id , 'aria-label': label , 'aria-labelledby': labelledBy  } = props;\n    // If there is both an aria-label and aria-labelledby,\n    // combine them by pointing to the element itself.\n    id = $bdb11010cef70236$export$f680877a34711e37(id);\n    if (labelledBy && label) {\n        let ids = new Set([\n            ...labelledBy.trim().split(/\\s+/),\n            id\n        ]);\n        labelledBy = [\n            ...ids\n        ].join(' ');\n    } else if (labelledBy) labelledBy = labelledBy.trim().split(/\\s+/).join(' ');\n    // If no labels are provided, use the default\n    if (!label && !labelledBy && defaultLabel) label = defaultLabel;\n    return {\n        id: id,\n        'aria-label': label,\n        'aria-labelledby': labelledBy\n    };\n}\n\n\n\n\nfunction $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {\n    const objRef = $12uGp$useRef();\n    /**\n   * We're using `useLayoutEffect` here instead of `useEffect` because we want\n   * to make sure that the `ref` value is up to date before other places in the\n   * the execution cycle try to read it.\n   */ $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(()=>{\n        if (!forwardedRef) return;\n        if (typeof forwardedRef === 'function') forwardedRef(objRef.current);\n        else forwardedRef.current = objRef.current;\n    }, [\n        forwardedRef\n    ]);\n    return objRef;\n}\n\n\n\nfunction $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {\n    const isInitialMount = $12uGp$useRef(true);\n    $12uGp$useEffect(()=>{\n        if (isInitialMount.current) isInitialMount.current = false;\n        else effect();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, dependencies);\n}\n\n\n\n\nfunction $9daab02d461809db$var$hasResizeObserver() {\n    return typeof window.ResizeObserver !== 'undefined';\n}\nfunction $9daab02d461809db$export$683480f191c0e3ea(options) {\n    const { ref: ref , onResize: onResize  } = options;\n    $12uGp$useEffect(()=>{\n        let element = ref === null || ref === void 0 ? void 0 : ref.current;\n        if (!element) return;\n        if (!$9daab02d461809db$var$hasResizeObserver()) {\n            window.addEventListener('resize', onResize, false);\n            return ()=>{\n                window.removeEventListener('resize', onResize, false);\n            };\n        } else {\n            const resizeObserverInstance = new window.ResizeObserver((entries)=>{\n                if (!entries.length) return;\n                onResize();\n            });\n            resizeObserverInstance.observe(element);\n            return ()=>{\n                if (element) resizeObserverInstance.unobserve(element);\n            };\n        }\n    }, [\n        onResize,\n        ref\n    ]);\n}\n\n\n\nfunction $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {\n    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(()=>{\n        if (context && context.ref && ref) {\n            context.ref.current = ref.current;\n            return ()=>{\n                context.ref.current = null;\n            };\n        }\n    }, [\n        context,\n        ref\n    ]);\n}\n\n\nfunction $62d8ded9296f3872$export$cfa2225e87938781(node) {\n    while(node && !$62d8ded9296f3872$var$isScrollable(node))node = node.parentElement;\n    return node || document.scrollingElement || document.documentElement;\n}\nfunction $62d8ded9296f3872$var$isScrollable(node) {\n    let style = window.getComputedStyle(node);\n    return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);\n}\n\n\n\n// @ts-ignore\nlet $5df64b3807dc15ee$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;\nfunction $5df64b3807dc15ee$export$d699905dd57c73ca() {\n    let [size1, setSize] = $12uGp$useState(()=>$5df64b3807dc15ee$var$getViewportSize()\n    );\n    $12uGp$useEffect(()=>{\n        // Use visualViewport api to track available height even on iOS virtual keyboard opening\n        let onResize = ()=>{\n            setSize((size)=>{\n                let newSize = $5df64b3807dc15ee$var$getViewportSize();\n                if (newSize.width === size.width && newSize.height === size.height) return size;\n                return newSize;\n            });\n        };\n        if (!$5df64b3807dc15ee$var$visualViewport) window.addEventListener('resize', onResize);\n        else $5df64b3807dc15ee$var$visualViewport.addEventListener('resize', onResize);\n        return ()=>{\n            if (!$5df64b3807dc15ee$var$visualViewport) window.removeEventListener('resize', onResize);\n            else $5df64b3807dc15ee$var$visualViewport.removeEventListener('resize', onResize);\n        };\n    }, []);\n    return size1;\n}\nfunction $5df64b3807dc15ee$var$getViewportSize() {\n    return {\n        width: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,\n        height: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight\n    };\n}\n\n\n\n\nlet $ef06256079686ba0$var$descriptionId = 0;\nconst $ef06256079686ba0$var$descriptionNodes = new Map();\nfunction $ef06256079686ba0$export$f8aeda7b10753fa1(description) {\n    let [id1, setId] = $12uGp$useState(undefined);\n    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(()=>{\n        if (!description) return;\n        let desc = $ef06256079686ba0$var$descriptionNodes.get(description);\n        if (!desc) {\n            let id = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;\n            setId(id);\n            let node = document.createElement('div');\n            node.id = id;\n            node.style.display = 'none';\n            node.textContent = description;\n            document.body.appendChild(node);\n            desc = {\n                refCount: 0,\n                element: node\n            };\n            $ef06256079686ba0$var$descriptionNodes.set(description, desc);\n        } else setId(desc.element.id);\n        desc.refCount++;\n        return ()=>{\n            if (--desc.refCount === 0) {\n                desc.element.remove();\n                $ef06256079686ba0$var$descriptionNodes.delete(description);\n            }\n        };\n    }, [\n        description\n    ]);\n    return {\n        'aria-describedby': description ? id1 : undefined\n    };\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $c87311424ea30a05$var$testUserAgent(re) {\n    var ref;\n    if (typeof window === 'undefined' || window.navigator == null) return false;\n    return ((ref = window.navigator['userAgentData']) === null || ref === void 0 ? void 0 : ref.brands.some((brand)=>re.test(brand.brand)\n    )) || re.test(window.navigator.userAgent);\n}\nfunction $c87311424ea30a05$var$testPlatform(re) {\n    var ref;\n    return typeof window !== 'undefined' && window.navigator != null ? re.test(((ref = window.navigator['userAgentData']) === null || ref === void 0 ? void 0 : ref.platform) || window.navigator.platform) : false;\n}\nfunction $c87311424ea30a05$export$9ac100e40613ea10() {\n    return $c87311424ea30a05$var$testPlatform(/^Mac/i);\n}\nfunction $c87311424ea30a05$export$186c6964ca17d99() {\n    return $c87311424ea30a05$var$testPlatform(/^iPhone/i);\n}\nfunction $c87311424ea30a05$export$7bef049ce92e4224() {\n    return $c87311424ea30a05$var$testPlatform(/^iPad/i) || $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;\n}\nfunction $c87311424ea30a05$export$fedb369cb70207f1() {\n    return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();\n}\nfunction $c87311424ea30a05$export$e1865c3bedcd822b() {\n    return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();\n}\nfunction $c87311424ea30a05$export$78551043582a6a98() {\n    return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();\n}\nfunction $c87311424ea30a05$export$6446a186d09e379e() {\n    return $c87311424ea30a05$var$testUserAgent(/Chrome/i);\n}\nfunction $c87311424ea30a05$export$a11b0059900ceec8() {\n    return $c87311424ea30a05$var$testUserAgent(/Android/i);\n}\n\n\n\nfunction $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler1, options) {\n    let handlerRef = $12uGp$useRef(handler1);\n    handlerRef.current = handler1;\n    let isDisabled = handler1 == null;\n    $12uGp$useEffect(()=>{\n        if (isDisabled) return;\n        let element = ref.current;\n        let handler = (e)=>handlerRef.current.call(this, e)\n        ;\n        element.addEventListener(event, handler, options);\n        return ()=>{\n            element.removeEventListener(event, handler, options);\n        };\n    }, [\n        ref,\n        event,\n        options,\n        isDisabled\n    ]);\n}\n\n\n\n\nfunction $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {\n    let [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue);\n    let valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    let effect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    valueRef.current = value;\n    // Store the function in a ref so we can always access the current version\n    // which has the proper `value` in scope.\n    let nextRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    nextRef.current = ()=>{\n        // Run the generator to the next yield.\n        let newValue = effect.current.next();\n        // If the generator is done, reset the effect.\n        if (newValue.done) {\n            effect.current = null;\n            return;\n        }\n        // If the value is the same as the current value,\n        // then continue to the next yield. Otherwise,\n        // set the value in state and wait for the next layout effect.\n        if (value === newValue.value) nextRef.current();\n        else setValue(newValue.value);\n    };\n    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(()=>{\n        // If there is an effect currently running, continue to the next yield.\n        if (effect.current) nextRef.current();\n    });\n    let queue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((fn)=>{\n        effect.current = fn(valueRef.current);\n        nextRef.current();\n    }, [\n        effect,\n        nextRef\n    ]);\n    return [\n        value,\n        queue\n    ];\n}\n\n\nfunction $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {\n    let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'left');\n    let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'top');\n    let width = element.offsetWidth;\n    let height = element.offsetHeight;\n    let x = scrollView.scrollLeft;\n    let y = scrollView.scrollTop;\n    let maxX = x + scrollView.offsetWidth;\n    let maxY = y + scrollView.offsetHeight;\n    if (offsetX <= x) x = offsetX;\n    else if (offsetX + width > maxX) x += offsetX + width - maxX;\n    if (offsetY <= y) y = offsetY;\n    else if (offsetY + height > maxY) y += offsetY + height - maxY;\n    scrollView.scrollLeft = x;\n    scrollView.scrollTop = y;\n}\n/**\n * Computes the offset left or top from child to ancestor by accumulating\n * offsetLeft or offsetTop through intervening offsetParents.\n */ function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {\n    const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';\n    let sum = 0;\n    while(child.offsetParent){\n        sum += child[prop];\n        if (child.offsetParent === ancestor) break;\n        else if (child.offsetParent.contains(ancestor)) {\n            // If the ancestor is not `position:relative`, then we stop at\n            // _its_ offset parent, and we subtract off _its_ offset, so that\n            // we end up with the proper offset from child to ancestor.\n            sum -= ancestor[prop];\n            break;\n        }\n        child = child.offsetParent;\n    }\n    return sum;\n}\n\n\n\n\nfunction $6a7db85432448f7f$export$60278871457622de(event) {\n    // JAWS/NVDA with Firefox.\n    if (event.mozInputSource === 0 && event.isTrusted) return true;\n    // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead\n    // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check\n    // to detect TalkBack virtual clicks.\n    if ($c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType) return event.type === 'click' && event.buttons === 1;\n    return event.detail === 0 && !event.pointerType;\n}\nfunction $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {\n    // If the pointer size is zero, then we assume it's from a screen reader.\n    // Android TalkBack double tap will sometimes return a event with width and height of 1\n    // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n    // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n    // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n    // Talkback double tap from Windows Firefox touch screen press\n    return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3952\n")},3126:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ tippy_react_headless_esm; },\n  \"tippy\": function() { return /* reexport */ tippy_headless_esm; },\n  \"useSingleton\": function() { return /* binding */ useSingleton; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\n\n\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/math.js\nvar math_max = Math.max;\nvar math_min = Math.min;\nvar round = Math.round;\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/userAgent.js\nfunction getUAString() {\n  var uaData = navigator.userAgentData;\n\n  if (uaData != null && uaData.brands) {\n    return uaData.brands.map(function (item) {\n      return item.brand + \"/\" + item.version;\n    }).join(' ');\n  }\n\n  return navigator.userAgent;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js\n\nfunction isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\n\n\n\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n\n  var _ref = isElement(element) ? getWindow(element) : window,\n      visualViewport = _ref.visualViewport;\n\n  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x: x,\n    y: y\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\n\nfunction getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\n\n\n\n\nfunction getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\nfunction getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\n\nfunction getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\n\n\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\n\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\n\nfunction isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\n\n\n\n\n\n\n\n\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\n // Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\n\nfunction getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\n\n\n\nfunction getParentNode(element) {\n  if (getNodeName(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\n\n\n\n\nfunction getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\n\n\n\n\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nfunction listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\n\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\n\n\n\n\n\n\n\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test(getUAString());\n  var isIE = /Trident/i.test(getUAString());\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/enums.js\nvar enums_top = 'top';\nvar bottom = 'bottom';\nvar right = 'right';\nvar left = 'left';\nvar auto = 'auto';\nvar basePlacements = [enums_top, bottom, right, left];\nvar start = 'start';\nvar end = 'end';\nvar clippingParents = 'clippingParents';\nvar viewport = 'viewport';\nvar popper = 'popper';\nvar reference = 'reference';\nvar variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar enums_placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nvar beforeRead = 'beforeRead';\nvar read = 'read';\nvar afterRead = 'afterRead'; // pure-logic modifiers\n\nvar beforeMain = 'beforeMain';\nvar main = 'main';\nvar afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nvar beforeWrite = 'beforeWrite';\nvar write = 'write';\nvar afterWrite = 'afterWrite';\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/orderModifiers.js\n // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nfunction orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/debounce.js\nfunction debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergeByName.js\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/createPopper.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (false) { var _getComputedStyle, marginTop, marginRight, marginBottom, marginLeft, flipModifier, modifiers; }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (false) {}\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (false) {}\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (false) {}\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nvar createPopper = /*#__PURE__*/(/* unused pure expression or super */ null && (popperGenerator())); // eslint-disable-next-line import/no-unused-modules\n\n\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\n // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var eventListeners = ({\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\n\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getVariation.js\nfunction getVariation(placement) {\n  return placement.split('-')[1];\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeOffsets.js\n\n\n\n\nfunction computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case enums_top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\n\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_popperOffsets = ({\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  var win = window;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\n\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = left;\n  var sideY = enums_top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === enums_top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === enums_top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n\n  if (false) { var transitionProperty; }\n\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === 'fixed'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_computeStyles = ({\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\n\n // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction applyStyles_effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_applyStyles = ({\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: applyStyles_effect,\n  requires: ['computeStyles']\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/offset.js\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, enums_top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = enums_placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_offset = ({\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\nvar hash = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\nvar getOppositeVariationPlacement_hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return getOppositeVariationPlacement_hash[matched];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\n\n\n\n\nfunction getViewportRect(element, strategy) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = isLayoutViewport();\n\n    if (layoutViewport || !layoutViewport && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\n\n\n\n\n // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = math_max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = math_max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += math_max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/contains.js\n\nfunction contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\nfunction rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === 'fixed');\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nfunction getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = math_max(rect.top, accRect.top);\n    accRect.right = math_min(rect.right, accRect.right);\n    accRect.bottom = math_min(rect.bottom, accRect.bottom);\n    accRect.left = math_max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\n\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [enums_top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\n\n\n\n\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? enums_placements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (false) {}\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/flip.js\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [enums_top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : enums_top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_flip = ({\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getAltAxis.js\nfunction getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/within.js\n\nfunction within(min, value, max) {\n  return math_max(min, math_min(value, max));\n}\nfunction withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\n\n\n\n\n\n\n\n\n\n\n\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? enums_top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? math_min(min, tetherMin) : min, offset, tether ? math_max(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? enums_top : left;\n\n    var _altSide = mainAxis === 'x' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [enums_top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_preventOverflow = ({\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/arrow.js\n\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === 'y' ? enums_top : left;\n  var maxProp = axis === 'y' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction arrow_effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (false) {}\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    if (false) {}\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_arrow = ({\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: arrow_effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/hide.js\n\n\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [enums_top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_hide = ({\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/popper.js\n\n\n\n\n\n\n\n\n\n\nvar defaultModifiers = [eventListeners, modifiers_popperOffsets, modifiers_computeStyles, modifiers_applyStyles, modifiers_offset, modifiers_flip, modifiers_preventOverflow, modifiers_arrow, modifiers_hide];\nvar popper_createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n\n;// CONCATENATED MODULE: ./node_modules/tippy.js/headless/dist/tippy-headless.esm.js\n/**!\n* tippy.js v6.3.7\n* (c) 2017-2021 atomiks\n* MIT License\n*/\n\n\nvar ROUND_ARROW = '<svg width=\"16\" height=\"6\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z\"></svg>';\nvar CONTENT_CLASS = \"tippy-content\";\nvar BACKDROP_CLASS = \"tippy-backdrop\";\nvar ARROW_CLASS = \"tippy-arrow\";\nvar SVG_ARROW_CLASS = \"tippy-svg-arrow\";\nvar TOUCH_OPTIONS = {\n  passive: true,\n  capture: true\n};\nvar TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {\n  return document.body;\n};\n\nfunction tippy_headless_esm_hasOwnProperty(obj, key) {\n  return {}.hasOwnProperty.call(obj, key);\n}\nfunction getValueAtIndexOrReturn(value, index, defaultValue) {\n  if (Array.isArray(value)) {\n    var v = value[index];\n    return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;\n  }\n\n  return value;\n}\nfunction isType(value, type) {\n  var str = {}.toString.call(value);\n  return str.indexOf('[object') === 0 && str.indexOf(type + \"]\") > -1;\n}\nfunction invokeWithArgsOrReturn(value, args) {\n  return typeof value === 'function' ? value.apply(void 0, args) : value;\n}\nfunction tippy_headless_esm_debounce(fn, ms) {\n  // Avoid wrapping in `setTimeout` if ms is 0 anyway\n  if (ms === 0) {\n    return fn;\n  }\n\n  var timeout;\n  return function (arg) {\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      fn(arg);\n    }, ms);\n  };\n}\nfunction removeProperties(obj, keys) {\n  var clone = Object.assign({}, obj);\n  keys.forEach(function (key) {\n    delete clone[key];\n  });\n  return clone;\n}\nfunction splitBySpaces(value) {\n  return value.split(/\\s+/).filter(Boolean);\n}\nfunction normalizeToArray(value) {\n  return [].concat(value);\n}\nfunction pushIfUnique(arr, value) {\n  if (arr.indexOf(value) === -1) {\n    arr.push(value);\n  }\n}\nfunction unique(arr) {\n  return arr.filter(function (item, index) {\n    return arr.indexOf(item) === index;\n  });\n}\nfunction tippy_headless_esm_getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\nfunction arrayFrom(value) {\n  return [].slice.call(value);\n}\nfunction removeUndefinedProps(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (obj[key] !== undefined) {\n      acc[key] = obj[key];\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction div() {\n  return document.createElement('div');\n}\nfunction tippy_headless_esm_isElement(value) {\n  return ['Element', 'Fragment'].some(function (type) {\n    return isType(value, type);\n  });\n}\nfunction isNodeList(value) {\n  return isType(value, 'NodeList');\n}\nfunction isMouseEvent(value) {\n  return isType(value, 'MouseEvent');\n}\nfunction isReferenceElement(value) {\n  return !!(value && value._tippy && value._tippy.reference === value);\n}\nfunction getArrayOfElements(value) {\n  if (tippy_headless_esm_isElement(value)) {\n    return [value];\n  }\n\n  if (isNodeList(value)) {\n    return arrayFrom(value);\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return arrayFrom(document.querySelectorAll(value));\n}\nfunction setTransitionDuration(els, value) {\n  els.forEach(function (el) {\n    if (el) {\n      el.style.transitionDuration = value + \"ms\";\n    }\n  });\n}\nfunction setVisibilityState(els, state) {\n  els.forEach(function (el) {\n    if (el) {\n      el.setAttribute('data-state', state);\n    }\n  });\n}\nfunction getOwnerDocument(elementOrElements) {\n  var _element$ownerDocumen;\n\n  var _normalizeToArray = normalizeToArray(elementOrElements),\n      element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body\n\n\n  return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;\n}\nfunction isCursorOutsideInteractiveBorder(popperTreeData, event) {\n  var clientX = event.clientX,\n      clientY = event.clientY;\n  return popperTreeData.every(function (_ref) {\n    var popperRect = _ref.popperRect,\n        popperState = _ref.popperState,\n        props = _ref.props;\n    var interactiveBorder = props.interactiveBorder;\n    var basePlacement = tippy_headless_esm_getBasePlacement(popperState.placement);\n    var offsetData = popperState.modifiersData.offset;\n\n    if (!offsetData) {\n      return true;\n    }\n\n    var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;\n    var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;\n    var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;\n    var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;\n    var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;\n    var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;\n    var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;\n    var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;\n    return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;\n  });\n}\nfunction updateTransitionEndListener(box, action, listener) {\n  var method = action + \"EventListener\"; // some browsers apparently support `transition` (unprefixed) but only fire\n  // `webkitTransitionEnd`...\n\n  ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {\n    box[method](event, listener);\n  });\n}\n/**\n * Compared to xxx.contains, this function works for dom structures with shadow\n * dom\n */\n\nfunction actualContains(parent, child) {\n  var target = child;\n\n  while (target) {\n    var _target$getRootNode;\n\n    if (parent.contains(target)) {\n      return true;\n    }\n\n    target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;\n  }\n\n  return false;\n}\n\nvar currentInput = {\n  isTouch: false\n};\nvar lastMouseMoveTime = 0;\n/**\n * When a `touchstart` event is fired, it's assumed the user is using touch\n * input. We'll bind a `mousemove` event listener to listen for mouse input in\n * the future. This way, the `isTouch` property is fully dynamic and will handle\n * hybrid devices that use a mix of touch + mouse input.\n */\n\nfunction onDocumentTouchStart() {\n  if (currentInput.isTouch) {\n    return;\n  }\n\n  currentInput.isTouch = true;\n\n  if (window.performance) {\n    document.addEventListener('mousemove', onDocumentMouseMove);\n  }\n}\n/**\n * When two `mousemove` event are fired consecutively within 20ms, it's assumed\n * the user is using mouse input again. `mousemove` can fire on touch devices as\n * well, but very rarely that quickly.\n */\n\nfunction onDocumentMouseMove() {\n  var now = performance.now();\n\n  if (now - lastMouseMoveTime < 20) {\n    currentInput.isTouch = false;\n    document.removeEventListener('mousemove', onDocumentMouseMove);\n  }\n\n  lastMouseMoveTime = now;\n}\n/**\n * When an element is in focus and has a tippy, leaving the tab/window and\n * returning causes it to show again. For mouse users this is unexpected, but\n * for keyboard use it makes sense.\n * TODO: find a better technique to solve this problem\n */\n\nfunction onWindowBlur() {\n  var activeElement = document.activeElement;\n\n  if (isReferenceElement(activeElement)) {\n    var instance = activeElement._tippy;\n\n    if (activeElement.blur && !instance.state.isVisible) {\n      activeElement.blur();\n    }\n  }\n}\nfunction bindGlobalEventListeners() {\n  document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);\n  window.addEventListener('blur', onWindowBlur);\n}\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nvar isIE11 = isBrowser ? // @ts-ignore\n!!window.msCrypto : false;\n\nfunction createMemoryLeakWarning(method) {\n  var txt = method === 'destroy' ? 'n already-' : ' ';\n  return [method + \"() was called on a\" + txt + \"destroyed instance. This is a no-op but\", 'indicates a potential memory leak.'].join(' ');\n}\nfunction clean(value) {\n  var spacesAndTabs = /[ \\t]{2,}/g;\n  var lineStartWithSpaces = /^[ \\t]*/gm;\n  return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();\n}\n\nfunction getDevMessage(message) {\n  return clean(\"\\n  %ctippy.js\\n\\n  %c\" + clean(message) + \"\\n\\n  %c\\uD83D\\uDC77\\u200D This is a development-only message. It will be removed in production.\\n  \");\n}\n\nfunction getFormattedMessage(message) {\n  return [getDevMessage(message), // title\n  'color: #00C584; font-size: 1.3em; font-weight: bold;', // message\n  'line-height: 1.5', // footer\n  'color: #a6a095;'];\n} // Assume warnings and errors never have the same message\n\nvar visitedMessages;\n\nif (false) {}\n\nfunction resetVisitedMessages() {\n  visitedMessages = new Set();\n}\nfunction warnWhen(condition, message) {\n  if (condition && !visitedMessages.has(message)) {\n    var _console;\n\n    visitedMessages.add(message);\n\n    (_console = console).warn.apply(_console, getFormattedMessage(message));\n  }\n}\nfunction errorWhen(condition, message) {\n  if (condition && !visitedMessages.has(message)) {\n    var _console2;\n\n    visitedMessages.add(message);\n\n    (_console2 = console).error.apply(_console2, getFormattedMessage(message));\n  }\n}\nfunction validateTargets(targets) {\n  var didPassFalsyValue = !targets;\n  var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;\n  errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));\n  errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));\n}\n\nvar pluginProps = {\n  animateFill: false,\n  followCursor: false,\n  inlinePositioning: false,\n  sticky: false\n};\nvar renderProps = {\n  allowHTML: false,\n  animation: 'fade',\n  arrow: true,\n  content: '',\n  inertia: false,\n  maxWidth: 350,\n  role: 'tooltip',\n  theme: '',\n  zIndex: 9999\n};\nvar defaultProps = Object.assign({\n  appendTo: TIPPY_DEFAULT_APPEND_TO,\n  aria: {\n    content: 'auto',\n    expanded: 'auto'\n  },\n  delay: 0,\n  duration: [300, 250],\n  getReferenceClientRect: null,\n  hideOnClick: true,\n  ignoreAttributes: false,\n  interactive: false,\n  interactiveBorder: 2,\n  interactiveDebounce: 0,\n  moveTransition: '',\n  offset: [0, 10],\n  onAfterUpdate: function onAfterUpdate() {},\n  onBeforeUpdate: function onBeforeUpdate() {},\n  onCreate: function onCreate() {},\n  onDestroy: function onDestroy() {},\n  onHidden: function onHidden() {},\n  onHide: function onHide() {},\n  onMount: function onMount() {},\n  onShow: function onShow() {},\n  onShown: function onShown() {},\n  onTrigger: function onTrigger() {},\n  onUntrigger: function onUntrigger() {},\n  onClickOutside: function onClickOutside() {},\n  placement: 'top',\n  plugins: [],\n  popperOptions: {},\n  render: null,\n  showOnCreate: false,\n  touch: true,\n  trigger: 'mouseenter focus',\n  triggerTarget: null\n}, pluginProps, renderProps);\nvar defaultKeys = Object.keys(defaultProps);\nvar setDefaultProps = function setDefaultProps(partialProps) {\n  /* istanbul ignore else */\n  if (false) {}\n\n  var keys = Object.keys(partialProps);\n  keys.forEach(function (key) {\n    defaultProps[key] = partialProps[key];\n  });\n};\nfunction getExtendedPassedProps(passedProps) {\n  var plugins = passedProps.plugins || [];\n  var pluginProps = plugins.reduce(function (acc, plugin) {\n    var name = plugin.name,\n        defaultValue = plugin.defaultValue;\n\n    if (name) {\n      var _name;\n\n      acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;\n    }\n\n    return acc;\n  }, {});\n  return Object.assign({}, passedProps, pluginProps);\n}\nfunction getDataAttributeProps(reference, plugins) {\n  var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {\n    plugins: plugins\n  }))) : defaultKeys;\n  var props = propKeys.reduce(function (acc, key) {\n    var valueAsString = (reference.getAttribute(\"data-tippy-\" + key) || '').trim();\n\n    if (!valueAsString) {\n      return acc;\n    }\n\n    if (key === 'content') {\n      acc[key] = valueAsString;\n    } else {\n      try {\n        acc[key] = JSON.parse(valueAsString);\n      } catch (e) {\n        acc[key] = valueAsString;\n      }\n    }\n\n    return acc;\n  }, {});\n  return props;\n}\nfunction evaluateProps(reference, props) {\n  var out = Object.assign({}, props, {\n    content: invokeWithArgsOrReturn(props.content, [reference])\n  }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));\n  out.aria = Object.assign({}, defaultProps.aria, out.aria);\n  out.aria = {\n    expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,\n    content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content\n  };\n  return out;\n}\nfunction validateProps(partialProps, plugins) {\n  if (partialProps === void 0) {\n    partialProps = {};\n  }\n\n  if (plugins === void 0) {\n    plugins = [];\n  }\n\n  var keys = Object.keys(partialProps);\n  keys.forEach(function (prop) {\n    var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));\n    var didPassUnknownProp = !tippy_headless_esm_hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`\n\n    if (didPassUnknownProp) {\n      didPassUnknownProp = plugins.filter(function (plugin) {\n        return plugin.name === prop;\n      }).length === 0;\n    }\n\n    warnWhen(didPassUnknownProp, [\"`\" + prop + \"`\", \"is not a valid prop. You may have spelled it incorrectly, or if it's\", 'a plugin, forgot to pass it in an array as props.plugins.', '\\n\\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));\n  });\n}\n\nfunction getChildren(popper) {\n  var box = popper.firstElementChild;\n  var boxChildren = arrayFrom(box.children);\n  return {\n    box: box,\n    content: boxChildren.find(function (node) {\n      return node.classList.contains(CONTENT_CLASS);\n    }),\n    arrow: boxChildren.find(function (node) {\n      return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);\n    }),\n    backdrop: boxChildren.find(function (node) {\n      return node.classList.contains(BACKDROP_CLASS);\n    })\n  };\n}\n\nvar idCounter = 1;\nvar mouseMoveListeners = []; // Used by `hideAll()`\n\nvar mountedInstances = [];\nfunction createTippy(reference, passedProps) {\n  var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================\n  // 🔒 Private members\n  // ===========================================================================\n\n  var showTimeout;\n  var hideTimeout;\n  var scheduleHideAnimationFrame;\n  var isVisibleFromClick = false;\n  var didHideDueToDocumentMouseDown = false;\n  var didTouchMove = false;\n  var ignoreOnFirstUpdate = false;\n  var lastTriggerEvent;\n  var currentTransitionEndListener;\n  var onFirstUpdate;\n  var listeners = [];\n  var debouncedOnMouseMove = tippy_headless_esm_debounce(onMouseMove, props.interactiveDebounce);\n  var currentTarget; // ===========================================================================\n  // 🔑 Public members\n  // ===========================================================================\n\n  var id = idCounter++;\n  var popperInstance = null;\n  var plugins = unique(props.plugins);\n  var state = {\n    // Is the instance currently enabled?\n    isEnabled: true,\n    // Is the tippy currently showing and not transitioning out?\n    isVisible: false,\n    // Has the instance been destroyed?\n    isDestroyed: false,\n    // Is the tippy currently mounted to the DOM?\n    isMounted: false,\n    // Has the tippy finished transitioning in?\n    isShown: false\n  };\n  var instance = {\n    // properties\n    id: id,\n    reference: reference,\n    popper: div(),\n    popperInstance: popperInstance,\n    props: props,\n    state: state,\n    plugins: plugins,\n    // methods\n    clearDelayTimeouts: clearDelayTimeouts,\n    setProps: setProps,\n    setContent: setContent,\n    show: show,\n    hide: hide,\n    hideWithInteractivity: hideWithInteractivity,\n    enable: enable,\n    disable: disable,\n    unmount: unmount,\n    destroy: destroy\n  }; // TODO: Investigate why this early return causes a TDZ error in the tests —\n  // it doesn't seem to happen in the browser\n\n  /* istanbul ignore if */\n\n  if (!props.render) {\n    if (false) {}\n\n    return instance;\n  } // ===========================================================================\n  // Initial mutations\n  // ===========================================================================\n\n\n  var _props$render = props.render(instance),\n      popper = _props$render.popper,\n      onUpdate = _props$render.onUpdate;\n\n  popper.setAttribute('data-tippy-root', '');\n  popper.id = \"tippy-\" + instance.id;\n  instance.popper = popper;\n  reference._tippy = instance;\n  popper._tippy = instance;\n  var pluginsHooks = plugins.map(function (plugin) {\n    return plugin.fn(instance);\n  });\n  var hasAriaExpanded = reference.hasAttribute('aria-expanded');\n  addListeners();\n  handleAriaExpandedAttribute();\n  handleStyles();\n  invokeHook('onCreate', [instance]);\n\n  if (props.showOnCreate) {\n    scheduleShow();\n  } // Prevent a tippy with a delay from hiding if the cursor left then returned\n  // before it started hiding\n\n\n  popper.addEventListener('mouseenter', function () {\n    if (instance.props.interactive && instance.state.isVisible) {\n      instance.clearDelayTimeouts();\n    }\n  });\n  popper.addEventListener('mouseleave', function () {\n    if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {\n      getDocument().addEventListener('mousemove', debouncedOnMouseMove);\n    }\n  });\n  return instance; // ===========================================================================\n  // 🔒 Private methods\n  // ===========================================================================\n\n  function getNormalizedTouchSettings() {\n    var touch = instance.props.touch;\n    return Array.isArray(touch) ? touch : [touch, 0];\n  }\n\n  function getIsCustomTouchBehavior() {\n    return getNormalizedTouchSettings()[0] === 'hold';\n  }\n\n  function getIsDefaultRenderFn() {\n    var _instance$props$rende;\n\n    // @ts-ignore\n    return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);\n  }\n\n  function getCurrentTarget() {\n    return currentTarget || reference;\n  }\n\n  function getDocument() {\n    var parent = getCurrentTarget().parentNode;\n    return parent ? getOwnerDocument(parent) : document;\n  }\n\n  function getDefaultTemplateChildren() {\n    return getChildren(popper);\n  }\n\n  function getDelay(isShow) {\n    // For touch or keyboard input, force `0` delay for UX reasons\n    // Also if the instance is mounted but not visible (transitioning out),\n    // ignore delay\n    if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {\n      return 0;\n    }\n\n    return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);\n  }\n\n  function handleStyles(fromHide) {\n    if (fromHide === void 0) {\n      fromHide = false;\n    }\n\n    popper.style.pointerEvents = instance.props.interactive && !fromHide ? '' : 'none';\n    popper.style.zIndex = \"\" + instance.props.zIndex;\n  }\n\n  function invokeHook(hook, args, shouldInvokePropsHook) {\n    if (shouldInvokePropsHook === void 0) {\n      shouldInvokePropsHook = true;\n    }\n\n    pluginsHooks.forEach(function (pluginHooks) {\n      if (pluginHooks[hook]) {\n        pluginHooks[hook].apply(pluginHooks, args);\n      }\n    });\n\n    if (shouldInvokePropsHook) {\n      var _instance$props;\n\n      (_instance$props = instance.props)[hook].apply(_instance$props, args);\n    }\n  }\n\n  function handleAriaContentAttribute() {\n    var aria = instance.props.aria;\n\n    if (!aria.content) {\n      return;\n    }\n\n    var attr = \"aria-\" + aria.content;\n    var id = popper.id;\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      var currentValue = node.getAttribute(attr);\n\n      if (instance.state.isVisible) {\n        node.setAttribute(attr, currentValue ? currentValue + \" \" + id : id);\n      } else {\n        var nextValue = currentValue && currentValue.replace(id, '').trim();\n\n        if (nextValue) {\n          node.setAttribute(attr, nextValue);\n        } else {\n          node.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  function handleAriaExpandedAttribute() {\n    if (hasAriaExpanded || !instance.props.aria.expanded) {\n      return;\n    }\n\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      if (instance.props.interactive) {\n        node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');\n      } else {\n        node.removeAttribute('aria-expanded');\n      }\n    });\n  }\n\n  function cleanupInteractiveMouseListeners() {\n    getDocument().removeEventListener('mousemove', debouncedOnMouseMove);\n    mouseMoveListeners = mouseMoveListeners.filter(function (listener) {\n      return listener !== debouncedOnMouseMove;\n    });\n  }\n\n  function onDocumentPress(event) {\n    // Moved finger to scroll instead of an intentional tap outside\n    if (currentInput.isTouch) {\n      if (didTouchMove || event.type === 'mousedown') {\n        return;\n      }\n    }\n\n    var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper\n\n    if (instance.props.interactive && actualContains(popper, actualTarget)) {\n      return;\n    } // Clicked on the event listeners target\n\n\n    if (normalizeToArray(instance.props.triggerTarget || reference).some(function (el) {\n      return actualContains(el, actualTarget);\n    })) {\n      if (currentInput.isTouch) {\n        return;\n      }\n\n      if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {\n        return;\n      }\n    } else {\n      invokeHook('onClickOutside', [instance, event]);\n    }\n\n    if (instance.props.hideOnClick === true) {\n      instance.clearDelayTimeouts();\n      instance.hide(); // `mousedown` event is fired right before `focus` if pressing the\n      // currentTarget. This lets a tippy with `focus` trigger know that it\n      // should not show\n\n      didHideDueToDocumentMouseDown = true;\n      setTimeout(function () {\n        didHideDueToDocumentMouseDown = false;\n      }); // The listener gets added in `scheduleShow()`, but this may be hiding it\n      // before it shows, and hide()'s early bail-out behavior can prevent it\n      // from being cleaned up\n\n      if (!instance.state.isMounted) {\n        removeDocumentPress();\n      }\n    }\n  }\n\n  function onTouchMove() {\n    didTouchMove = true;\n  }\n\n  function onTouchStart() {\n    didTouchMove = false;\n  }\n\n  function addDocumentPress() {\n    var doc = getDocument();\n    doc.addEventListener('mousedown', onDocumentPress, true);\n    doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);\n    doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);\n    doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);\n  }\n\n  function removeDocumentPress() {\n    var doc = getDocument();\n    doc.removeEventListener('mousedown', onDocumentPress, true);\n    doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);\n    doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);\n    doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);\n  }\n\n  function onTransitionedOut(duration, callback) {\n    onTransitionEnd(duration, function () {\n      if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {\n        callback();\n      }\n    });\n  }\n\n  function onTransitionedIn(duration, callback) {\n    onTransitionEnd(duration, callback);\n  }\n\n  function onTransitionEnd(duration, callback) {\n    var box = getDefaultTemplateChildren().box;\n\n    function listener(event) {\n      if (event.target === box) {\n        updateTransitionEndListener(box, 'remove', listener);\n        callback();\n      }\n    } // Make callback synchronous if duration is 0\n    // `transitionend` won't fire otherwise\n\n\n    if (duration === 0) {\n      return callback();\n    }\n\n    updateTransitionEndListener(box, 'remove', currentTransitionEndListener);\n    updateTransitionEndListener(box, 'add', listener);\n    currentTransitionEndListener = listener;\n  }\n\n  function on(eventType, handler, options) {\n    if (options === void 0) {\n      options = false;\n    }\n\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      node.addEventListener(eventType, handler, options);\n      listeners.push({\n        node: node,\n        eventType: eventType,\n        handler: handler,\n        options: options\n      });\n    });\n  }\n\n  function addListeners() {\n    if (getIsCustomTouchBehavior()) {\n      on('touchstart', onTrigger, {\n        passive: true\n      });\n      on('touchend', onMouseLeave, {\n        passive: true\n      });\n    }\n\n    splitBySpaces(instance.props.trigger).forEach(function (eventType) {\n      if (eventType === 'manual') {\n        return;\n      }\n\n      on(eventType, onTrigger);\n\n      switch (eventType) {\n        case 'mouseenter':\n          on('mouseleave', onMouseLeave);\n          break;\n\n        case 'focus':\n          on(isIE11 ? 'focusout' : 'blur', onBlurOrFocusOut);\n          break;\n\n        case 'focusin':\n          on('focusout', onBlurOrFocusOut);\n          break;\n      }\n    });\n  }\n\n  function removeListeners() {\n    listeners.forEach(function (_ref) {\n      var node = _ref.node,\n          eventType = _ref.eventType,\n          handler = _ref.handler,\n          options = _ref.options;\n      node.removeEventListener(eventType, handler, options);\n    });\n    listeners = [];\n  }\n\n  function onTrigger(event) {\n    var _lastTriggerEvent;\n\n    var shouldScheduleClickHide = false;\n\n    if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {\n      return;\n    }\n\n    var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';\n    lastTriggerEvent = event;\n    currentTarget = event.currentTarget;\n    handleAriaExpandedAttribute();\n\n    if (!instance.state.isVisible && isMouseEvent(event)) {\n      // If scrolling, `mouseenter` events can be fired if the cursor lands\n      // over a new target, but `mousemove` events don't get fired. This\n      // causes interactive tooltips to get stuck open until the cursor is\n      // moved\n      mouseMoveListeners.forEach(function (listener) {\n        return listener(event);\n      });\n    } // Toggle show/hide when clicking click-triggered tooltips\n\n\n    if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {\n      shouldScheduleClickHide = true;\n    } else {\n      scheduleShow(event);\n    }\n\n    if (event.type === 'click') {\n      isVisibleFromClick = !shouldScheduleClickHide;\n    }\n\n    if (shouldScheduleClickHide && !wasFocused) {\n      scheduleHide(event);\n    }\n  }\n\n  function onMouseMove(event) {\n    var target = event.target;\n    var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);\n\n    if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {\n      return;\n    }\n\n    var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {\n      var _instance$popperInsta;\n\n      var instance = popper._tippy;\n      var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;\n\n      if (state) {\n        return {\n          popperRect: popper.getBoundingClientRect(),\n          popperState: state,\n          props: props\n        };\n      }\n\n      return null;\n    }).filter(Boolean);\n\n    if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {\n      cleanupInteractiveMouseListeners();\n      scheduleHide(event);\n    }\n  }\n\n  function onMouseLeave(event) {\n    var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;\n\n    if (shouldBail) {\n      return;\n    }\n\n    if (instance.props.interactive) {\n      instance.hideWithInteractivity(event);\n      return;\n    }\n\n    scheduleHide(event);\n  }\n\n  function onBlurOrFocusOut(event) {\n    if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {\n      return;\n    } // If focus was moved to within the popper\n\n\n    if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {\n      return;\n    }\n\n    scheduleHide(event);\n  }\n\n  function isEventListenerStopped(event) {\n    return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;\n  }\n\n  function createPopperInstance() {\n    destroyPopperInstance();\n    var _instance$props2 = instance.props,\n        popperOptions = _instance$props2.popperOptions,\n        placement = _instance$props2.placement,\n        offset = _instance$props2.offset,\n        getReferenceClientRect = _instance$props2.getReferenceClientRect,\n        moveTransition = _instance$props2.moveTransition;\n    var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;\n    var computedReference = getReferenceClientRect ? {\n      getBoundingClientRect: getReferenceClientRect,\n      contextElement: getReferenceClientRect.contextElement || getCurrentTarget()\n    } : reference;\n    var tippyModifier = {\n      name: '$$tippy',\n      enabled: true,\n      phase: 'beforeWrite',\n      requires: ['computeStyles'],\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n\n        if (getIsDefaultRenderFn()) {\n          var _getDefaultTemplateCh = getDefaultTemplateChildren(),\n              box = _getDefaultTemplateCh.box;\n\n          ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {\n            if (attr === 'placement') {\n              box.setAttribute('data-placement', state.placement);\n            } else {\n              if (state.attributes.popper[\"data-popper-\" + attr]) {\n                box.setAttribute(\"data-\" + attr, '');\n              } else {\n                box.removeAttribute(\"data-\" + attr);\n              }\n            }\n          });\n          state.attributes.popper = {};\n        }\n      }\n    };\n    var modifiers = [{\n      name: 'offset',\n      options: {\n        offset: offset\n      }\n    }, {\n      name: 'preventOverflow',\n      options: {\n        padding: {\n          top: 2,\n          bottom: 2,\n          left: 5,\n          right: 5\n        }\n      }\n    }, {\n      name: 'flip',\n      options: {\n        padding: 5\n      }\n    }, {\n      name: 'computeStyles',\n      options: {\n        adaptive: !moveTransition\n      }\n    }, tippyModifier];\n\n    if (getIsDefaultRenderFn() && arrow) {\n      modifiers.push({\n        name: 'arrow',\n        options: {\n          element: arrow,\n          padding: 3\n        }\n      });\n    }\n\n    modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);\n    instance.popperInstance = popper_createPopper(computedReference, popper, Object.assign({}, popperOptions, {\n      placement: placement,\n      onFirstUpdate: onFirstUpdate,\n      modifiers: modifiers\n    }));\n  }\n\n  function destroyPopperInstance() {\n    if (instance.popperInstance) {\n      instance.popperInstance.destroy();\n      instance.popperInstance = null;\n    }\n  }\n\n  function mount() {\n    var appendTo = instance.props.appendTo;\n    var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so\n    // it's directly after the reference element so the elements inside the\n    // tippy can be tabbed to\n    // If there are clipping issues, the user can specify a different appendTo\n    // and ensure focus management is handled correctly manually\n\n    var node = getCurrentTarget();\n\n    if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === 'parent') {\n      parentNode = node.parentNode;\n    } else {\n      parentNode = invokeWithArgsOrReturn(appendTo, [node]);\n    } // The popper element needs to exist on the DOM before its position can be\n    // updated as Popper needs to read its dimensions\n\n\n    if (!parentNode.contains(popper)) {\n      parentNode.appendChild(popper);\n    }\n\n    instance.state.isMounted = true;\n    createPopperInstance();\n    /* istanbul ignore else */\n\n    if (false) {}\n  }\n\n  function getNestedPopperTree() {\n    return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));\n  }\n\n  function scheduleShow(event) {\n    instance.clearDelayTimeouts();\n\n    if (event) {\n      invokeHook('onTrigger', [instance, event]);\n    }\n\n    addDocumentPress();\n    var delay = getDelay(true);\n\n    var _getNormalizedTouchSe = getNormalizedTouchSettings(),\n        touchValue = _getNormalizedTouchSe[0],\n        touchDelay = _getNormalizedTouchSe[1];\n\n    if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {\n      delay = touchDelay;\n    }\n\n    if (delay) {\n      showTimeout = setTimeout(function () {\n        instance.show();\n      }, delay);\n    } else {\n      instance.show();\n    }\n  }\n\n  function scheduleHide(event) {\n    instance.clearDelayTimeouts();\n    invokeHook('onUntrigger', [instance, event]);\n\n    if (!instance.state.isVisible) {\n      removeDocumentPress();\n      return;\n    } // For interactive tippies, scheduleHide is added to a document.body handler\n    // from onMouseLeave so must intercept scheduled hides from mousemove/leave\n    // events when trigger contains mouseenter and click, and the tip is\n    // currently shown as a result of a click.\n\n\n    if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {\n      return;\n    }\n\n    var delay = getDelay(false);\n\n    if (delay) {\n      hideTimeout = setTimeout(function () {\n        if (instance.state.isVisible) {\n          instance.hide();\n        }\n      }, delay);\n    } else {\n      // Fixes a `transitionend` problem when it fires 1 frame too\n      // late sometimes, we don't want hide() to be called.\n      scheduleHideAnimationFrame = requestAnimationFrame(function () {\n        instance.hide();\n      });\n    }\n  } // ===========================================================================\n  // 🔑 Public methods\n  // ===========================================================================\n\n\n  function enable() {\n    instance.state.isEnabled = true;\n  }\n\n  function disable() {\n    // Disabling the instance should also hide it\n    // https://github.com/atomiks/tippy.js-react/issues/106\n    instance.hide();\n    instance.state.isEnabled = false;\n  }\n\n  function clearDelayTimeouts() {\n    clearTimeout(showTimeout);\n    clearTimeout(hideTimeout);\n    cancelAnimationFrame(scheduleHideAnimationFrame);\n  }\n\n  function setProps(partialProps) {\n    /* istanbul ignore else */\n    if (false) {}\n\n    if (instance.state.isDestroyed) {\n      return;\n    }\n\n    invokeHook('onBeforeUpdate', [instance, partialProps]);\n    removeListeners();\n    var prevProps = instance.props;\n    var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {\n      ignoreAttributes: true\n    }));\n    instance.props = nextProps;\n    addListeners();\n\n    if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {\n      cleanupInteractiveMouseListeners();\n      debouncedOnMouseMove = tippy_headless_esm_debounce(onMouseMove, nextProps.interactiveDebounce);\n    } // Ensure stale aria-expanded attributes are removed\n\n\n    if (prevProps.triggerTarget && !nextProps.triggerTarget) {\n      normalizeToArray(prevProps.triggerTarget).forEach(function (node) {\n        node.removeAttribute('aria-expanded');\n      });\n    } else if (nextProps.triggerTarget) {\n      reference.removeAttribute('aria-expanded');\n    }\n\n    handleAriaExpandedAttribute();\n    handleStyles();\n\n    if (onUpdate) {\n      onUpdate(prevProps, nextProps);\n    }\n\n    if (instance.popperInstance) {\n      createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,\n      // and the nested ones get re-rendered first.\n      // https://github.com/atomiks/tippyjs-react/issues/177\n      // TODO: find a cleaner / more efficient solution(!)\n\n      getNestedPopperTree().forEach(function (nestedPopper) {\n        // React (and other UI libs likely) requires a rAF wrapper as it flushes\n        // its work in one\n        requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);\n      });\n    }\n\n    invokeHook('onAfterUpdate', [instance, partialProps]);\n  }\n\n  function setContent(content) {\n    instance.setProps({\n      content: content\n    });\n  }\n\n  function show() {\n    /* istanbul ignore else */\n    if (false) {} // Early bail-out\n\n\n    var isAlreadyVisible = instance.state.isVisible;\n    var isDestroyed = instance.state.isDestroyed;\n    var isDisabled = !instance.state.isEnabled;\n    var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;\n    var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);\n\n    if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {\n      return;\n    } // Normalize `disabled` behavior across browsers.\n    // Firefox allows events on disabled elements, but Chrome doesn't.\n    // Using a wrapper element (i.e. <span>) is recommended.\n\n\n    if (getCurrentTarget().hasAttribute('disabled')) {\n      return;\n    }\n\n    invokeHook('onShow', [instance], false);\n\n    if (instance.props.onShow(instance) === false) {\n      return;\n    }\n\n    instance.state.isVisible = true;\n\n    if (getIsDefaultRenderFn()) {\n      popper.style.visibility = 'visible';\n    }\n\n    handleStyles();\n    addDocumentPress();\n\n    if (!instance.state.isMounted) {\n      popper.style.transition = 'none';\n    } // If flipping to the opposite side after hiding at least once, the\n    // animation will use the wrong placement without resetting the duration\n\n\n    if (getIsDefaultRenderFn()) {\n      var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),\n          box = _getDefaultTemplateCh2.box,\n          content = _getDefaultTemplateCh2.content;\n\n      setTransitionDuration([box, content], 0);\n    }\n\n    onFirstUpdate = function onFirstUpdate() {\n      var _instance$popperInsta2;\n\n      if (!instance.state.isVisible || ignoreOnFirstUpdate) {\n        return;\n      }\n\n      ignoreOnFirstUpdate = true; // reflow\n\n      void popper.offsetHeight;\n      popper.style.transition = instance.props.moveTransition;\n\n      if (getIsDefaultRenderFn() && instance.props.animation) {\n        var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),\n            _box = _getDefaultTemplateCh3.box,\n            _content = _getDefaultTemplateCh3.content;\n\n        setTransitionDuration([_box, _content], duration);\n        setVisibilityState([_box, _content], 'visible');\n      }\n\n      handleAriaContentAttribute();\n      handleAriaExpandedAttribute();\n      pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the\n      // popper has been positioned for the first time\n\n      (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();\n      invokeHook('onMount', [instance]);\n\n      if (instance.props.animation && getIsDefaultRenderFn()) {\n        onTransitionedIn(duration, function () {\n          instance.state.isShown = true;\n          invokeHook('onShown', [instance]);\n        });\n      }\n    };\n\n    mount();\n  }\n\n  function hide() {\n    /* istanbul ignore else */\n    if (false) {} // Early bail-out\n\n\n    var isAlreadyHidden = !instance.state.isVisible;\n    var isDestroyed = instance.state.isDestroyed;\n    var isDisabled = !instance.state.isEnabled;\n    var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);\n\n    if (isAlreadyHidden || isDestroyed || isDisabled) {\n      return;\n    }\n\n    invokeHook('onHide', [instance], false);\n\n    if (instance.props.onHide(instance) === false) {\n      return;\n    }\n\n    instance.state.isVisible = false;\n    instance.state.isShown = false;\n    ignoreOnFirstUpdate = false;\n    isVisibleFromClick = false;\n\n    if (getIsDefaultRenderFn()) {\n      popper.style.visibility = 'hidden';\n    }\n\n    cleanupInteractiveMouseListeners();\n    removeDocumentPress();\n    handleStyles(true);\n\n    if (getIsDefaultRenderFn()) {\n      var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),\n          box = _getDefaultTemplateCh4.box,\n          content = _getDefaultTemplateCh4.content;\n\n      if (instance.props.animation) {\n        setTransitionDuration([box, content], duration);\n        setVisibilityState([box, content], 'hidden');\n      }\n    }\n\n    handleAriaContentAttribute();\n    handleAriaExpandedAttribute();\n\n    if (instance.props.animation) {\n      if (getIsDefaultRenderFn()) {\n        onTransitionedOut(duration, instance.unmount);\n      }\n    } else {\n      instance.unmount();\n    }\n  }\n\n  function hideWithInteractivity(event) {\n    /* istanbul ignore else */\n    if (false) {}\n\n    getDocument().addEventListener('mousemove', debouncedOnMouseMove);\n    pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);\n    debouncedOnMouseMove(event);\n  }\n\n  function unmount() {\n    /* istanbul ignore else */\n    if (false) {}\n\n    if (instance.state.isVisible) {\n      instance.hide();\n    }\n\n    if (!instance.state.isMounted) {\n      return;\n    }\n\n    destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper\n    // tree by default. This seems mainly for interactive tippies, but we should\n    // find a workaround if possible\n\n    getNestedPopperTree().forEach(function (nestedPopper) {\n      nestedPopper._tippy.unmount();\n    });\n\n    if (popper.parentNode) {\n      popper.parentNode.removeChild(popper);\n    }\n\n    mountedInstances = mountedInstances.filter(function (i) {\n      return i !== instance;\n    });\n    instance.state.isMounted = false;\n    invokeHook('onHidden', [instance]);\n  }\n\n  function destroy() {\n    /* istanbul ignore else */\n    if (false) {}\n\n    if (instance.state.isDestroyed) {\n      return;\n    }\n\n    instance.clearDelayTimeouts();\n    instance.unmount();\n    removeListeners();\n    delete reference._tippy;\n    instance.state.isDestroyed = true;\n    invokeHook('onDestroy', [instance]);\n  }\n}\n\nfunction tippy(targets, optionalProps) {\n  if (optionalProps === void 0) {\n    optionalProps = {};\n  }\n\n  var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);\n  /* istanbul ignore else */\n\n  if (false) {}\n\n  bindGlobalEventListeners();\n  var passedProps = Object.assign({}, optionalProps, {\n    plugins: plugins\n  });\n  var elements = getArrayOfElements(targets);\n  /* istanbul ignore else */\n\n  if (false) { var isMoreThanOneReferenceElement, isSingleContentElement; }\n\n  var instances = elements.reduce(function (acc, reference) {\n    var instance = reference && createTippy(reference, passedProps);\n\n    if (instance) {\n      acc.push(instance);\n    }\n\n    return acc;\n  }, []);\n  return tippy_headless_esm_isElement(targets) ? instances[0] : instances;\n}\n\ntippy.defaultProps = defaultProps;\ntippy.setDefaultProps = setDefaultProps;\ntippy.currentInput = currentInput;\nvar hideAll = function hideAll(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      excludedReferenceOrInstance = _ref.exclude,\n      duration = _ref.duration;\n\n  mountedInstances.forEach(function (instance) {\n    var isExcluded = false;\n\n    if (excludedReferenceOrInstance) {\n      isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;\n    }\n\n    if (!isExcluded) {\n      var originalDuration = instance.props.duration;\n      instance.setProps({\n        duration: duration\n      });\n      instance.hide();\n\n      if (!instance.state.isDestroyed) {\n        instance.setProps({\n          duration: originalDuration\n        });\n      }\n    }\n  });\n};\n\n// every time the popper is destroyed (i.e. a new target), removing the styles\n// and causing transitions to break for singletons when the console is open, but\n// most notably for non-transform styles being used, `gpuAcceleration: false`.\n\nvar applyStylesModifier = Object.assign({}, modifiers_applyStyles, {\n  effect: function effect(_ref) {\n    var state = _ref.state;\n    var initialStyles = {\n      popper: {\n        position: state.options.strategy,\n        left: '0',\n        top: '0',\n        margin: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      },\n      reference: {}\n    };\n    Object.assign(state.elements.popper.style, initialStyles.popper);\n    state.styles = initialStyles;\n\n    if (state.elements.arrow) {\n      Object.assign(state.elements.arrow.style, initialStyles.arrow);\n    } // intentionally return no cleanup function\n    // return () => { ... }\n\n  }\n});\n\nvar createSingleton = function createSingleton(tippyInstances, optionalProps) {\n  var _optionalProps$popper;\n\n  if (optionalProps === void 0) {\n    optionalProps = {};\n  }\n\n  /* istanbul ignore else */\n  if (false) {}\n\n  var individualInstances = tippyInstances;\n  var references = [];\n  var triggerTargets = [];\n  var currentTarget;\n  var overrides = optionalProps.overrides;\n  var interceptSetPropsCleanups = [];\n  var shownOnCreate = false;\n\n  function setTriggerTargets() {\n    triggerTargets = individualInstances.map(function (instance) {\n      return normalizeToArray(instance.props.triggerTarget || instance.reference);\n    }).reduce(function (acc, item) {\n      return acc.concat(item);\n    }, []);\n  }\n\n  function setReferences() {\n    references = individualInstances.map(function (instance) {\n      return instance.reference;\n    });\n  }\n\n  function enableInstances(isEnabled) {\n    individualInstances.forEach(function (instance) {\n      if (isEnabled) {\n        instance.enable();\n      } else {\n        instance.disable();\n      }\n    });\n  }\n\n  function interceptSetProps(singleton) {\n    return individualInstances.map(function (instance) {\n      var originalSetProps = instance.setProps;\n\n      instance.setProps = function (props) {\n        originalSetProps(props);\n\n        if (instance.reference === currentTarget) {\n          singleton.setProps(props);\n        }\n      };\n\n      return function () {\n        instance.setProps = originalSetProps;\n      };\n    });\n  } // have to pass singleton, as it maybe undefined on first call\n\n\n  function prepareInstance(singleton, target) {\n    var index = triggerTargets.indexOf(target); // bail-out\n\n    if (target === currentTarget) {\n      return;\n    }\n\n    currentTarget = target;\n    var overrideProps = (overrides || []).concat('content').reduce(function (acc, prop) {\n      acc[prop] = individualInstances[index].props[prop];\n      return acc;\n    }, {});\n    singleton.setProps(Object.assign({}, overrideProps, {\n      getReferenceClientRect: typeof overrideProps.getReferenceClientRect === 'function' ? overrideProps.getReferenceClientRect : function () {\n        var _references$index;\n\n        return (_references$index = references[index]) == null ? void 0 : _references$index.getBoundingClientRect();\n      }\n    }));\n  }\n\n  enableInstances(false);\n  setReferences();\n  setTriggerTargets();\n  var plugin = {\n    fn: function fn() {\n      return {\n        onDestroy: function onDestroy() {\n          enableInstances(true);\n        },\n        onHidden: function onHidden() {\n          currentTarget = null;\n        },\n        onClickOutside: function onClickOutside(instance) {\n          if (instance.props.showOnCreate && !shownOnCreate) {\n            shownOnCreate = true;\n            currentTarget = null;\n          }\n        },\n        onShow: function onShow(instance) {\n          if (instance.props.showOnCreate && !shownOnCreate) {\n            shownOnCreate = true;\n            prepareInstance(instance, references[0]);\n          }\n        },\n        onTrigger: function onTrigger(instance, event) {\n          prepareInstance(instance, event.currentTarget);\n        }\n      };\n    }\n  };\n  var singleton = tippy(div(), Object.assign({}, removeProperties(optionalProps, ['overrides']), {\n    plugins: [plugin].concat(optionalProps.plugins || []),\n    triggerTarget: triggerTargets,\n    popperOptions: Object.assign({}, optionalProps.popperOptions, {\n      modifiers: [].concat(((_optionalProps$popper = optionalProps.popperOptions) == null ? void 0 : _optionalProps$popper.modifiers) || [], [applyStylesModifier])\n    })\n  }));\n  var originalShow = singleton.show;\n\n  singleton.show = function (target) {\n    originalShow(); // first time, showOnCreate or programmatic call with no params\n    // default to showing first instance\n\n    if (!currentTarget && target == null) {\n      return prepareInstance(singleton, references[0]);\n    } // triggered from event (do nothing as prepareInstance already called by onTrigger)\n    // programmatic call with no params when already visible (do nothing again)\n\n\n    if (currentTarget && target == null) {\n      return;\n    } // target is index of instance\n\n\n    if (typeof target === 'number') {\n      return references[target] && prepareInstance(singleton, references[target]);\n    } // target is a child tippy instance\n\n\n    if (individualInstances.indexOf(target) >= 0) {\n      var ref = target.reference;\n      return prepareInstance(singleton, ref);\n    } // target is a ReferenceElement\n\n\n    if (references.indexOf(target) >= 0) {\n      return prepareInstance(singleton, target);\n    }\n  };\n\n  singleton.showNext = function () {\n    var first = references[0];\n\n    if (!currentTarget) {\n      return singleton.show(0);\n    }\n\n    var index = references.indexOf(currentTarget);\n    singleton.show(references[index + 1] || first);\n  };\n\n  singleton.showPrevious = function () {\n    var last = references[references.length - 1];\n\n    if (!currentTarget) {\n      return singleton.show(last);\n    }\n\n    var index = references.indexOf(currentTarget);\n    var target = references[index - 1] || last;\n    singleton.show(target);\n  };\n\n  var originalSetProps = singleton.setProps;\n\n  singleton.setProps = function (props) {\n    overrides = props.overrides || overrides;\n    originalSetProps(props);\n  };\n\n  singleton.setInstances = function (nextInstances) {\n    enableInstances(true);\n    interceptSetPropsCleanups.forEach(function (fn) {\n      return fn();\n    });\n    individualInstances = nextInstances;\n    enableInstances(false);\n    setReferences();\n    setTriggerTargets();\n    interceptSetPropsCleanups = interceptSetProps(singleton);\n    singleton.setProps({\n      triggerTarget: triggerTargets\n    });\n  };\n\n  interceptSetPropsCleanups = interceptSetProps(singleton);\n  return singleton;\n};\n\nvar BUBBLING_EVENTS_MAP = {\n  mouseover: 'mouseenter',\n  focusin: 'focus',\n  click: 'click'\n};\n/**\n * Creates a delegate instance that controls the creation of tippy instances\n * for child elements (`target` CSS selector).\n */\n\nfunction delegate(targets, props) {\n  /* istanbul ignore else */\n  if (false) {}\n\n  var listeners = [];\n  var childTippyInstances = [];\n  var disabled = false;\n  var target = props.target;\n  var nativeProps = removeProperties(props, ['target']);\n  var parentProps = Object.assign({}, nativeProps, {\n    trigger: 'manual',\n    touch: false\n  });\n  var childProps = Object.assign({\n    touch: defaultProps.touch\n  }, nativeProps, {\n    showOnCreate: true\n  });\n  var returnValue = tippy(targets, parentProps);\n  var normalizedReturnValue = normalizeToArray(returnValue);\n\n  function onTrigger(event) {\n    if (!event.target || disabled) {\n      return;\n    }\n\n    var targetNode = event.target.closest(target);\n\n    if (!targetNode) {\n      return;\n    } // Get relevant trigger with fallbacks:\n    // 1. Check `data-tippy-trigger` attribute on target node\n    // 2. Fallback to `trigger` passed to `delegate()`\n    // 3. Fallback to `defaultProps.trigger`\n\n\n    var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore\n\n    if (targetNode._tippy) {\n      return;\n    }\n\n    if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') {\n      return;\n    }\n\n    if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type]) < 0) {\n      return;\n    }\n\n    var instance = tippy(targetNode, childProps);\n\n    if (instance) {\n      childTippyInstances = childTippyInstances.concat(instance);\n    }\n  }\n\n  function on(node, eventType, handler, options) {\n    if (options === void 0) {\n      options = false;\n    }\n\n    node.addEventListener(eventType, handler, options);\n    listeners.push({\n      node: node,\n      eventType: eventType,\n      handler: handler,\n      options: options\n    });\n  }\n\n  function addEventListeners(instance) {\n    var reference = instance.reference;\n    on(reference, 'touchstart', onTrigger, TOUCH_OPTIONS);\n    on(reference, 'mouseover', onTrigger);\n    on(reference, 'focusin', onTrigger);\n    on(reference, 'click', onTrigger);\n  }\n\n  function removeEventListeners() {\n    listeners.forEach(function (_ref) {\n      var node = _ref.node,\n          eventType = _ref.eventType,\n          handler = _ref.handler,\n          options = _ref.options;\n      node.removeEventListener(eventType, handler, options);\n    });\n    listeners = [];\n  }\n\n  function applyMutations(instance) {\n    var originalDestroy = instance.destroy;\n    var originalEnable = instance.enable;\n    var originalDisable = instance.disable;\n\n    instance.destroy = function (shouldDestroyChildInstances) {\n      if (shouldDestroyChildInstances === void 0) {\n        shouldDestroyChildInstances = true;\n      }\n\n      if (shouldDestroyChildInstances) {\n        childTippyInstances.forEach(function (instance) {\n          instance.destroy();\n        });\n      }\n\n      childTippyInstances = [];\n      removeEventListeners();\n      originalDestroy();\n    };\n\n    instance.enable = function () {\n      originalEnable();\n      childTippyInstances.forEach(function (instance) {\n        return instance.enable();\n      });\n      disabled = false;\n    };\n\n    instance.disable = function () {\n      originalDisable();\n      childTippyInstances.forEach(function (instance) {\n        return instance.disable();\n      });\n      disabled = true;\n    };\n\n    addEventListeners(instance);\n  }\n\n  normalizedReturnValue.forEach(applyMutations);\n  return returnValue;\n}\n\nvar animateFill = {\n  name: 'animateFill',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var _instance$props$rende;\n\n    // @ts-ignore\n    if (!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy)) {\n      if (false) {}\n\n      return {};\n    }\n\n    var _getChildren = getChildren(instance.popper),\n        box = _getChildren.box,\n        content = _getChildren.content;\n\n    var backdrop = instance.props.animateFill ? createBackdropElement() : null;\n    return {\n      onCreate: function onCreate() {\n        if (backdrop) {\n          box.insertBefore(backdrop, box.firstElementChild);\n          box.setAttribute('data-animatefill', '');\n          box.style.overflow = 'hidden';\n          instance.setProps({\n            arrow: false,\n            animation: 'shift-away'\n          });\n        }\n      },\n      onMount: function onMount() {\n        if (backdrop) {\n          var transitionDuration = box.style.transitionDuration;\n          var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the\n          // tooltip element. `clip-path` is the other alternative but is not\n          // well-supported and is buggy on some devices.\n\n          content.style.transitionDelay = Math.round(duration / 10) + \"ms\";\n          backdrop.style.transitionDuration = transitionDuration;\n          setVisibilityState([backdrop], 'visible');\n        }\n      },\n      onShow: function onShow() {\n        if (backdrop) {\n          backdrop.style.transitionDuration = '0ms';\n        }\n      },\n      onHide: function onHide() {\n        if (backdrop) {\n          setVisibilityState([backdrop], 'hidden');\n        }\n      }\n    };\n  }\n};\n\nfunction createBackdropElement() {\n  var backdrop = div();\n  backdrop.className = BACKDROP_CLASS;\n  setVisibilityState([backdrop], 'hidden');\n  return backdrop;\n}\n\nvar mouseCoords = {\n  clientX: 0,\n  clientY: 0\n};\nvar activeInstances = [];\n\nfunction storeMouseCoords(_ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n  mouseCoords = {\n    clientX: clientX,\n    clientY: clientY\n  };\n}\n\nfunction addMouseCoordsListener(doc) {\n  doc.addEventListener('mousemove', storeMouseCoords);\n}\n\nfunction removeMouseCoordsListener(doc) {\n  doc.removeEventListener('mousemove', storeMouseCoords);\n}\n\nvar followCursor = {\n  name: 'followCursor',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference;\n    var doc = getOwnerDocument(instance.props.triggerTarget || reference);\n    var isInternalUpdate = false;\n    var wasFocusEvent = false;\n    var isUnmounted = true;\n    var prevProps = instance.props;\n\n    function getIsInitialBehavior() {\n      return instance.props.followCursor === 'initial' && instance.state.isVisible;\n    }\n\n    function addListener() {\n      doc.addEventListener('mousemove', onMouseMove);\n    }\n\n    function removeListener() {\n      doc.removeEventListener('mousemove', onMouseMove);\n    }\n\n    function unsetGetReferenceClientRect() {\n      isInternalUpdate = true;\n      instance.setProps({\n        getReferenceClientRect: null\n      });\n      isInternalUpdate = false;\n    }\n\n    function onMouseMove(event) {\n      // If the instance is interactive, avoid updating the position unless it's\n      // over the reference element\n      var isCursorOverReference = event.target ? reference.contains(event.target) : true;\n      var followCursor = instance.props.followCursor;\n      var clientX = event.clientX,\n          clientY = event.clientY;\n      var rect = reference.getBoundingClientRect();\n      var relativeX = clientX - rect.left;\n      var relativeY = clientY - rect.top;\n\n      if (isCursorOverReference || !instance.props.interactive) {\n        instance.setProps({\n          // @ts-ignore - unneeded DOMRect properties\n          getReferenceClientRect: function getReferenceClientRect() {\n            var rect = reference.getBoundingClientRect();\n            var x = clientX;\n            var y = clientY;\n\n            if (followCursor === 'initial') {\n              x = rect.left + relativeX;\n              y = rect.top + relativeY;\n            }\n\n            var top = followCursor === 'horizontal' ? rect.top : y;\n            var right = followCursor === 'vertical' ? rect.right : x;\n            var bottom = followCursor === 'horizontal' ? rect.bottom : y;\n            var left = followCursor === 'vertical' ? rect.left : x;\n            return {\n              width: right - left,\n              height: bottom - top,\n              top: top,\n              right: right,\n              bottom: bottom,\n              left: left\n            };\n          }\n        });\n      }\n    }\n\n    function create() {\n      if (instance.props.followCursor) {\n        activeInstances.push({\n          instance: instance,\n          doc: doc\n        });\n        addMouseCoordsListener(doc);\n      }\n    }\n\n    function destroy() {\n      activeInstances = activeInstances.filter(function (data) {\n        return data.instance !== instance;\n      });\n\n      if (activeInstances.filter(function (data) {\n        return data.doc === doc;\n      }).length === 0) {\n        removeMouseCoordsListener(doc);\n      }\n    }\n\n    return {\n      onCreate: create,\n      onDestroy: destroy,\n      onBeforeUpdate: function onBeforeUpdate() {\n        prevProps = instance.props;\n      },\n      onAfterUpdate: function onAfterUpdate(_, _ref2) {\n        var followCursor = _ref2.followCursor;\n\n        if (isInternalUpdate) {\n          return;\n        }\n\n        if (followCursor !== undefined && prevProps.followCursor !== followCursor) {\n          destroy();\n\n          if (followCursor) {\n            create();\n\n            if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {\n              addListener();\n            }\n          } else {\n            removeListener();\n            unsetGetReferenceClientRect();\n          }\n        }\n      },\n      onMount: function onMount() {\n        if (instance.props.followCursor && !wasFocusEvent) {\n          if (isUnmounted) {\n            onMouseMove(mouseCoords);\n            isUnmounted = false;\n          }\n\n          if (!getIsInitialBehavior()) {\n            addListener();\n          }\n        }\n      },\n      onTrigger: function onTrigger(_, event) {\n        if (isMouseEvent(event)) {\n          mouseCoords = {\n            clientX: event.clientX,\n            clientY: event.clientY\n          };\n        }\n\n        wasFocusEvent = event.type === 'focus';\n      },\n      onHidden: function onHidden() {\n        if (instance.props.followCursor) {\n          unsetGetReferenceClientRect();\n          removeListener();\n          isUnmounted = true;\n        }\n      }\n    };\n  }\n};\n\nfunction getProps(props, modifier) {\n  var _props$popperOptions;\n\n  return {\n    popperOptions: Object.assign({}, props.popperOptions, {\n      modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function (_ref) {\n        var name = _ref.name;\n        return name !== modifier.name;\n      }), [modifier])\n    })\n  };\n}\n\nvar inlinePositioning = {\n  name: 'inlinePositioning',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference;\n\n    function isEnabled() {\n      return !!instance.props.inlinePositioning;\n    }\n\n    var placement;\n    var cursorRectIndex = -1;\n    var isInternalUpdate = false;\n    var triedPlacements = [];\n    var modifier = {\n      name: 'tippyInlinePositioning',\n      enabled: true,\n      phase: 'afterWrite',\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n\n        if (isEnabled()) {\n          if (triedPlacements.indexOf(state.placement) !== -1) {\n            triedPlacements = [];\n          }\n\n          if (placement !== state.placement && triedPlacements.indexOf(state.placement) === -1) {\n            triedPlacements.push(state.placement);\n            instance.setProps({\n              // @ts-ignore - unneeded DOMRect properties\n              getReferenceClientRect: function getReferenceClientRect() {\n                return _getReferenceClientRect(state.placement);\n              }\n            });\n          }\n\n          placement = state.placement;\n        }\n      }\n    };\n\n    function _getReferenceClientRect(placement) {\n      return getInlineBoundingClientRect(tippy_headless_esm_getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);\n    }\n\n    function setInternalProps(partialProps) {\n      isInternalUpdate = true;\n      instance.setProps(partialProps);\n      isInternalUpdate = false;\n    }\n\n    function addModifier() {\n      if (!isInternalUpdate) {\n        setInternalProps(getProps(instance.props, modifier));\n      }\n    }\n\n    return {\n      onCreate: addModifier,\n      onAfterUpdate: addModifier,\n      onTrigger: function onTrigger(_, event) {\n        if (isMouseEvent(event)) {\n          var rects = arrayFrom(instance.reference.getClientRects());\n          var cursorRect = rects.find(function (rect) {\n            return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;\n          });\n          var index = rects.indexOf(cursorRect);\n          cursorRectIndex = index > -1 ? index : cursorRectIndex;\n        }\n      },\n      onHidden: function onHidden() {\n        cursorRectIndex = -1;\n      }\n    };\n  }\n};\nfunction getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {\n  // Not an inline element, or placement is not yet known\n  if (clientRects.length < 2 || currentBasePlacement === null) {\n    return boundingRect;\n  } // There are two rects and they are disjoined\n\n\n  if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {\n    return clientRects[cursorRectIndex] || boundingRect;\n  }\n\n  switch (currentBasePlacement) {\n    case 'top':\n    case 'bottom':\n      {\n        var firstRect = clientRects[0];\n        var lastRect = clientRects[clientRects.length - 1];\n        var isTop = currentBasePlacement === 'top';\n        var top = firstRect.top;\n        var bottom = lastRect.bottom;\n        var left = isTop ? firstRect.left : lastRect.left;\n        var right = isTop ? firstRect.right : lastRect.right;\n        var width = right - left;\n        var height = bottom - top;\n        return {\n          top: top,\n          bottom: bottom,\n          left: left,\n          right: right,\n          width: width,\n          height: height\n        };\n      }\n\n    case 'left':\n    case 'right':\n      {\n        var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {\n          return rects.left;\n        }));\n        var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {\n          return rects.right;\n        }));\n        var measureRects = clientRects.filter(function (rect) {\n          return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;\n        });\n        var _top = measureRects[0].top;\n        var _bottom = measureRects[measureRects.length - 1].bottom;\n        var _left = minLeft;\n        var _right = maxRight;\n\n        var _width = _right - _left;\n\n        var _height = _bottom - _top;\n\n        return {\n          top: _top,\n          bottom: _bottom,\n          left: _left,\n          right: _right,\n          width: _width,\n          height: _height\n        };\n      }\n\n    default:\n      {\n        return boundingRect;\n      }\n  }\n}\n\nvar sticky = {\n  name: 'sticky',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference,\n        popper = instance.popper;\n\n    function getReference() {\n      return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;\n    }\n\n    function shouldCheck(value) {\n      return instance.props.sticky === true || instance.props.sticky === value;\n    }\n\n    var prevRefRect = null;\n    var prevPopRect = null;\n\n    function updatePosition() {\n      var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;\n      var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;\n\n      if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {\n        if (instance.popperInstance) {\n          instance.popperInstance.update();\n        }\n      }\n\n      prevRefRect = currentRefRect;\n      prevPopRect = currentPopRect;\n\n      if (instance.state.isMounted) {\n        requestAnimationFrame(updatePosition);\n      }\n    }\n\n    return {\n      onMount: function onMount() {\n        if (instance.props.sticky) {\n          updatePosition();\n        }\n      }\n    };\n  }\n};\n\nfunction areRectsDifferent(rectA, rectB) {\n  if (rectA && rectB) {\n    return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;\n  }\n\n  return true;\n}\n\ntippy.setDefaultProps({\n  animation: false\n});\n\n/* harmony default export */ var tippy_headless_esm = (tippy);\n\n//# sourceMappingURL=tippy-headless.esm.js.map\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(3935);\n;// CONCATENATED MODULE: ./node_modules/@tippyjs/react/headless/dist/tippy-react-headless.esm.js\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar tippy_react_headless_esm_isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nfunction preserveRef(ref, node) {\n  if (ref) {\n    if (typeof ref === 'function') {\n      ref(node);\n    }\n\n    if ({}.hasOwnProperty.call(ref, 'current')) {\n      ref.current = node;\n    }\n  }\n}\nfunction ssrSafeCreateDiv() {\n  return tippy_react_headless_esm_isBrowser && document.createElement('div');\n}\nfunction toDataAttributes(attrs) {\n  var dataAttrs = {\n    'data-placement': attrs.placement\n  };\n\n  if (attrs.referenceHidden) {\n    dataAttrs['data-reference-hidden'] = '';\n  }\n\n  if (attrs.escaped) {\n    dataAttrs['data-escaped'] = '';\n  }\n\n  return dataAttrs;\n}\n\nfunction deepEqual(x, y) {\n  if (x === y) {\n    return true;\n  } else if (typeof x === 'object' && x != null && typeof y === 'object' && y != null) {\n    if (Object.keys(x).length !== Object.keys(y).length) {\n      return false;\n    }\n\n    for (var prop in x) {\n      if (y.hasOwnProperty(prop)) {\n        if (!deepEqual(x[prop], y[prop])) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction uniqueByShape(arr) {\n  var output = [];\n  arr.forEach(function (item) {\n    if (!output.find(function (outputItem) {\n      return deepEqual(item, outputItem);\n    })) {\n      output.push(item);\n    }\n  });\n  return output;\n}\nfunction deepPreserveProps(instanceProps, componentProps) {\n  var _instanceProps$popper, _componentProps$poppe;\n\n  return Object.assign({}, componentProps, {\n    popperOptions: Object.assign({}, instanceProps.popperOptions, componentProps.popperOptions, {\n      modifiers: uniqueByShape([].concat(((_instanceProps$popper = instanceProps.popperOptions) == null ? void 0 : _instanceProps$popper.modifiers) || [], ((_componentProps$poppe = componentProps.popperOptions) == null ? void 0 : _componentProps$poppe.modifiers) || []))\n    })\n  });\n}\n\nvar useIsomorphicLayoutEffect = tippy_react_headless_esm_isBrowser ? react.useLayoutEffect : react.useEffect;\nfunction useMutableBox(initialValue) {\n  // Using refs instead of state as it's recommended to not store imperative\n  // values in state due to memory problems in React(?)\n  var ref = (0,react.useRef)();\n\n  if (!ref.current) {\n    ref.current = typeof initialValue === 'function' ? initialValue() : initialValue;\n  }\n\n  return ref.current;\n}\n\nfunction updateClassName(box, action, classNames) {\n  classNames.split(/\\s+/).forEach(function (name) {\n    if (name) {\n      box.classList[action](name);\n    }\n  });\n}\n\nvar classNamePlugin = {\n  name: 'className',\n  defaultValue: '',\n  fn: function fn(instance) {\n    var box = instance.popper.firstElementChild;\n\n    var isDefaultRenderFn = function isDefaultRenderFn() {\n      var _instance$props$rende;\n\n      return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);\n    };\n\n    function add() {\n      if (instance.props.className && !isDefaultRenderFn()) {\n        if (false) {}\n\n        return;\n      }\n\n      updateClassName(box, 'add', instance.props.className);\n    }\n\n    function remove() {\n      if (isDefaultRenderFn()) {\n        updateClassName(box, 'remove', instance.props.className);\n      }\n    }\n\n    return {\n      onCreate: add,\n      onBeforeUpdate: remove,\n      onAfterUpdate: add\n    };\n  }\n};\n\nfunction TippyGenerator(tippy) {\n  function Tippy(_ref) {\n    var children = _ref.children,\n        content = _ref.content,\n        visible = _ref.visible,\n        singleton = _ref.singleton,\n        render = _ref.render,\n        reference = _ref.reference,\n        _ref$disabled = _ref.disabled,\n        disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n        _ref$ignoreAttributes = _ref.ignoreAttributes,\n        ignoreAttributes = _ref$ignoreAttributes === void 0 ? true : _ref$ignoreAttributes,\n        __source = _ref.__source,\n        __self = _ref.__self,\n        restOfNativeProps = _objectWithoutPropertiesLoose(_ref, [\"children\", \"content\", \"visible\", \"singleton\", \"render\", \"reference\", \"disabled\", \"ignoreAttributes\", \"__source\", \"__self\"]);\n\n    var isControlledMode = visible !== undefined;\n    var isSingletonMode = singleton !== undefined;\n\n    var _useState = (0,react.useState)(false),\n        mounted = _useState[0],\n        setMounted = _useState[1];\n\n    var _useState2 = (0,react.useState)({}),\n        attrs = _useState2[0],\n        setAttrs = _useState2[1];\n\n    var _useState3 = (0,react.useState)(),\n        singletonContent = _useState3[0],\n        setSingletonContent = _useState3[1];\n\n    var mutableBox = useMutableBox(function () {\n      return {\n        container: ssrSafeCreateDiv(),\n        renders: 1\n      };\n    });\n    var props = Object.assign({\n      ignoreAttributes: ignoreAttributes\n    }, restOfNativeProps, {\n      content: mutableBox.container\n    });\n\n    if (isControlledMode) {\n      if (false) {}\n\n      props.trigger = 'manual';\n      props.hideOnClick = false;\n    }\n\n    if (isSingletonMode) {\n      disabled = true;\n    }\n\n    var computedProps = props;\n    var plugins = props.plugins || [];\n\n    if (render) {\n      computedProps = Object.assign({}, props, {\n        plugins: isSingletonMode ? [].concat(plugins, [{\n          fn: function fn() {\n            return {\n              onTrigger: function onTrigger(_, event) {\n                var _singleton$data$child = singleton.data.children.find(function (_ref2) {\n                  var instance = _ref2.instance;\n                  return instance.reference === event.currentTarget;\n                }),\n                    content = _singleton$data$child.content;\n\n                setSingletonContent(content);\n              }\n            };\n          }\n        }]) : plugins,\n        render: function render() {\n          return {\n            popper: mutableBox.container\n          };\n        }\n      });\n    }\n\n    var deps = [reference].concat(children ? [children.type] : []); // CREATE\n\n    useIsomorphicLayoutEffect(function () {\n      var element = reference;\n\n      if (reference && reference.hasOwnProperty('current')) {\n        element = reference.current;\n      }\n\n      var instance = tippy(element || mutableBox.ref || ssrSafeCreateDiv(), Object.assign({}, computedProps, {\n        plugins: [classNamePlugin].concat(props.plugins || [])\n      }));\n      mutableBox.instance = instance;\n\n      if (disabled) {\n        instance.disable();\n      }\n\n      if (visible) {\n        instance.show();\n      }\n\n      if (isSingletonMode) {\n        singleton.hook({\n          instance: instance,\n          content: content,\n          props: computedProps\n        });\n      }\n\n      setMounted(true);\n      return function () {\n        instance.destroy();\n        singleton == null ? void 0 : singleton.cleanup(instance);\n      };\n    }, deps); // UPDATE\n\n    useIsomorphicLayoutEffect(function () {\n      var _instance$popperInsta;\n\n      // Prevent this effect from running on 1st render\n      if (mutableBox.renders === 1) {\n        mutableBox.renders++;\n        return;\n      }\n\n      var instance = mutableBox.instance;\n      instance.setProps(deepPreserveProps(instance.props, computedProps)); // Fixes #264\n\n      (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.forceUpdate();\n\n      if (disabled) {\n        instance.disable();\n      } else {\n        instance.enable();\n      }\n\n      if (isControlledMode) {\n        if (visible) {\n          instance.show();\n        } else {\n          instance.hide();\n        }\n      }\n\n      if (isSingletonMode) {\n        singleton.hook({\n          instance: instance,\n          content: content,\n          props: computedProps\n        });\n      }\n    });\n    useIsomorphicLayoutEffect(function () {\n      var _instance$props$poppe;\n\n      if (!render) {\n        return;\n      }\n\n      var instance = mutableBox.instance;\n      instance.setProps({\n        popperOptions: Object.assign({}, instance.props.popperOptions, {\n          modifiers: [].concat((((_instance$props$poppe = instance.props.popperOptions) == null ? void 0 : _instance$props$poppe.modifiers) || []).filter(function (_ref3) {\n            var name = _ref3.name;\n            return name !== '$$tippyReact';\n          }), [{\n            name: '$$tippyReact',\n            enabled: true,\n            phase: 'beforeWrite',\n            requires: ['computeStyles'],\n            fn: function fn(_ref4) {\n              var _state$modifiersData;\n\n              var state = _ref4.state;\n              var hideData = (_state$modifiersData = state.modifiersData) == null ? void 0 : _state$modifiersData.hide; // WARNING: this is a high-risk path that can cause an infinite\n              // loop. This expression _must_ evaluate to false when required\n\n              if (attrs.placement !== state.placement || attrs.referenceHidden !== (hideData == null ? void 0 : hideData.isReferenceHidden) || attrs.escaped !== (hideData == null ? void 0 : hideData.hasPopperEscaped)) {\n                setAttrs({\n                  placement: state.placement,\n                  referenceHidden: hideData == null ? void 0 : hideData.isReferenceHidden,\n                  escaped: hideData == null ? void 0 : hideData.hasPopperEscaped\n                });\n              }\n\n              state.attributes.popper = {};\n            }\n          }])\n        })\n      });\n    }, [attrs.placement, attrs.referenceHidden, attrs.escaped].concat(deps));\n    return /*#__PURE__*/react.createElement(react.Fragment, null, children ? /*#__PURE__*/(0,react.cloneElement)(children, {\n      ref: function ref(node) {\n        mutableBox.ref = node;\n        preserveRef(children.ref, node);\n      }\n    }) : null, mounted && /*#__PURE__*/(0,react_dom.createPortal)(render ? render(toDataAttributes(attrs), singletonContent, mutableBox.instance) : content, mutableBox.container));\n  }\n\n  return Tippy;\n}\n\nfunction useSingletonGenerator(createSingleton) {\n  return function useSingleton(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$disabled = _ref.disabled,\n        disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n        _ref$overrides = _ref.overrides,\n        overrides = _ref$overrides === void 0 ? [] : _ref$overrides;\n\n    var _useState = (0,react.useState)(false),\n        mounted = _useState[0],\n        setMounted = _useState[1];\n\n    var mutableBox = useMutableBox({\n      children: [],\n      renders: 1\n    });\n    useIsomorphicLayoutEffect(function () {\n      if (!mounted) {\n        setMounted(true);\n        return;\n      }\n\n      var children = mutableBox.children,\n          sourceData = mutableBox.sourceData;\n\n      if (!sourceData) {\n        if (false) {}\n\n        return;\n      }\n\n      var instance = createSingleton(children.map(function (child) {\n        return child.instance;\n      }), Object.assign({}, sourceData.props, {\n        popperOptions: sourceData.instance.props.popperOptions,\n        overrides: overrides,\n        plugins: [classNamePlugin].concat(sourceData.props.plugins || [])\n      }));\n      mutableBox.instance = instance;\n\n      if (disabled) {\n        instance.disable();\n      }\n\n      return function () {\n        instance.destroy();\n        mutableBox.children = children.filter(function (_ref2) {\n          var instance = _ref2.instance;\n          return !instance.state.isDestroyed;\n        });\n      };\n    }, [mounted]);\n    useIsomorphicLayoutEffect(function () {\n      if (!mounted) {\n        return;\n      }\n\n      if (mutableBox.renders === 1) {\n        mutableBox.renders++;\n        return;\n      }\n\n      var children = mutableBox.children,\n          instance = mutableBox.instance,\n          sourceData = mutableBox.sourceData;\n\n      if (!(instance && sourceData)) {\n        return;\n      }\n\n      var _sourceData$props = sourceData.props,\n          content = _sourceData$props.content,\n          props = _objectWithoutPropertiesLoose(_sourceData$props, [\"content\"]);\n\n      instance.setProps(deepPreserveProps(instance.props, Object.assign({}, props, {\n        overrides: overrides\n      })));\n      instance.setInstances(children.map(function (child) {\n        return child.instance;\n      }));\n\n      if (disabled) {\n        instance.disable();\n      } else {\n        instance.enable();\n      }\n    });\n    return (0,react.useMemo)(function () {\n      var source = {\n        data: mutableBox,\n        hook: function hook(data) {\n          mutableBox.sourceData = data;\n        },\n        cleanup: function cleanup() {\n          mutableBox.sourceData = null;\n        }\n      };\n      var target = {\n        hook: function hook(data) {\n          if (!mutableBox.children.find(function (_ref3) {\n            var instance = _ref3.instance;\n            return data.instance === instance;\n          })) {\n            mutableBox.children.push(data);\n\n            if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {\n              mutableBox.instance.setInstances(mutableBox.children.map(function (child) {\n                return child.instance;\n              }));\n            }\n          }\n        },\n        cleanup: function cleanup(instance) {\n          mutableBox.children = mutableBox.children.filter(function (data) {\n            return data.instance !== instance;\n          });\n\n          if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {\n            mutableBox.instance.setInstances(mutableBox.children.map(function (child) {\n              return child.instance;\n            }));\n          }\n        }\n      };\n      return [source, target];\n    }, []);\n  };\n}\n\nvar forwardRef = (function (Tippy, defaultProps) {\n  return /*#__PURE__*/(0,react.forwardRef)(function TippyWrapper(_ref, _ref2) {\n    var children = _ref.children,\n        props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n    return (\n      /*#__PURE__*/\n      // If I spread them separately here, Babel adds the _extends ponyfill for\n      // some reason\n      react.createElement(Tippy, Object.assign({}, defaultProps, props), children ? /*#__PURE__*/(0,react.cloneElement)(children, {\n        ref: function ref(node) {\n          preserveRef(_ref2, node);\n          preserveRef(children.ref, node);\n        }\n      }) : null)\n    );\n  });\n});\n\nvar useSingleton = /*#__PURE__*/useSingletonGenerator(createSingleton);\nvar headless = /*#__PURE__*/forwardRef( /*#__PURE__*/TippyGenerator(tippy_headless_esm), {\n  render: function render() {\n    return '';\n  }\n});\n\n/* harmony default export */ var tippy_react_headless_esm = (headless);\n\n//# sourceMappingURL=tippy-react-headless.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3126\n")},5814:function(module,__unused_webpack_exports,__webpack_require__){eval("/* eslint-disable global-require */\nif (true) {\n  module.exports = __webpack_require__(1885);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdWktY29tcG9uZW50cy13ZWIvbWwtY2FyZHMtd2ViL2NhcmQvRGVza3RvcEdyaWQuanM/ZDVlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUksSUFBcUM7QUFDekMsRUFBRSwwQ0FBNEQ7QUFDOUQsQ0FBQyxNQUFNLEVBRU4iLCJmaWxlIjoiNTgxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGdsb2JhbC1yZXF1aXJlICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2xpYi9EZXNrdG9wR3JpZC5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2xpYi9EZXNrdG9wR3JpZC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5814\n")},1885:function(module,__unused_webpack_exports,__webpack_require__){eval('module.exports=function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=113)}([function(e,r){e.exports=__webpack_require__(7294)},function(e,r){e.exports=__webpack_require__(4184)},function(e,r){e.exports=__webpack_require__(5697)},function(e,r,n){function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}var o;function l(e,r,n,t){o||(o="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=t;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:o,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}var a=n(0),i=n(24),c=n(1),u=n(25),s=n(6),f=n(11),d=/{([\\s\\S]+?)}/g,p=n(12),v=l("br",{});e.exports=function(e){var r=e.text,n=e.values,o=void 0===n?null:n,m=e.styles,y=void 0===m?null:m,b=e.class_name,h=void 0===b?null:b,g=e.html_tag,_=void 0===g?null:g,w=e.onClick,x=void 0===w?null:w,S=e.url,k=void 0===S?null:S,P=e.id,N=e.target;if(i(o))return l(u,{text:r,styles:y,className:h,html_tag:_,onClick:x,href:k,id:P,target:N});for(var O=h?"ui-card-ml-label ui-card-ml-".concat(h):"ui-card-ml-label",j=r.split(d),$=0;$<j.length;$+=1){var C=j[$];if(Object.prototype.hasOwnProperty.call(o,C)){var A=o[C];switch(A.type){case"PRICE":j[$]=a.createElement(p,A);break;case"ICON":j[$]=f(A.icon_id,A.text);break;case"break":j[$]=v;break;default:j[$]=a.createElement(u,A)}}else""!==C&&(j[$]=a.createElement(u,{text:C}))}return l("p",{className:c(h,O,t({},"".concat(y?s(y):""),y))},void 0,j)}},function(e,r,n){var t=n(3);e.exports=t},function(e,r,n){var t=n(17);e.exports=t},function(e,r,n){var t=n(1),o=n(18),l=n(19),a=n(20),i=n(21),c=n(22),u=n(23);e.exports=function(e){var r=e.margin_top,n=e.margin_bottom,s=e.font_size,f=e.font_weight,d=e.background_color,p=e.className,v=e.color;return t(u(d,i(v,o(s,a(r,l(n,c(f,p)))))))}},function(e,r){e.exports=__webpack_require__(8878)},function(e,r,n){var t=n(14);e.exports=t},function(e,r){e.exports=__webpack_require__(8876)},function(e,r){e.exports=__webpack_require__(4493)},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(26),a=o(n(27),{});e.exports=function(e,r){switch(e){case"full_icon":return o(l,{text:r});case"warning_icon":return a;default:return null}}},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(2),a=(l.string,l.bool,n(10)),i=n(1),c=n(6),u=function(e){var r,n,t,l=e.text,u=e.decimal,s=e.currency_symbol,f=e.className,d=e.strikeThrough,p=e.styles;return o(a,{className:i("ui-card-ml-price__part",f,(r={},n="".concat(p?c(p):""),t=p,n in r?Object.defineProperty(r,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[n]=t,r)),amount:{fraction:l,symbol:s,cents:u||null},disabled:d})};u.defaultProps={className:null,showDecimals:!0,strikeThrough:!1},e.exports=u},,function(e,r,n){var t=n(0).createContext(),o=t.Provider,l=t.Consumer;e.exports=t,(r=e.exports).StaticPropsProvider=o,r.StaticPropsConsumer=l},function(e,r,n){var t=n(16),o={};o.PILL=n(5),o.LABEL=n(3),o.PRICE=n(28),o.REBATES=n(29),o.PROMISES=n(31),o.ACTIONS=n(33);o.TITLE=n(38),o.SELLER=n(40),o.PAUSED=n(42),o.SHIPPING=n(44),o.HIGHLIGHT=n(46),o.LAST_AVAILABLE=n(48);var l=t(o);e.exports=l},function(e,r,n){var t=n(0);e.exports=function(e){return function(r){var n=e[r.type];if(!n)return null;var o=r;return t.createElement(n,o)}}},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}function l(){return(l=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var a=n(0),i=n(1),c=n(2),u=(c.string,c.shape,c.number,n(6)),s=n(3),f=function(e){var r,n,t,c=e.class_name,f=e.label,d=e.styles,p=c?"ui-card-ml-pill ui-card-ml-".concat(c," ui-card-ml-").concat(c,"__pill"):"ui-card-ml-pill";return o("div",{className:i(p,(r={},n="".concat(d?u(d):""),t=d,n in r?Object.defineProperty(r,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[n]=t,r))},void 0,f&&a.createElement(s,l({},f,{className:i("".concat(p,"__label"))})))};f.defaultProps={class_name:null,type:null,icon:null,label:null,background:null},e.exports=f},function(e,r,n){var t=n(1);e.exports=function(e,r){var n,o,l,a="string"==typeof e&&e;return t((n={},o="".concat("ui-card-ml-font-size","--").concat(a),l=a,o in n?Object.defineProperty(n,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[o]=l,n),r)}},function(e,r,n){var t=n(1);e.exports=function(e,r){var n,o,l,a="string"==typeof e&&e;return t((n={},o="".concat("ui-card-ml-margin-bottom","--").concat(a),l=a,o in n?Object.defineProperty(n,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[o]=l,n),r)}},function(e,r,n){var t=n(1);e.exports=function(e,r){var n,o,l,a="string"==typeof e&&e;return t((n={},o="".concat("ui-card-ml-margin-top","--").concat(a),l=a,o in n?Object.defineProperty(n,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[o]=l,n),r)}},function(e,r,n){var t=n(1);e.exports=function(e,r){var n,o,l,a="string"==typeof e&&e;return t((n={},o="".concat("ui-card-ml-color","--").concat(a),l=a,o in n?Object.defineProperty(n,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[o]=l,n),r)}},function(e,r,n){var t=n(1);e.exports=function(e,r){var n,o,l,a="string"==typeof e&&e;return t((n={},o="".concat("ui-card-ml-weight","--").concat(a),l=a,o in n?Object.defineProperty(n,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[o]=l,n),r)}},function(e,r,n){var t=n(1);e.exports=function(e,r){var n,o,l,a="string"==typeof e?e:e&&!1;return t((n={},o="".concat("ui-card-ml-background-color","--").concat(a),l=a,o in n?Object.defineProperty(n,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[o]=l,n),r)}},function(e,r){e.exports=__webpack_require__(1609)},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(2),a=(l.string,l.bool,l.node,l.oneOf,l.oneOfType,n(1)),i=n(6),c=function(e){var r,n,t,l=e.styles,c=e.text,u=e.html_tag,s=e.className,f=e.href,d=void 0===f?null:f,p=e.onClick,v=void 0===p?null:p,m=e.target,y=s?"ui-card-ml-label ui-card-ml-".concat(s):"ui-card-ml-label";return o(u||"span",{className:a(y,(r={},n="".concat(l?i(l):""),t=l,n in r?Object.defineProperty(r,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[n]=t,r)),href:"a"===u&&d,onClick:v},void 0,"a"!==u&&d?o("a",{className:"ui-card-ml__link",href:d,target:m},void 0,c&&c.trim()):c&&c.trim())};c.defaultProps={html_tag:"span",alignment:null,withDangerous:!1,bg_color:null,className:null,text:null,color:null,font_family:null,font_size:null,id:null},e.exports=c},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}var l=n(0),a=(n(2).string,n(1)),i=o("path",{d:"M6.4 0h12.8l-6.4 11.429h10.667l-17.067 20.571 4.267-13.714h-10.667l6.4-18.286zM34.626 23.467h-4.77l4.077-18.498h13.562l-0.915 4.16h-8.791l-0.61 2.884h8.57l-0.915 4.16h-8.597l-1.609 7.294zM57.687 23.799c-5.685 0-8.486-2.718-8.486-6.601 0-0.305 0.083-0.943 0.139-1.22l2.441-11.010h4.853l-2.413 10.899c-0.028 0.139-0.083 0.444-0.083 0.777 0.028 1.525 1.193 2.995 3.55 2.995 2.551 0 3.855-1.609 4.326-3.772l2.413-10.899h4.826l-2.413 10.982c-0.998 4.493-3.439 7.849-9.152 7.849zM82.33 23.467h-12.203l4.077-18.498h4.77l-3.134 14.338h7.405l-0.915 4.16zM98.596 23.467h-12.203l4.077-18.498h4.77l-3.134 14.338h7.405l-0.915 4.16z"}),c=function(e){var r=e.className,n=e.text;return o("svg",{className:a("ui-card-ml-icon ui-card-ml-icon--full",r),viewBox:"0 0 100 32",xmlns:"http://www.w3.org/2000/svg","aria-label":n},void 0,i)};c.defaultProps={className:null},e.exports=l.memo(c)},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}var l=n(0),a=(n(2).string,n(1)),i=o("path",{d:"M0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8Z",fill:"#FF7733"}),c=o("path",{d:"M8.96967 3.87878H7.03027L7.2727 9.21212H8.72724L8.96967 3.87878Z",fill:"white"}),u=o("path",{d:"M7.99997 10.1818C8.53552 10.1818 8.96967 10.616 8.96967 11.1515C8.96967 11.6871 8.53552 12.1212 7.99997 12.1212C7.46442 12.1212 7.03027 11.6871 7.03027 11.1515C7.03027 10.616 7.46442 10.1818 7.99997 10.1818Z",fill:"white"}),s=function(e){var r=e.className;return o("svg",{className:a("ui-card-ml-icon ui-card-ml-icon--warning",r),xmlns:"http://www.w3.org/2000/svg"},void 0,i,c,u)};s.defaultProps={className:null},e.exports=l.memo(s)},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}var a=n(0),i=n(2),c=n(1),u=n(12),s=n(3),f="ui-card-ml-price",d=(i.bool,i.string,i.number,i.shape,function(e){var r=e.bold,n=e.className,t=e.original_value,i=e.discount,d=e.cross_outed_price,p=e.from,v=e.subtitle,m=e.installments;return o("div",{className:c(f,n,l({},"".concat(f,"--").concat(t.class_name),t.class_name))},void 0,d&&o(u,{className:c("".concat(f,"__original-value")),text:d.text,currency_symbol:d.currency_symbol,decimal:d.decimal,strikeThrough:!0,styles:d.styles}),p&&s(p),o("div",{className:c("".concat(f,"__second-line"),l({},"".concat(f,"__second-line--bold"),r))},void 0,o(u,{text:t.text,decimal:t.decimal,currency_symbol:t.currency_symbol,styles:t.styles,class_name:t.class_name}),i&&o("span",{className:c("".concat(f,"__second-line__label"))},void 0,i&&a.createElement(a.Fragment,null,s(i)))),v&&o("div",{className:"".concat(f,"__subtitle")},void 0,s(v)),m&&o("div",{className:"".concat(f,"__installments")},void 0,s(m)))});d.defaultProps={bold:!1,className:null,discountLabel:null,from:null,original_price:null,thousandSeparator:null,decimalSeparator:null,discount_label:null,discountSource:null,showDecimals:!0},e.exports=d},function(e,r,n){var t=n(30);e.exports=t},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}function l(){return(l=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var a=n(0),i=n(5),c="ui-card-ml-price-rebates";e.exports=function(e){var r=e.tags;return o("div",{className:c},void 0,r.map((function(e){return o("div",{className:"".concat(c,"__wrapper-tags")},void 0,a.createElement(i,l({},e.tag,{className:"".concat(c,"__tag")})),e.info&&a.createElement(i,l({className:"".concat(c,"__info")},e.info)))})))}},function(e,r,n){var t=n(32);e.exports=t},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(1),a=n(5),i=n(11);e.exports=function(e){var r=e.label,n=e.icon,t=e.styles;return o("div",{className:"ui-card-ml-promises"},void 0,o(a,{className:l("".concat("ui-card-ml-promises","__pill")),label:r,styles:t,icon:n}),n&&i(n.icon_id,n.text))}},function(e,r,n){var t=n(34);e.exports=t},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(2),a=(l.shape,l.bool,n(1)),i=n(35),c=n(36),u=n(37),s="ui-card-ml-actions",f=function(e){var r=e.actions,n=e.hovered;return o("div",{className:i(n,s)},void 0,o("ul",{className:"".concat(s,"__content")},void 0,r.map((function(e){switch(e.type){case"ACTION_BUTTON":return o("li",{className:i(e.hovered,a(e.class_name,"".concat(s,"__content-item")))},void 0,o(c,{data:e}));case"ACTION_LINK":return o("li",{className:i(e.hovered,"".concat(s,"__content-item"))},void 0,o(u,{data:e}))}return""}))))};f.defaultProps={hovered:!1},e.exports=f},function(e,r,n){var t=n(1);e.exports=function(e,r){var n,o,l;return t((n={},o="".concat("ui-card-ml-component-hover"),l=e,o in n?Object.defineProperty(n,o,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[o]=l,n),r)}},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(3);e.exports=function(e){var r=e.data,n=r.handleClickButtonAction;return o("div",{},void 0,o("form",{method:r.method,className:"ui-card-ml-action-button",onSubmit:n},void 0,o("button",{type:"submit",className:"ui-card-ml-action-button","aria-label":r.label.text,formAction:r.formaction},void 0,l(r.label)),r.data&&Object.entries(r.data).map((function(e){return o("input",{type:"hidden",name:e[0],value:e[1]})}))))}},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(3);e.exports=function(e){var r=e.data;return o("div",{className:"ui-card-ml-action-button"},void 0,l(r.label))}},function(e,r,n){e.exports=n(39)},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(4);e.exports=function(e){var r=e.title,n=r.html_tag||"p";return o(l,{class_name:"ui-card-ml-title",styles:r.styles,text:r.text,html_tag:n})}},function(e,r,n){var t=n(41);e.exports=t},function(e,r,n){function t(){return(t=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var o=n(0),l=n(4);e.exports=function(e){var r=e.seller;return o.createElement(l,t({class_name:"ui-card-ml-seller"},r.label,{as:"span"}))}},function(e,r,n){var t=n(43);e.exports=t},function(e,r,n){function t(){return(t=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var o=n(0),l=n(1),a=n(4);e.exports=function(e){var r=e.paused;return o.createElement(a,t({class_name:l("ui-card-ml-paused","".concat("ui-card-ml-paused","__label"))},r))}},function(e,r,n){var t=n(45);e.exports=t},function(e,r,n){function t(){return(t=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var o=n(0),l=n(1),a=n(4);e.exports=function(e){var r=e.shipping;return o.createElement(a,t({class_name:l("ui-card-ml-shipping","".concat("ui-card-ml-shipping","__label"))},r))}},function(e,r,n){var t=n(47);e.exports=t},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(1),a=n(2),i=(a.string,a.shape,a.number,n(5)),c=function(e){var r=e.icon,n=e.label,t=e.styles;return o(i,{class_name:l("ui-card-ml-hightlight","".concat("ui-card-ml-hightlight","__pill")),label:n,styles:t,icon:r})};c.defaultProps={class_name:null,type:null,icon:null,label:null,background:null},e.exports=c},function(e,r,n){var t=n(49);e.exports=t},function(e,r,n){function t(){return(t=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var o=n(0),l=n(4);e.exports=function(e){var r=e.availability;return o.createElement(l,t({class_name:"ui-card-ml-last-available"},r.label))}},function(e,r,n){var t=n(51);e.exports=t},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0);var l=n(0).useContext,a=n(2),i=(a.string,a.bool,n(1)),c=n(52),u=n(8),s="ui-card-ml-bookmark",f=o(c,{className:"".concat(s,"__icon-bookmark")}),d=function(e){var r,n,t,a=e.className,c=e.bookmarked,d=l(u),p=d.mainInfo,v=d.handleClickBookmark;return o("form",{className:"".concat(i(s,a,(r={},n="".concat(s,"--active"),t=c,n in r?Object.defineProperty(r,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[n]=t,r))),method:"POST",onSubmit:function(e){e.preventDefault(),v&&v(e,p.id)},"data-testid":"bookmark"},void 0,o("button",{type:"submit",className:"".concat(s,"__btn"),role:"switch","aria-checked":c,"aria-label":"favorito"},void 0,f))};d.defaultProps={bookmarked:!1,className:""},e.exports=d},function(e,r,n){var t;function o(e,r,n,o){t||(t="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=o;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:t,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}n(0),n(2).string;var l=n(1),a=o("g",{strokeWidth:"1.0",fillRule:"evenodd"},void 0,o("path",{d:"M10.977 2.705C11.93 1.618 13.162 1 14.895 1c3.333 0 5.607 2.152 5.607 6.274 0 .08-.002.16-.005.24-.107 2.596-1.876 5.253-4.737 7.892a33.77 33.77 0 0 1-3.165 2.57 32.447 32.447 0 0 1-1.45.983l-.394.243-.394-.243-.009-.005-.021-.014-.08-.05a32.447 32.447 0 0 1-1.34-.914 33.77 33.77 0 0 1-3.165-2.57c-2.86-2.639-4.63-5.296-4.737-7.892A5.839 5.839 0 0 1 1 7.274C1 3.152 3.274 1 6.607 1c1.733 0 2.966.618 3.918 1.705.056.064.137.165.226.282.09-.117.17-.218.226-.282z"})),i=function(e){var r=e.className;return o("svg",{className:l("ui-card-ml-icon ui-card-ml-icon--bookmark",r),viewBox:"0 0 22 20",xmlns:"http://www.w3.org/2000/svg"},void 0,a)};i.defaultProps={className:null},e.exports=i},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,r,n){e.exports=n(114)},function(e,r,n){var t=n(115);r.CardDesktopGrid=t},function(e,r,n){function t(){return(t=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var o;function l(e,r,n,t){o||(o="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var l=e&&e.defaultProps,a=arguments.length-3;if(r||0===a||(r={children:void 0}),1===a)r.children=t;else if(a>1){for(var i=new Array(a),c=0;c<a;c++)i[c]=arguments[c+3];r.children=i}if(r&&l)for(var u in l)void 0===r[u]&&(r[u]=l[u]);else r||(r=l||{});return{$$typeof:o,type:e,key:void 0===n?null:""+n,ref:null,props:r,_owner:null}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=n(0),c=n(7),u=n(7).CardContent,s=n(9),f=n(1),d=n(8).StaticPropsProvider,p=n(15),v=n(50),m="ui-card-ml",y=function(e){var r,n,o,y=e.classname,b=e.components,h=e.picture,g=e.item_settings,_=e.main_info,w=e.preload,x=e.bookmark,S=e.handleClickBookmark,k=e.handleClickButtonAction,P=e.lowEnd,N=e.target,O=f(y,"".concat(m),(r={},n="".concat(m,"--").concat(g.type),o=g.type,n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,r));return l(c,{className:O,animated:!1},void 0,l(d,{value:{itemSettings:g,mainInfo:_,handleClickBookmark:S,handleClickButtonAction:k}},void 0,l(u,{className:"".concat(m,"__card-content")},void 0,"object"===a(h)&&Object.keys(h).length>1&&l("div",{className:"".concat(m,"__container-image")},void 0,l("figure",{className:"".concat(m,"__figure")},void 0,l(s,{alt:"",className:"".concat(m,"__image"),src:h[g.type].url,width:h[g.type].width,height:h[g.type].height,preload:w,lazyload:w?"off":"on",lowEnd:P,"aria-hidden":!0}))),l("div",{className:"".concat(m,"__container-components-card")},void 0,l("div",{className:"".concat(m,"__components-card")},void 0,b&&b.map((function(e,r){return i.createElement(p,t({},e,{key:"".concat(e.id,"-").concat(r),namespace:m,target:N}))}))),x&&i.createElement(v,x)))))};y.defaultProps={classname:"",components:[],picture:{},item_settings:{},main_info:{},preload:!1,checkbox:void 0,bookmark:void 0,handleClickBookmark:void 0,handleClickButtonAction:void 0,lowEnd:!1,target:void 0},e.exports=y}]);\n//# sourceMappingURL=DesktopGrid.production.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1885\n')},203:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("/**\n * Styles\n */\n__webpack_require__(5352);\n\n/**\n * Module dependencies\n */\nvar startApp = __webpack_require__(4282);\nvar Navigation = __webpack_require__(8381);\nstartApp(Navigation, 'root-app');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jbGllbnQvZW50cnktcG9pbnRzL25hdmlnYXRpb24uZGVza3RvcC5qcz9lNmYyIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJzdGFydEFwcCIsIk5hdmlnYXRpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBQSxtQkFBTyxDQUFDLElBQXVELENBQUM7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBLElBQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyxJQUFjLENBQUM7QUFDeEMsSUFBTUUsVUFBVSxHQUFHRixtQkFBTyxDQUFDLElBQTRELENBQUM7QUFFeEZDLFFBQVEsQ0FBQ0MsVUFBVSxFQUFFLFVBQVUsQ0FBQyIsImZpbGUiOiIyMDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0eWxlc1xuICovXG5yZXF1aXJlKCcuLi8uLi9wYWdlcy9uYXZpZ2F0aW9uL3N0eWxlcy9uYXZpZ2F0aW9uLmRlc2t0b3Auc2NzcycpO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuY29uc3Qgc3RhcnRBcHAgPSByZXF1aXJlKCcuLi9zdGFydC1hcHAnKTtcbmNvbnN0IE5hdmlnYXRpb24gPSByZXF1aXJlKCcuLi8uLi9wYWdlcy9uYXZpZ2F0aW9uL3ZpZXdzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5kZXNrdG9wJyk7XG5cbnN0YXJ0QXBwKE5hdmlnYXRpb24sICdyb290LWFwcCcpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///203\n")},7091:function(module,__unused_webpack_exports,__webpack_require__){eval('var _defineProperty = __webpack_require__(9713);\nvar _slicedToArray = __webpack_require__(3038);\nvar _jsx = __webpack_require__(8135);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar React = __webpack_require__(7294);\nvar _require = __webpack_require__(7294),\n  useState = _require.useState;\nvar _require2 = __webpack_require__(5697),\n  string = _require2.string,\n  node = _require2.node,\n  bool = _require2.bool,\n  func = _require2.func;\nvar namespace = \'ui-navigation__collapsible\';\nvar IconChevron = __webpack_require__(2335);\nvar ButtonContent = function ButtonContent(_ref) {\n  var collapsed = _ref.collapsed,\n    text = _ref.text,\n    action = _ref.action;\n  return /*#__PURE__*/_jsx("button", {\n    className: "".concat(namespace, "__cta"),\n    onClick: action\n  }, void 0, text, /*#__PURE__*/_jsx(IconChevron, {\n    className: " ui-navigation-icon--chevron-down ".concat(!collapsed ? "ui-navigation-icon--chevron-down--active" : \'\')\n  }));\n};\nvar Collapsible = function Collapsible(_ref2) {\n  var children = _ref2.children,\n    show = _ref2.show,\n    Parent = _ref2.Parent;\n  var internalState = {\n    show: show\n  };\n  var _useState = useState(internalState),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var onClick = function onClick(e) {\n    if (e) {\n      e.preventDefault();\n    }\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      show: !state.show\n    }));\n  };\n  return /*#__PURE__*/_jsx("div", {\n    className: namespace\n  }, void 0, Parent && /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "__parent")\n  }, void 0, /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "__parent_col1")\n  }, void 0, Parent), /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "__parent_col2")\n  }, void 0, /*#__PURE__*/_jsx(ButtonContent, {\n    collapsed: !state.show,\n    text: "Administrar",\n    action: onClick\n  }))), !Parent && /*#__PURE__*/_jsx(ButtonContent, {\n    collapsed: !state.show,\n    text: "Administrar",\n    action: onClick\n  }), /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "-content"),\n    style: {\n      display: state.show ? \'block\' : \'none\'\n    }\n  }, void 0, children));\n};\nCollapsible.defaultProps = {\n  Parent: null\n};\nmodule.exports = Collapsible;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jb21wb25lbnRzL2NvbGxhcHNpYmxlL2luZGV4LmpzPzg0OGUiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwidXNlU3RhdGUiLCJzdHJpbmciLCJub2RlIiwiYm9vbCIsImZ1bmMiLCJuYW1lc3BhY2UiLCJJY29uQ2hldnJvbiIsIkJ1dHRvbkNvbnRlbnQiLCJjb2xsYXBzZWQiLCJ0ZXh0IiwiYWN0aW9uIiwiQ29sbGFwc2libGUiLCJjaGlsZHJlbiIsInNob3ciLCJQYXJlbnQiLCJpbnRlcm5hbFN0YXRlIiwic3RhdGUiLCJzZXRTdGF0ZSIsIm9uQ2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJkaXNwbGF5IiwiZGVmYXVsdFByb3BzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFNQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsSUFBTyxDQUFDO0FBRTlCLGVBQXFCQSxtQkFBTyxDQUFDLElBQU8sQ0FBQztFQUE3QkMsUUFBUSxZQUFSQSxRQUFRO0FBRWhCLGdCQUFxQ0QsbUJBQU8sQ0FBQyxJQUFZLENBQUM7RUFBbERFLE1BQU0sYUFBTkEsTUFBTTtFQUFFQyxJQUFJLGFBQUpBLElBQUk7RUFBRUMsSUFBSSxhQUFKQSxJQUFJO0VBQUVDLElBQUksYUFBSkEsSUFBSTtBQUVoQyxJQUFNQyxTQUFTLEdBQUcsNEJBQTRCO0FBRTlDLElBQU1DLFdBQVcsR0FBR1AsbUJBQU8sQ0FBQyxJQUFrQixDQUFDO0FBRS9DLElBQU1RLGFBQWEsR0FBRyxTQUFoQkEsYUFBYTtFQUFBLElBQU1DLFNBQVMsUUFBVEEsU0FBUztJQUFFQyxJQUFJLFFBQUpBLElBQUk7SUFBRUMsTUFBTSxRQUFOQSxNQUFNO0VBQUEsb0JBQzlDO0lBQVEsU0FBUyxZQUFLTCxTQUFTLFVBQVE7SUFBQyxPQUFPLEVBQUVLO0VBQU8sV0FDckRELElBQUksZUFDTCxLQUFDLFdBQVc7SUFDVixTQUFTLDhDQUF1QyxDQUFDRCxTQUFTLGdEQUFnRCxFQUFFO0VBQUcsRUFDL0csQ0FDSztBQUFBLENBQ1Y7QUFPRCxJQUFNRyxXQUFXLEdBQUcsU0FBZEEsV0FBVyxRQUFtQztFQUFBLElBQTdCQyxRQUFRLFNBQVJBLFFBQVE7SUFBRUMsSUFBSSxTQUFKQSxJQUFJO0lBQUVDLE1BQU0sU0FBTkEsTUFBTTtFQUMzQyxJQUFNQyxhQUFhLEdBQUc7SUFDcEJGLElBQUksRUFBSkE7RUFDRixDQUFDO0VBRUQsZ0JBQTBCYixRQUFRLENBQUNlLGFBQWEsQ0FBQztJQUFBO0lBQTFDQyxLQUFLO0lBQUVDLFFBQVE7RUFFdEIsSUFBTUMsT0FBTyxHQUFHLFNBQVZBLE9BQU8sQ0FBSUMsQ0FBQyxFQUFLO0lBQ3JCLElBQUlBLENBQUMsRUFBRTtNQUNMQSxDQUFDLENBQUNDLGNBQWMsRUFBRTtJQUNwQjtJQUVBSCxRQUFRLGlDQUNIRCxLQUFLO01BQ1JILElBQUksRUFBRSxDQUFDRyxLQUFLLENBQUNIO0lBQUksR0FDakI7RUFDSixDQUFDO0VBRUQsb0JBQ0U7SUFBSyxTQUFTLEVBQUVSO0VBQVUsV0FDdkJTLE1BQU0saUJBQ0w7SUFBSyxTQUFTLFlBQUtULFNBQVM7RUFBVyx3QkFDckM7SUFBSyxTQUFTLFlBQUtBLFNBQVM7RUFBZ0IsV0FBRVMsTUFBTSxDQUFPLGVBQzNEO0lBQUssU0FBUyxZQUFLVCxTQUFTO0VBQWdCLHdCQUMxQyxLQUFDLGFBQWE7SUFBQyxTQUFTLEVBQUUsQ0FBQ1csS0FBSyxDQUFDSCxJQUFLO0lBQUMsSUFBSSxFQUFDLGFBQWE7SUFBQyxNQUFNLEVBQUVLO0VBQVEsRUFBRyxDQUN6RSxDQUVULEVBQ0EsQ0FBQ0osTUFBTSxpQkFBSSxLQUFDLGFBQWE7SUFBQyxTQUFTLEVBQUUsQ0FBQ0UsS0FBSyxDQUFDSCxJQUFLO0lBQUMsSUFBSSxFQUFDLGFBQWE7SUFBQyxNQUFNLEVBQUVLO0VBQVEsRUFBRyxlQUN6RjtJQUFLLFNBQVMsWUFBS2IsU0FBUyxhQUFXO0lBQUMsS0FBSyxFQUFFO01BQUVnQixPQUFPLEVBQUVMLEtBQUssQ0FBQ0gsSUFBSSxHQUFHLE9BQU8sR0FBRztJQUFPO0VBQUUsV0FDdkZELFFBQVEsQ0FDTCxDQUNGO0FBRVYsQ0FBQztBQVFERCxXQUFXLENBQUNXLFlBQVksR0FBRztFQUN6QlIsTUFBTSxFQUFFO0FBQ1YsQ0FBQztBQUVEUyxNQUFNLENBQUNDLE9BQU8sR0FBR2IsV0FBVyIsImZpbGUiOiI3MDkxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCB7IHVzZVN0YXRlIH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCB7IHN0cmluZywgbm9kZSwgYm9vbCwgZnVuYyB9ID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG5jb25zdCBuYW1lc3BhY2UgPSAndWktbmF2aWdhdGlvbl9fY29sbGFwc2libGUnO1xuXG5jb25zdCBJY29uQ2hldnJvbiA9IHJlcXVpcmUoJy4uL2ljb25zL2NoZXZyb24nKTtcblxuY29uc3QgQnV0dG9uQ29udGVudCA9ICh7IGNvbGxhcHNlZCwgdGV4dCwgYWN0aW9uIH0pID0+IChcbiAgPGJ1dHRvbiBjbGFzc05hbWU9e2Ake25hbWVzcGFjZX1fX2N0YWB9IG9uQ2xpY2s9e2FjdGlvbn0+XG4gICAge3RleHR9XG4gICAgPEljb25DaGV2cm9uXG4gICAgICBjbGFzc05hbWU9e2AgdWktbmF2aWdhdGlvbi1pY29uLS1jaGV2cm9uLWRvd24gJHshY29sbGFwc2VkID8gYHVpLW5hdmlnYXRpb24taWNvbi0tY2hldnJvbi1kb3duLS1hY3RpdmVgIDogJyd9YH1cbiAgICAvPlxuICA8L2J1dHRvbj5cbik7XG5CdXR0b25Db250ZW50LnByb3BUeXBlcyA9IHtcbiAgdGV4dDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGFjdGlvbjogZnVuYy5pc1JlcXVpcmVkLFxuICBjb2xsYXBzZWQ6IGJvb2wuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IENvbGxhcHNpYmxlID0gKHsgY2hpbGRyZW4sIHNob3csIFBhcmVudCB9KSA9PiB7XG4gIGNvbnN0IGludGVybmFsU3RhdGUgPSB7XG4gICAgc2hvdyxcbiAgfTtcblxuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKGludGVybmFsU3RhdGUpO1xuXG4gIGNvbnN0IG9uQ2xpY2sgPSAoZSkgPT4ge1xuICAgIGlmIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgc2V0U3RhdGUoe1xuICAgICAgLi4uc3RhdGUsXG4gICAgICBzaG93OiAhc3RhdGUuc2hvdyxcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtuYW1lc3BhY2V9PlxuICAgICAge1BhcmVudCAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X19wYXJlbnRgfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7bmFtZXNwYWNlfV9fcGFyZW50X2NvbDFgfT57UGFyZW50fTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X19wYXJlbnRfY29sMmB9PlxuICAgICAgICAgICAgPEJ1dHRvbkNvbnRlbnQgY29sbGFwc2VkPXshc3RhdGUuc2hvd30gdGV4dD1cIkFkbWluaXN0cmFyXCIgYWN0aW9uPXtvbkNsaWNrfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7IVBhcmVudCAmJiA8QnV0dG9uQ29udGVudCBjb2xsYXBzZWQ9eyFzdGF0ZS5zaG93fSB0ZXh0PVwiQWRtaW5pc3RyYXJcIiBhY3Rpb249e29uQ2xpY2t9IC8+fVxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake25hbWVzcGFjZX0tY29udGVudGB9IHN0eWxlPXt7IGRpc3BsYXk6IHN0YXRlLnNob3cgPyAnYmxvY2snIDogJ25vbmUnIH19PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkNvbGxhcHNpYmxlLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IG5vZGUuaXNSZXF1aXJlZCxcbiAgc2hvdzogYm9vbC5pc1JlcXVpcmVkLFxuICBQYXJlbnQ6IG5vZGUsXG59O1xuXG5Db2xsYXBzaWJsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIFBhcmVudDogbnVsbCxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sbGFwc2libGU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7091\n')},8649:function(module,__unused_webpack_exports,__webpack_require__){eval("var _jsx = __webpack_require__(8135);\nvar React = __webpack_require__(7294);\nvar _require = __webpack_require__(5697),\n  string = _require.string,\n  func = _require.func,\n  bool = _require.bool;\nvar classNames = __webpack_require__(4184);\nvar Modal = __webpack_require__(9277);\nvar Button = __webpack_require__(1980);\nvar namespace = 'ui-confirm-modal';\nvar ConfirmModal = function ConfirmModal(_ref) {\n  var title = _ref.title,\n    subtitle = _ref.subtitle,\n    accept_action_text = _ref.accept_action_text,\n    reject_action_text = _ref.reject_action_text,\n    visible = _ref.visible,\n    onResult = _ref.onResult,\n    className = _ref.className,\n    forceRerender = _ref.forceRerender,\n    onClose = _ref.onClose,\n    deviceType = _ref.deviceType;\n  var device = deviceType === 'desktop' ? 'small' : 'card';\n  return visible && /*#__PURE__*/React.createElement(Modal, {\n    className: classNames(namespace, className),\n    isOpen: visible,\n    title: title,\n    onClose: onClose,\n    closeButtonLabel: '',\n    type: device,\n    key: forceRerender,\n    actions: {\n      fixed: false,\n      primary: /*#__PURE__*/_jsx(Button, {\n        hierarchy: \"loud\",\n        onClick: function onClick() {\n          return onResult(true);\n        }\n      }, void 0, accept_action_text),\n      secondary: /*#__PURE__*/_jsx(Button, {\n        hierarchy: \"transparent\",\n        onClick: function onClick() {\n          return onResult(false);\n        }\n      }, void 0, reject_action_text)\n    }\n  }, /*#__PURE__*/_jsx(\"div\", {\n    className: \"\".concat(namespace, \"__content\")\n  }, void 0, /*#__PURE__*/_jsx(\"p\", {}, void 0, subtitle)));\n};\nConfirmModal.defaultProps = {\n  className: null,\n  visible: false,\n  forceRerender: namespace,\n  onClose: null,\n  deviceType: ''\n};\nmodule.exports = ConfirmModal;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jb21wb25lbnRzL2NvbmZpcm0tbW9kYWwvaW5kZXguanM/OTJlNiJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJzdHJpbmciLCJmdW5jIiwiYm9vbCIsImNsYXNzTmFtZXMiLCJNb2RhbCIsIkJ1dHRvbiIsIm5hbWVzcGFjZSIsIkNvbmZpcm1Nb2RhbCIsInRpdGxlIiwic3VidGl0bGUiLCJhY2NlcHRfYWN0aW9uX3RleHQiLCJyZWplY3RfYWN0aW9uX3RleHQiLCJ2aXNpYmxlIiwib25SZXN1bHQiLCJjbGFzc05hbWUiLCJmb3JjZVJlcmVuZGVyIiwib25DbG9zZSIsImRldmljZVR5cGUiLCJkZXZpY2UiLCJpc09wZW4iLCJjbG9zZUJ1dHRvbkxhYmVsIiwidHlwZSIsImtleSIsImFjdGlvbnMiLCJmaXhlZCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkZWZhdWx0UHJvcHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBTUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLElBQU8sQ0FBQztBQUM5QixlQUErQkEsbUJBQU8sQ0FBQyxJQUFZLENBQUM7RUFBNUNDLE1BQU0sWUFBTkEsTUFBTTtFQUFFQyxJQUFJLFlBQUpBLElBQUk7RUFBRUMsSUFBSSxZQUFKQSxJQUFJO0FBQzFCLElBQU1DLFVBQVUsR0FBR0osbUJBQU8sQ0FBQyxJQUFZLENBQUM7QUFDeEMsSUFBTUssS0FBSyxHQUFHTCxtQkFBTyxDQUFDLElBQWMsQ0FBQztBQUNyQyxJQUFNTSxNQUFNLEdBQUdOLG1CQUFPLENBQUMsSUFBZSxDQUFDO0FBRXZDLElBQU1PLFNBQVMsR0FBRyxrQkFBa0I7QUFFcEMsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQVksT0FXWjtFQUFBLElBVkpDLEtBQUssUUFBTEEsS0FBSztJQUNMQyxRQUFRLFFBQVJBLFFBQVE7SUFDUkMsa0JBQWtCLFFBQWxCQSxrQkFBa0I7SUFDbEJDLGtCQUFrQixRQUFsQkEsa0JBQWtCO0lBQ2xCQyxPQUFPLFFBQVBBLE9BQU87SUFDUEMsUUFBUSxRQUFSQSxRQUFRO0lBQ1JDLFNBQVMsUUFBVEEsU0FBUztJQUNUQyxhQUFhLFFBQWJBLGFBQWE7SUFDYkMsT0FBTyxRQUFQQSxPQUFPO0lBQ1BDLFVBQVUsUUFBVkEsVUFBVTtFQUVWLElBQU1DLE1BQU0sR0FBR0QsVUFBVSxLQUFLLFNBQVMsR0FBRyxPQUFPLEdBQUcsTUFBTTtFQUMxRCxPQUNFTCxPQUFPLGlCQUNMLG9CQUFDLEtBQUs7SUFFRkUsU0FBUyxFQUFFWCxVQUFVLENBQUNHLFNBQVMsRUFBRVEsU0FBUyxDQUFDO0lBQzNDSyxNQUFNLEVBQUVQLE9BQU87SUFDZkosS0FBSyxFQUFMQSxLQUFLO0lBQ0xRLE9BQU8sRUFBUEEsT0FBTztJQUNQSSxnQkFBZ0IsRUFBRSxFQUFFO0lBQ3BCQyxJQUFJLEVBQUVILE1BQU07SUFDWkksR0FBRyxFQUFFUCxhQUFhO0lBQ2xCUSxPQUFPLEVBQUU7TUFDUEMsS0FBSyxFQUFFLEtBQUs7TUFDWkMsT0FBTyxlQUNMLEtBQUMsTUFBTTtRQUFDLFNBQVMsRUFBQyxNQUFNO1FBQUMsT0FBTyxFQUFFO1VBQUEsT0FBTVosUUFBUSxDQUFDLElBQUksQ0FBQztRQUFBO01BQUMsV0FDcERILGtCQUFrQixDQUV0QjtNQUNEZ0IsU0FBUyxlQUNQLEtBQUMsTUFBTTtRQUFDLFNBQVMsRUFBQyxhQUFhO1FBQUMsT0FBTyxFQUFFO1VBQUEsT0FBTWIsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUFBO01BQUMsV0FDNURGLGtCQUFrQjtJQUd6QjtFQUFDLGdCQUdIO0lBQUssU0FBUyxZQUFLTCxTQUFTO0VBQVksd0JBQ3RDLHNCQUFJRyxRQUFRLENBQUssQ0FDYixDQUVUO0FBRUwsQ0FBQztBQWVERixZQUFZLENBQUNvQixZQUFZLEdBQUc7RUFDMUJiLFNBQVMsRUFBRSxJQUFJO0VBQ2ZGLE9BQU8sRUFBRSxLQUFLO0VBQ2RHLGFBQWEsRUFBRVQsU0FBUztFQUN4QlUsT0FBTyxFQUFFLElBQUk7RUFDYkMsVUFBVSxFQUFFO0FBQ2QsQ0FBQztBQUVEVyxNQUFNLENBQUNDLE9BQU8sR0FBR3RCLFlBQVkiLCJmaWxlIjoiODY0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgc3RyaW5nLCBmdW5jLCBib29sIH0gPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuY29uc3QgTW9kYWwgPSByZXF1aXJlKCdAYW5kZXMvbW9kYWwnKTtcbmNvbnN0IEJ1dHRvbiA9IHJlcXVpcmUoJ0BhbmRlcy9idXR0b24nKTtcblxuY29uc3QgbmFtZXNwYWNlID0gJ3VpLWNvbmZpcm0tbW9kYWwnO1xuXG5jb25zdCBDb25maXJtTW9kYWwgPSAoe1xuICB0aXRsZSxcbiAgc3VidGl0bGUsXG4gIGFjY2VwdF9hY3Rpb25fdGV4dCxcbiAgcmVqZWN0X2FjdGlvbl90ZXh0LFxuICB2aXNpYmxlLFxuICBvblJlc3VsdCxcbiAgY2xhc3NOYW1lLFxuICBmb3JjZVJlcmVuZGVyLFxuICBvbkNsb3NlLFxuICBkZXZpY2VUeXBlLFxufSkgPT4ge1xuICBjb25zdCBkZXZpY2UgPSBkZXZpY2VUeXBlID09PSAnZGVza3RvcCcgPyAnc21hbGwnIDogJ2NhcmQnO1xuICByZXR1cm4gKFxuICAgIHZpc2libGUgJiYgKFxuICAgICAgPE1vZGFsXG4gICAgICAgIHsuLi57XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKG5hbWVzcGFjZSwgY2xhc3NOYW1lKSxcbiAgICAgICAgICBpc09wZW46IHZpc2libGUsXG4gICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgb25DbG9zZSxcbiAgICAgICAgICBjbG9zZUJ1dHRvbkxhYmVsOiAnJyxcbiAgICAgICAgICB0eXBlOiBkZXZpY2UsXG4gICAgICAgICAga2V5OiBmb3JjZVJlcmVuZGVyLFxuICAgICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICAgIGZpeGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHByaW1hcnk6IChcbiAgICAgICAgICAgICAgPEJ1dHRvbiBoaWVyYXJjaHk9XCJsb3VkXCIgb25DbGljaz17KCkgPT4gb25SZXN1bHQodHJ1ZSl9PlxuICAgICAgICAgICAgICAgIHthY2NlcHRfYWN0aW9uX3RleHR9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHNlY29uZGFyeTogKFxuICAgICAgICAgICAgICA8QnV0dG9uIGhpZXJhcmNoeT1cInRyYW5zcGFyZW50XCIgb25DbGljaz17KCkgPT4gb25SZXN1bHQoZmFsc2UpfT5cbiAgICAgICAgICAgICAgICB7cmVqZWN0X2FjdGlvbl90ZXh0fVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgfSxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake25hbWVzcGFjZX1fX2NvbnRlbnRgfT5cbiAgICAgICAgICA8cD57c3VidGl0bGV9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvTW9kYWw+XG4gICAgKVxuICApO1xufTtcblxuQ29uZmlybU1vZGFsLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gIHRpdGxlOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3VidGl0bGU6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBhY2NlcHRfYWN0aW9uX3RleHQ6IHN0cmluZy5pc1JlcXVpcmVkLFxuICByZWplY3RfYWN0aW9uX3RleHQ6IHN0cmluZy5pc1JlcXVpcmVkLFxuICB2aXNpYmxlOiBib29sLFxuICBvblJlc3VsdDogZnVuYy5pc1JlcXVpcmVkLFxuICBmb3JjZVJlcmVuZGVyOiBzdHJpbmcsXG4gIG9uQ2xvc2U6IGZ1bmMsXG4gIGRldmljZVR5cGU6IHN0cmluZyxcbn07XG5cbkNvbmZpcm1Nb2RhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogbnVsbCxcbiAgdmlzaWJsZTogZmFsc2UsXG4gIGZvcmNlUmVyZW5kZXI6IG5hbWVzcGFjZSxcbiAgb25DbG9zZTogbnVsbCxcbiAgZGV2aWNlVHlwZTogJycsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbmZpcm1Nb2RhbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8649\n")},3894:function(module,__unused_webpack_exports,__webpack_require__){eval('var _jsx = __webpack_require__(8135);\nvar React = __webpack_require__(7294);\nvar classNames = __webpack_require__(4184);\nvar _require = __webpack_require__(5697),\n  string = _require.string,\n  node = _require.node;\nvar namespace = \'ui-empty-list\';\nvar EmptyList = function EmptyList(_ref) {\n  var title = _ref.title,\n    subtitle = _ref.subtitle,\n    actions = _ref.actions,\n    className = _ref.className,\n    children = _ref.children;\n  return /*#__PURE__*/_jsx("div", {\n    className: classNames(namespace, className)\n  }, void 0, /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "__content")\n  }, void 0, children, /*#__PURE__*/_jsx("p", {\n    className: "".concat(namespace, "__title")\n  }, void 0, title), subtitle && /*#__PURE__*/_jsx("p", {\n    className: "".concat(namespace, "__subtitle")\n  }, void 0, subtitle), actions && /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "__actions")\n  }, void 0, actions)));\n};\nEmptyList.defaultProps = {\n  className: null,\n  subtitle: null,\n  actions: null,\n  children: null\n};\nmodule.exports = EmptyList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jb21wb25lbnRzL2VtcHR5LWxpc3QvaW5kZXguanM/NzRkOSJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJjbGFzc05hbWVzIiwic3RyaW5nIiwibm9kZSIsIm5hbWVzcGFjZSIsIkVtcHR5TGlzdCIsInRpdGxlIiwic3VidGl0bGUiLCJhY3Rpb25zIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBTUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLElBQU8sQ0FBQztBQUM5QixJQUFNQyxVQUFVLEdBQUdELG1CQUFPLENBQUMsSUFBWSxDQUFDO0FBQ3hDLGVBQXlCQSxtQkFBTyxDQUFDLElBQVksQ0FBQztFQUF0Q0UsTUFBTSxZQUFOQSxNQUFNO0VBQUVDLElBQUksWUFBSkEsSUFBSTtBQUVwQixJQUFNQyxTQUFTLEdBQUcsZUFBZTtBQUVqQyxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBUyxPQUEwRDtFQUFBLElBQXBEQyxLQUFLLFFBQUxBLEtBQUs7SUFBRUMsUUFBUSxRQUFSQSxRQUFRO0lBQUVDLE9BQU8sUUFBUEEsT0FBTztJQUFFQyxTQUFTLFFBQVRBLFNBQVM7SUFBRUMsUUFBUSxRQUFSQSxRQUFRO0VBQ2hFLG9CQUNFO0lBQUssU0FBUyxFQUFFVCxVQUFVLENBQUNHLFNBQVMsRUFBRUssU0FBUztFQUFFLHdCQUMvQztJQUFLLFNBQVMsWUFBS0wsU0FBUztFQUFZLFdBQ3JDTSxRQUFRLGVBQ1Q7SUFBRyxTQUFTLFlBQUtOLFNBQVM7RUFBVSxXQUFFRSxLQUFLLENBQUssRUFDL0NDLFFBQVEsaUJBQUk7SUFBRyxTQUFTLFlBQUtILFNBQVM7RUFBYSxXQUFFRyxRQUFRLENBQUssRUFDbEVDLE9BQU8saUJBQUk7SUFBSyxTQUFTLFlBQUtKLFNBQVM7RUFBWSxXQUFFSSxPQUFPLENBQU8sQ0FDaEUsQ0FDRjtBQUVWLENBQUM7QUFVREgsU0FBUyxDQUFDTSxZQUFZLEdBQUc7RUFDdkJGLFNBQVMsRUFBRSxJQUFJO0VBQ2ZGLFFBQVEsRUFBRSxJQUFJO0VBQ2RDLE9BQU8sRUFBRSxJQUFJO0VBQ2JFLFFBQVEsRUFBRTtBQUNaLENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUdSLFNBQVMiLCJmaWxlIjoiMzg5NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5jb25zdCB7IHN0cmluZywgbm9kZSB9ID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG5jb25zdCBuYW1lc3BhY2UgPSAndWktZW1wdHktbGlzdCc7XG5cbmNvbnN0IEVtcHR5TGlzdCA9ICh7IHRpdGxlLCBzdWJ0aXRsZSwgYWN0aW9ucywgY2xhc3NOYW1lLCBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMobmFtZXNwYWNlLCBjbGFzc05hbWUpfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X19jb250ZW50YH0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPHAgY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X190aXRsZWB9Pnt0aXRsZX08L3A+XG4gICAgICAgIHtzdWJ0aXRsZSAmJiA8cCBjbGFzc05hbWU9e2Ake25hbWVzcGFjZX1fX3N1YnRpdGxlYH0+e3N1YnRpdGxlfTwvcD59XG4gICAgICAgIHthY3Rpb25zICYmIDxkaXYgY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X19hY3Rpb25zYH0+e2FjdGlvbnN9PC9kaXY+fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5FbXB0eUxpc3QucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IHN0cmluZyxcbiAgdGl0bGU6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBzdWJ0aXRsZTogc3RyaW5nLFxuICBhY3Rpb25zOiBub2RlLFxuICBjaGlsZHJlbjogbm9kZSxcbn07XG5cbkVtcHR5TGlzdC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogbnVsbCxcbiAgc3VidGl0bGU6IG51bGwsXG4gIGFjdGlvbnM6IG51bGwsXG4gIGNoaWxkcmVuOiBudWxsLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbXB0eUxpc3Q7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3894\n')},2335:function(module,__unused_webpack_exports,__webpack_require__){eval('var _jsx = __webpack_require__(8135);\nvar _path;\nvar React = __webpack_require__(7294);\nvar _require = __webpack_require__(5697),\n  string = _require.string;\nvar classnames = __webpack_require__(4184);\nvar namespace = \'ui-navigation-icon\';\nvar IconChevron = function IconChevron(_ref) {\n  var className = _ref.className;\n  return /*#__PURE__*/_jsx("svg", {\n    className: classnames(namespace, "".concat(namespace, "--chevron"), className),\n    viewBox: "0 0 9 14",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, void 0, _path || (_path = /*#__PURE__*/_jsx("path", {\n    fill: "none",\n    fillRule: "evenodd",\n    strokeWidth: "1.5",\n    d: "M1 1.343L6.657 7 1 12.657"\n  })));\n};\nIconChevron.defaultProps = {\n  className: null\n};\nmodule.exports = React.memo(IconChevron);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jb21wb25lbnRzL2ljb25zL2NoZXZyb24uanM/NTNhYSJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJzdHJpbmciLCJjbGFzc25hbWVzIiwibmFtZXNwYWNlIiwiSWNvbkNoZXZyb24iLCJjbGFzc05hbWUiLCJkZWZhdWx0UHJvcHMiLCJtb2R1bGUiLCJleHBvcnRzIiwibWVtbyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsSUFBTyxDQUFDO0FBQzlCLGVBQW1CQSxtQkFBTyxDQUFDLElBQVksQ0FBQztFQUFoQ0MsTUFBTSxZQUFOQSxNQUFNO0FBQ2QsSUFBTUMsVUFBVSxHQUFHRixtQkFBTyxDQUFDLElBQVksQ0FBQztBQUV4QyxJQUFNRyxTQUFTLEdBQUcsb0JBQW9CO0FBRXRDLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXO0VBQUEsSUFBTUMsU0FBUyxRQUFUQSxTQUFTO0VBQUEsb0JBQzlCO0lBQ0UsU0FBUyxFQUFFSCxVQUFVLENBQUNDLFNBQVMsWUFBS0EsU0FBUyxnQkFBYUUsU0FBUyxDQUFFO0lBQ3JFLE9BQU8sRUFBQyxVQUFVO0lBQ2xCLEtBQUssRUFBQztFQUE0QiwwQ0FFbEM7SUFBTSxJQUFJLEVBQUMsTUFBTTtJQUFDLFFBQVEsRUFBQyxTQUFTO0lBQUMsV0FBVyxFQUFDLEtBQUs7SUFBQyxDQUFDLEVBQUM7RUFBMkIsRUFBRyxFQUNuRjtBQUFBLENBQ1A7QUFNREQsV0FBVyxDQUFDRSxZQUFZLEdBQUc7RUFDekJELFNBQVMsRUFBRTtBQUNiLENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUdULEtBQUssQ0FBQ1UsSUFBSSxDQUFDTCxXQUFXLENBQUMiLCJmaWxlIjoiMjMzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgc3RyaW5nIH0gPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBjbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG5jb25zdCBuYW1lc3BhY2UgPSAndWktbmF2aWdhdGlvbi1pY29uJztcblxuY29uc3QgSWNvbkNoZXZyb24gPSAoeyBjbGFzc05hbWUgfSkgPT4gKFxuICA8c3ZnXG4gICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKG5hbWVzcGFjZSwgYCR7bmFtZXNwYWNlfS0tY2hldnJvbmAsIGNsYXNzTmFtZSl9XG4gICAgdmlld0JveD1cIjAgMCA5IDE0XCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgPlxuICAgIDxwYXRoIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCIgc3Ryb2tlV2lkdGg9XCIxLjVcIiBkPVwiTTEgMS4zNDNMNi42NTcgNyAxIDEyLjY1N1wiIC8+XG4gIDwvc3ZnPlxuKTtcblxuSWNvbkNoZXZyb24ucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IHN0cmluZyxcbn07XG5cbkljb25DaGV2cm9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiBudWxsLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5tZW1vKEljb25DaGV2cm9uKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2335\n')},5110:function(module,__unused_webpack_exports,__webpack_require__){eval('var _defineProperty = __webpack_require__(9713);\nvar _jsx = __webpack_require__(8135);\nvar React = __webpack_require__(7294);\nvar classNames = __webpack_require__(4184);\nvar _require = __webpack_require__(5697),\n  bool = _require.bool,\n  string = _require.string,\n  func = _require.func;\nvar Switch = __webpack_require__(9835);\nvar Button = __webpack_require__(1980);\nvar Collapsible = __webpack_require__(7091);\nvar namespace = \'ui-navigation-header__lgpd\';\nvar LgpdHeader = function LgpdHeader(_ref) {\n  var title = _ref.title,\n    toggle_lgpd_action_text = _ref.toggle_lgpd_action_text,\n    remove_all_items_action_text = _ref.remove_all_items_action_text,\n    historyEnabled = _ref.historyEnabled,\n    onHistoryConfigToggle = _ref.onHistoryConfigToggle,\n    onRemoveAllItemsClick = _ref.onRemoveAllItemsClick,\n    removeAllItemsEnabled = _ref.removeAllItemsEnabled;\n  return /*#__PURE__*/_jsx("div", {\n    className: namespace\n  }, void 0, /*#__PURE__*/_jsx(Collapsible, {\n    show: !historyEnabled,\n    Parent: title && /*#__PURE__*/_jsx("h2", {\n      className: "".concat(namespace, "__title")\n    }, void 0, title)\n  }, void 0, /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "__content")\n  }, void 0, /*#__PURE__*/_jsx("span", {\n    className: "".concat(namespace, "__switch-wrapper")\n  }, void 0, /*#__PURE__*/_jsx(Switch, {\n    checked: historyEnabled,\n    inverted: true,\n    label: toggle_lgpd_action_text,\n    onChange: onHistoryConfigToggle,\n    className: "demo-checkbox",\n    "data-testid": "switch-regitry-history"\n  })), /*#__PURE__*/_jsx(Button, {\n    hierarchy: "quiet",\n    size: "medium",\n    onClick: onRemoveAllItemsClick,\n    className: classNames("".concat(namespace, "__cta"), _defineProperty({}, "".concat(namespace, "__cta--disabled"), !removeAllItemsEnabled)),\n    disabled: !removeAllItemsEnabled\n  }, void 0, remove_all_items_action_text))));\n};\nLgpdHeader.defaultProps = {\n  removeAllItemsEnabled: true\n};\nmodule.exports = LgpdHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jb21wb25lbnRzL2xncGQtaGVhZGVyL2luZGV4LmpzPzUwMjYiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiY2xhc3NOYW1lcyIsImJvb2wiLCJzdHJpbmciLCJmdW5jIiwiU3dpdGNoIiwiQnV0dG9uIiwiQ29sbGFwc2libGUiLCJuYW1lc3BhY2UiLCJMZ3BkSGVhZGVyIiwidGl0bGUiLCJ0b2dnbGVfbGdwZF9hY3Rpb25fdGV4dCIsInJlbW92ZV9hbGxfaXRlbXNfYWN0aW9uX3RleHQiLCJoaXN0b3J5RW5hYmxlZCIsIm9uSGlzdG9yeUNvbmZpZ1RvZ2dsZSIsIm9uUmVtb3ZlQWxsSXRlbXNDbGljayIsInJlbW92ZUFsbEl0ZW1zRW5hYmxlZCIsImRlZmF1bHRQcm9wcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLElBQU8sQ0FBQztBQUM5QixJQUFNQyxVQUFVLEdBQUdELG1CQUFPLENBQUMsSUFBWSxDQUFDO0FBQ3hDLGVBQStCQSxtQkFBTyxDQUFDLElBQVksQ0FBQztFQUE1Q0UsSUFBSSxZQUFKQSxJQUFJO0VBQUVDLE1BQU0sWUFBTkEsTUFBTTtFQUFFQyxJQUFJLFlBQUpBLElBQUk7QUFDMUIsSUFBTUMsTUFBTSxHQUFHTCxtQkFBTyxDQUFDLElBQWUsQ0FBQztBQUN2QyxJQUFNTSxNQUFNLEdBQUdOLG1CQUFPLENBQUMsSUFBZSxDQUFDO0FBQ3ZDLElBQU1PLFdBQVcsR0FBR1AsbUJBQU8sQ0FBQyxJQUFnQixDQUFDO0FBRTdDLElBQU1RLFNBQVMsR0FBRyw0QkFBNEI7QUFFOUMsSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQVUsT0FRVjtFQUFBLElBUEpDLEtBQUssUUFBTEEsS0FBSztJQUNMQyx1QkFBdUIsUUFBdkJBLHVCQUF1QjtJQUN2QkMsNEJBQTRCLFFBQTVCQSw0QkFBNEI7SUFDNUJDLGNBQWMsUUFBZEEsY0FBYztJQUNkQyxxQkFBcUIsUUFBckJBLHFCQUFxQjtJQUNyQkMscUJBQXFCLFFBQXJCQSxxQkFBcUI7SUFDckJDLHFCQUFxQixRQUFyQkEscUJBQXFCO0VBRXJCLG9CQUNFO0lBQUssU0FBUyxFQUFFUjtFQUFVLHdCQUN4QixLQUFDLFdBQVc7SUFBQyxJQUFJLEVBQUUsQ0FBQ0ssY0FBZTtJQUFDLE1BQU0sRUFBRUgsS0FBSyxpQkFBSTtNQUFJLFNBQVMsWUFBS0YsU0FBUztJQUFVLFdBQUVFLEtBQUs7RUFBTyx3QkFDdEc7SUFBSyxTQUFTLFlBQUtGLFNBQVM7RUFBWSx3QkFDdEM7SUFBTSxTQUFTLFlBQUtBLFNBQVM7RUFBbUIsd0JBQzlDLEtBQUMsTUFBTTtJQUNMLE9BQU8sRUFBRUssY0FBZTtJQUN4QixRQUFRO0lBQ1IsS0FBSyxFQUFFRix1QkFBd0I7SUFDL0IsUUFBUSxFQUFFRyxxQkFBc0I7SUFDaEMsU0FBUyxFQUFDLGVBQWU7SUFDekIsZUFBWTtFQUF3QixFQUNwQyxDQUNHLGVBQ1AsS0FBQyxNQUFNO0lBQ0wsU0FBUyxFQUFDLE9BQU87SUFDakIsSUFBSSxFQUFDLFFBQVE7SUFDYixPQUFPLEVBQUVDLHFCQUFzQjtJQUMvQixTQUFTLEVBQUVkLFVBQVUsV0FBSU8sU0FBUywwQ0FDNUJBLFNBQVMsc0JBQW9CLENBQUNRLHFCQUFxQixFQUN0RDtJQUNILFFBQVEsRUFBRSxDQUFDQTtFQUFzQixXQUVoQ0osNEJBQTRCLENBQ3RCLENBQ0wsQ0FDTSxDQUNWO0FBRVYsQ0FBQztBQVlESCxVQUFVLENBQUNRLFlBQVksR0FBRztFQUN4QkQscUJBQXFCLEVBQUU7QUFDekIsQ0FBQztBQUVERSxNQUFNLENBQUNDLE9BQU8sR0FBR1YsVUFBVSIsImZpbGUiOiI1MTEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcbmNvbnN0IHsgYm9vbCwgc3RyaW5nLCBmdW5jIH0gPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBTd2l0Y2ggPSByZXF1aXJlKCdAYW5kZXMvc3dpdGNoJyk7XG5jb25zdCBCdXR0b24gPSByZXF1aXJlKCdAYW5kZXMvYnV0dG9uJyk7XG5jb25zdCBDb2xsYXBzaWJsZSA9IHJlcXVpcmUoJy4uL2NvbGxhcHNpYmxlJyk7XG5cbmNvbnN0IG5hbWVzcGFjZSA9ICd1aS1uYXZpZ2F0aW9uLWhlYWRlcl9fbGdwZCc7XG5cbmNvbnN0IExncGRIZWFkZXIgPSAoe1xuICB0aXRsZSxcbiAgdG9nZ2xlX2xncGRfYWN0aW9uX3RleHQsXG4gIHJlbW92ZV9hbGxfaXRlbXNfYWN0aW9uX3RleHQsXG4gIGhpc3RvcnlFbmFibGVkLFxuICBvbkhpc3RvcnlDb25maWdUb2dnbGUsXG4gIG9uUmVtb3ZlQWxsSXRlbXNDbGljayxcbiAgcmVtb3ZlQWxsSXRlbXNFbmFibGVkLFxufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtuYW1lc3BhY2V9PlxuICAgICAgPENvbGxhcHNpYmxlIHNob3c9eyFoaXN0b3J5RW5hYmxlZH0gUGFyZW50PXt0aXRsZSAmJiA8aDIgY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X190aXRsZWB9Pnt0aXRsZX08L2gyPn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X19jb250ZW50YH0+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgJHtuYW1lc3BhY2V9X19zd2l0Y2gtd3JhcHBlcmB9PlxuICAgICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgICBjaGVja2VkPXtoaXN0b3J5RW5hYmxlZH1cbiAgICAgICAgICAgICAgaW52ZXJ0ZWRcbiAgICAgICAgICAgICAgbGFiZWw9e3RvZ2dsZV9sZ3BkX2FjdGlvbl90ZXh0fVxuICAgICAgICAgICAgICBvbkNoYW5nZT17b25IaXN0b3J5Q29uZmlnVG9nZ2xlfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkZW1vLWNoZWNrYm94XCJcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzd2l0Y2gtcmVnaXRyeS1oaXN0b3J5XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGhpZXJhcmNoeT1cInF1aWV0XCJcbiAgICAgICAgICAgIHNpemU9XCJtZWRpdW1cIlxuICAgICAgICAgICAgb25DbGljaz17b25SZW1vdmVBbGxJdGVtc0NsaWNrfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGAke25hbWVzcGFjZX1fX2N0YWAsIHtcbiAgICAgICAgICAgICAgW2Ake25hbWVzcGFjZX1fX2N0YS0tZGlzYWJsZWRgXTogIXJlbW92ZUFsbEl0ZW1zRW5hYmxlZCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyFyZW1vdmVBbGxJdGVtc0VuYWJsZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3JlbW92ZV9hbGxfaXRlbXNfYWN0aW9uX3RleHR9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Db2xsYXBzaWJsZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkxncGRIZWFkZXIucHJvcFR5cGVzID0ge1xuICB0aXRsZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHRvZ2dsZV9sZ3BkX2FjdGlvbl90ZXh0OiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmVtb3ZlX2FsbF9pdGVtc19hY3Rpb25fdGV4dDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhpc3RvcnlFbmFibGVkOiBib29sLmlzUmVxdWlyZWQsXG4gIG9uSGlzdG9yeUNvbmZpZ1RvZ2dsZTogZnVuYy5pc1JlcXVpcmVkLFxuICBvblJlbW92ZUFsbEl0ZW1zQ2xpY2s6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgcmVtb3ZlQWxsSXRlbXNFbmFibGVkOiBib29sLFxufTtcblxuTGdwZEhlYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlbW92ZUFsbEl0ZW1zRW5hYmxlZDogdHJ1ZSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGdwZEhlYWRlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5110\n')},5515:function(module,__unused_webpack_exports,__webpack_require__){eval('var _jsx = __webpack_require__(8135);\nvar React = __webpack_require__(7294);\nvar _require = __webpack_require__(5697),\n  string = _require.string,\n  bool = _require.bool;\nvar classNames = __webpack_require__(4184);\nvar namespace = \'ui-navigation-month-label\';\nvar MonthLabel = function MonthLabel(_ref) {\n  var showMonth = _ref.showMonth,\n    monthName = _ref.monthName,\n    className = _ref.className;\n  return /*#__PURE__*/_jsx("h2", {\n    className: classNames(namespace, className, showMonth ? "".concat(namespace, "--show") : \'\')\n  }, void 0, showMonth ? "".concat(monthName) : \'\');\n};\nMonthLabel.defaultProps = {\n  className: null\n};\nmodule.exports = MonthLabel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jb21wb25lbnRzL21vbnRoLWxhYmVsL2luZGV4LmpzPzJkNGEiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwic3RyaW5nIiwiYm9vbCIsImNsYXNzTmFtZXMiLCJuYW1lc3BhY2UiLCJNb250aExhYmVsIiwic2hvd01vbnRoIiwibW9udGhOYW1lIiwiY2xhc3NOYW1lIiwiZGVmYXVsdFByb3BzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQU1BLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxJQUFPLENBQUM7QUFDOUIsZUFBeUJBLG1CQUFPLENBQUMsSUFBWSxDQUFDO0VBQXRDQyxNQUFNLFlBQU5BLE1BQU07RUFBRUMsSUFBSSxZQUFKQSxJQUFJO0FBQ3BCLElBQU1DLFVBQVUsR0FBR0gsbUJBQU8sQ0FBQyxJQUFZLENBQUM7QUFFeEMsSUFBTUksU0FBUyxHQUFHLDJCQUEyQjtBQUU3QyxJQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBVTtFQUFBLElBQU1DLFNBQVMsUUFBVEEsU0FBUztJQUFFQyxTQUFTLFFBQVRBLFNBQVM7SUFBRUMsU0FBUyxRQUFUQSxTQUFTO0VBQUEsb0JBQ25EO0lBQUksU0FBUyxFQUFFTCxVQUFVLENBQUNDLFNBQVMsRUFBRUksU0FBUyxFQUFFRixTQUFTLGFBQU1GLFNBQVMsY0FBVyxFQUFFO0VBQUUsV0FDcEZFLFNBQVMsYUFBTUMsU0FBUyxJQUFLLEVBQUUsQ0FDN0I7QUFBQSxDQUNOO0FBUURGLFVBQVUsQ0FBQ0ksWUFBWSxHQUFHO0VBQ3hCRCxTQUFTLEVBQUU7QUFDYixDQUFDO0FBRURFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTixVQUFVIiwiZmlsZSI6IjU1MTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHN0cmluZywgYm9vbCB9ID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuY29uc3QgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxuY29uc3QgbmFtZXNwYWNlID0gJ3VpLW5hdmlnYXRpb24tbW9udGgtbGFiZWwnO1xuXG5jb25zdCBNb250aExhYmVsID0gKHsgc2hvd01vbnRoLCBtb250aE5hbWUsIGNsYXNzTmFtZSB9KSA9PiAoXG4gIDxoMiBjbGFzc05hbWU9e2NsYXNzTmFtZXMobmFtZXNwYWNlLCBjbGFzc05hbWUsIHNob3dNb250aCA/IGAke25hbWVzcGFjZX0tLXNob3dgIDogJycpfT5cbiAgICB7c2hvd01vbnRoID8gYCR7bW9udGhOYW1lfWAgOiAnJ31cbiAgPC9oMj5cbik7XG5cbk1vbnRoTGFiZWwucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IHN0cmluZyxcbiAgbW9udGhOYW1lOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2hvd01vbnRoOiBib29sLmlzUmVxdWlyZWQsXG59O1xuXG5Nb250aExhYmVsLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiBudWxsLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb250aExhYmVsO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5515\n')},2928:function(module,__unused_webpack_exports,__webpack_require__){eval("var _defineProperty = __webpack_require__(9713);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar React = __webpack_require__(7294);\nvar _require = __webpack_require__(5697),\n  bool = _require.bool;\nvar Snackbar = __webpack_require__(9722);\nvar SnackbarWrapper = function SnackbarWrapper(props) {\n  var show = props.show;\n  return show ? /*#__PURE__*/React.createElement(Snackbar, _objectSpread(_objectSpread({}, props), {}, {\n    delay: 5000\n  })) : null;\n};\nSnackbarWrapper.defaultProps = {\n  show: false\n};\nmodule.exports = SnackbarWrapper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9jb21wb25lbnRzL3NuYWNrYmFyLXdyYXBwZXIvc25hY2tiYXItd3JhcHBlci5qcz9kYjI0Il0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsImJvb2wiLCJTbmFja2JhciIsIlNuYWNrYmFyV3JhcHBlciIsInByb3BzIiwic2hvdyIsImRlbGF5IiwiZGVmYXVsdFByb3BzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBTUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLElBQU8sQ0FBQztBQUM5QixlQUFpQkEsbUJBQU8sQ0FBQyxJQUFZLENBQUM7RUFBOUJDLElBQUksWUFBSkEsSUFBSTtBQUNaLElBQU1DLFFBQVEsR0FBR0YsbUJBQU8sQ0FBQyxJQUFpQixDQUFDO0FBRTNDLElBQU1HLGVBQWUsR0FBRyxTQUFsQkEsZUFBZSxDQUFJQyxLQUFLLEVBQUs7RUFDakMsSUFBUUMsSUFBSSxHQUFLRCxLQUFLLENBQWRDLElBQUk7RUFDWixPQUFPQSxJQUFJLGdCQUFHLG9CQUFDLFFBQVEsa0NBQVVELEtBQUs7SUFBRUUsS0FBSyxFQUFFO0VBQUksR0FBTSxHQUFHLElBQUk7QUFDbEUsQ0FBQztBQU1ESCxlQUFlLENBQUNJLFlBQVksR0FBRztFQUM3QkYsSUFBSSxFQUFFO0FBQ1IsQ0FBQztBQUVERyxNQUFNLENBQUNDLE9BQU8sR0FBR04sZUFBZSIsImZpbGUiOiIyOTI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBib29sIH0gPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBTbmFja2JhciA9IHJlcXVpcmUoJ0BhbmRlcy9zbmFja2JhcicpO1xuXG5jb25zdCBTbmFja2JhcldyYXBwZXIgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBzaG93IH0gPSBwcm9wcztcbiAgcmV0dXJuIHNob3cgPyA8U25hY2tiYXIgey4uLnsgLi4ucHJvcHMsIGRlbGF5OiA1MDAwIH19IC8+IDogbnVsbDtcbn07XG5cblNuYWNrYmFyV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIHNob3c6IGJvb2wsXG59O1xuXG5TbmFja2JhcldyYXBwZXIuZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiBmYWxzZSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU25hY2tiYXJXcmFwcGVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2928\n")},406:function(module){eval("var shouldShowMonth = function shouldShowMonth(month_name, index, elements) {\n  var showMonth;\n  if (index > 0) {\n    showMonth = month_name !== elements[index - 1].month_name;\n  } else {\n    showMonth = true;\n  }\n  return showMonth;\n};\nmodule.exports = {\n  shouldShowMonth: shouldShowMonth\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2LmpzIiwibmFtZXMiOlsic2hvdWxkU2hvd01vbnRoIiwibW9udGhfbmFtZSIsImluZGV4IiwiZWxlbWVudHMiLCJzaG93TW9udGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9saWIvc2hvdy1tb250aC1oZWxwZXIuanM/YTJlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzaG91bGRTaG93TW9udGggPSAobW9udGhfbmFtZSwgaW5kZXgsIGVsZW1lbnRzKSA9PiB7XG4gIGxldCBzaG93TW9udGg7XG5cbiAgaWYgKGluZGV4ID4gMCkge1xuICAgIHNob3dNb250aCA9IG1vbnRoX25hbWUgIT09IGVsZW1lbnRzW2luZGV4IC0gMV0ubW9udGhfbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBzaG93TW9udGggPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHNob3dNb250aDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaG91bGRTaG93TW9udGgsXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWUsQ0FBSUMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBSztFQUN2RCxJQUFJQyxTQUFTO0VBRWIsSUFBSUYsS0FBSyxHQUFHLENBQUMsRUFBRTtJQUNiRSxTQUFTLEdBQUdILFVBQVUsS0FBS0UsUUFBUSxDQUFDRCxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUNELFVBQVU7RUFDM0QsQ0FBQyxNQUFNO0lBQ0xHLFNBQVMsR0FBRyxJQUFJO0VBQ2xCO0VBRUEsT0FBT0EsU0FBUztBQUNsQixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZOLGVBQWUsRUFBZkE7QUFDRixDQUFDIn0=\n//# sourceURL=webpack-internal:///406\n")},589:function(module,__unused_webpack_exports,__webpack_require__){eval('var _jsx = __webpack_require__(8135);\nvar _slicedToArray = __webpack_require__(3038);\nvar React = __webpack_require__(7294);\nvar LgpdHeader = __webpack_require__(5110);\nvar _require = __webpack_require__(3670),\n  useStore = _require.useStore;\nvar _require2 = __webpack_require__(7402),\n  historyConfigToggleSwitch = _require2.historyConfigToggleSwitch,\n  removeToggleModal = _require2.removeToggleModal;\nvar namespace = \'ui-navigation-header\';\nvar NavigationHeader = function NavigationHeader() {\n  var _useStore = useStore(),\n    _useStore2 = _slicedToArray(_useStore, 2),\n    _useStore2$ = _useStore2[0],\n    title = _useStore2$.title,\n    historyEnabled = _useStore2$.historyEnabled,\n    _useStore2$$lgpd_admi = _useStore2$.lgpd_admin,\n    toggle_lgpd_action_text = _useStore2$$lgpd_admi.toggle_lgpd_action_text,\n    remove_all_items_action_text = _useStore2$$lgpd_admi.remove_all_items_action_text,\n    removeAllItemsEnabled = _useStore2$.removeAllItemsEnabled,\n    lowEnd = _useStore2$.staticProps.lowEnd,\n    dispatch = _useStore2[1];\n  var onHistoryConfigToggle = function onHistoryConfigToggle(e) {\n    dispatch(historyConfigToggleSwitch(e.currentTarget.checked));\n  };\n  var onRemoveAllItemsClick = function onRemoveAllItemsClick() {\n    dispatch(removeToggleModal(true));\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, lowEnd && /*#__PURE__*/_jsx("div", {\n    className: namespace\n  }, void 0, title && /*#__PURE__*/_jsx("h2", {\n    className: "".concat(namespace, "__title")\n  }, void 0, title)), !lowEnd && /*#__PURE__*/React.createElement(LgpdHeader, {\n    toggle_lgpd_action_text: toggle_lgpd_action_text,\n    remove_all_items_action_text: remove_all_items_action_text,\n    title: title,\n    historyEnabled: historyEnabled,\n    onHistoryConfigToggle: onHistoryConfigToggle,\n    onRemoveAllItemsClick: onRemoveAllItemsClick,\n    removeAllItemsEnabled: removeAllItemsEnabled\n  }));\n};\nmodule.exports = NavigationHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL2NvbXBvbmVudHMvbmF2aWdhdGlvbi1oZWFkZXIvbmF2aWdhdGlvbi1oZWFkZXIuZGVza3RvcC5qcz9kY2VjIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIkxncGRIZWFkZXIiLCJ1c2VTdG9yZSIsImhpc3RvcnlDb25maWdUb2dnbGVTd2l0Y2giLCJyZW1vdmVUb2dnbGVNb2RhbCIsIm5hbWVzcGFjZSIsIk5hdmlnYXRpb25IZWFkZXIiLCJ0aXRsZSIsImhpc3RvcnlFbmFibGVkIiwibGdwZF9hZG1pbiIsInRvZ2dsZV9sZ3BkX2FjdGlvbl90ZXh0IiwicmVtb3ZlX2FsbF9pdGVtc19hY3Rpb25fdGV4dCIsInJlbW92ZUFsbEl0ZW1zRW5hYmxlZCIsImxvd0VuZCIsInN0YXRpY1Byb3BzIiwiZGlzcGF0Y2giLCJvbkhpc3RvcnlDb25maWdUb2dnbGUiLCJlIiwiY3VycmVudFRhcmdldCIsImNoZWNrZWQiLCJvblJlbW92ZUFsbEl0ZW1zQ2xpY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxJQUFPLENBQUM7QUFDOUIsSUFBTUMsVUFBVSxHQUFHRCxtQkFBTyxDQUFDLElBQW9DLENBQUM7QUFDaEUsZUFBcUJBLG1CQUFPLENBQUMsSUFBbUIsQ0FBQztFQUF6Q0UsUUFBUSxZQUFSQSxRQUFRO0FBQ2hCLGdCQUF5REYsbUJBQU8sQ0FBQyxJQUFnQyxDQUFDO0VBQTFGRyx5QkFBeUIsYUFBekJBLHlCQUF5QjtFQUFFQyxpQkFBaUIsYUFBakJBLGlCQUFpQjtBQUVwRCxJQUFNQyxTQUFTLEdBQUcsc0JBQXNCO0FBRXhDLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0IsR0FBUztFQUM3QixnQkFTSUosUUFBUSxFQUFFO0lBQUE7SUFBQTtJQVBWSyxLQUFLLGVBQUxBLEtBQUs7SUFDTEMsY0FBYyxlQUFkQSxjQUFjO0lBQUEsb0NBQ2RDLFVBQVU7SUFBSUMsdUJBQXVCLHlCQUF2QkEsdUJBQXVCO0lBQUVDLDRCQUE0Qix5QkFBNUJBLDRCQUE0QjtJQUNuRUMscUJBQXFCLGVBQXJCQSxxQkFBcUI7SUFDTkMsTUFBTSxlQUFyQkMsV0FBVyxDQUFJRCxNQUFNO0lBRXZCRSxRQUFRO0VBR1YsSUFBTUMscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUFxQixDQUFJQyxDQUFDLEVBQUs7SUFDbkNGLFFBQVEsQ0FBQ1oseUJBQXlCLENBQUNjLENBQUMsQ0FBQ0MsYUFBYSxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUM5RCxDQUFDO0VBQ0QsSUFBTUMscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUFxQixHQUFTO0lBQ2xDTCxRQUFRLENBQUNYLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ25DLENBQUM7RUFDRCxvQkFDRSwwQ0FDR1MsTUFBTSxpQkFBSTtJQUFLLFNBQVMsRUFBRVI7RUFBVSxXQUFFRSxLQUFLLGlCQUFJO0lBQUksU0FBUyxZQUFLRixTQUFTO0VBQVUsV0FBRUUsS0FBSyxDQUFNLENBQU8sRUFDeEcsQ0FBQ00sTUFBTSxpQkFDTixvQkFBQyxVQUFVO0lBRVBILHVCQUF1QixFQUF2QkEsdUJBQXVCO0lBQ3ZCQyw0QkFBNEIsRUFBNUJBLDRCQUE0QjtJQUM1QkosS0FBSyxFQUFMQSxLQUFLO0lBQ0xDLGNBQWMsRUFBZEEsY0FBYztJQUNkUSxxQkFBcUIsRUFBckJBLHFCQUFxQjtJQUNyQkkscUJBQXFCLEVBQXJCQSxxQkFBcUI7SUFDckJSLHFCQUFxQixFQUFyQkE7RUFBcUIsRUFHMUIsQ0FDQTtBQUVQLENBQUM7QUFDRFMsTUFBTSxDQUFDQyxPQUFPLEdBQUdoQixnQkFBZ0IiLCJmaWxlIjoiNTg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgTGdwZEhlYWRlciA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvbGdwZC1oZWFkZXInKTtcbmNvbnN0IHsgdXNlU3RvcmUgfSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3N0b3JlJyk7XG5jb25zdCB7IGhpc3RvcnlDb25maWdUb2dnbGVTd2l0Y2gsIHJlbW92ZVRvZ2dsZU1vZGFsIH0gPSByZXF1aXJlKCcuLi8uLi9zdGF0ZS9uYXZpZ2F0aW9uLWFjdGlvbnMnKTtcblxuY29uc3QgbmFtZXNwYWNlID0gJ3VpLW5hdmlnYXRpb24taGVhZGVyJztcblxuY29uc3QgTmF2aWdhdGlvbkhlYWRlciA9ICgpID0+IHtcbiAgY29uc3QgW1xuICAgIHtcbiAgICAgIHRpdGxlLFxuICAgICAgaGlzdG9yeUVuYWJsZWQsXG4gICAgICBsZ3BkX2FkbWluOiB7IHRvZ2dsZV9sZ3BkX2FjdGlvbl90ZXh0LCByZW1vdmVfYWxsX2l0ZW1zX2FjdGlvbl90ZXh0IH0sXG4gICAgICByZW1vdmVBbGxJdGVtc0VuYWJsZWQsXG4gICAgICBzdGF0aWNQcm9wczogeyBsb3dFbmQgfSxcbiAgICB9LFxuICAgIGRpc3BhdGNoLFxuICBdID0gdXNlU3RvcmUoKTtcblxuICBjb25zdCBvbkhpc3RvcnlDb25maWdUb2dnbGUgPSAoZSkgPT4ge1xuICAgIGRpc3BhdGNoKGhpc3RvcnlDb25maWdUb2dnbGVTd2l0Y2goZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpKTtcbiAgfTtcbiAgY29uc3Qgb25SZW1vdmVBbGxJdGVtc0NsaWNrID0gKCkgPT4ge1xuICAgIGRpc3BhdGNoKHJlbW92ZVRvZ2dsZU1vZGFsKHRydWUpKTtcbiAgfTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2xvd0VuZCAmJiA8ZGl2IGNsYXNzTmFtZT17bmFtZXNwYWNlfT57dGl0bGUgJiYgPGgyIGNsYXNzTmFtZT17YCR7bmFtZXNwYWNlfV9fdGl0bGVgfT57dGl0bGV9PC9oMj59PC9kaXY+fVxuICAgICAgeyFsb3dFbmQgJiYgKFxuICAgICAgICA8TGdwZEhlYWRlclxuICAgICAgICAgIHsuLi57XG4gICAgICAgICAgICB0b2dnbGVfbGdwZF9hY3Rpb25fdGV4dCxcbiAgICAgICAgICAgIHJlbW92ZV9hbGxfaXRlbXNfYWN0aW9uX3RleHQsXG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIGhpc3RvcnlFbmFibGVkLFxuICAgICAgICAgICAgb25IaXN0b3J5Q29uZmlnVG9nZ2xlLFxuICAgICAgICAgICAgb25SZW1vdmVBbGxJdGVtc0NsaWNrLFxuICAgICAgICAgICAgcmVtb3ZlQWxsSXRlbXNFbmFibGVkLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufTtcbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbkhlYWRlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///589\n')},7426:function(module,__unused_webpack_exports,__webpack_require__){eval('var _extends = __webpack_require__(7154);\nvar _jsx = __webpack_require__(8135);\nvar _toConsumableArray = __webpack_require__(319);\nvar _defineProperty = __webpack_require__(9713);\nvar _slicedToArray = __webpack_require__(3038);\nvar _NavigationHeader;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar React = __webpack_require__(7294);\nvar _require = __webpack_require__(7294),\n  useState = _require.useState;\nvar classNames = __webpack_require__(4184);\nvar Spinner = __webpack_require__(4631);\nvar _require2 = __webpack_require__(5814),\n  Item = _require2.CardDesktopGrid;\nvar NavigationHeader = __webpack_require__(589);\nvar MonthLabel = __webpack_require__(5515);\nvar EmptyList = __webpack_require__(3894);\nvar ConfirmModal = __webpack_require__(8649);\nvar _require3 = __webpack_require__(3670),\n  useStore = _require3.useStore;\nvar _require4 = __webpack_require__(7402),\n  historyConfigModalResult = _require4.historyConfigModalResult,\n  removeAllItemModalResult = _require4.removeAllItemModalResult,\n  removeItem = _require4.removeItem,\n  addBookmark = _require4.addBookmark,\n  removeBookmark = _require4.removeBookmark,\n  snackbarInfo = _require4.snackbarInfo;\nvar _require5 = __webpack_require__(2976),\n  attachHandleToActionUiCardWeb = _require5.attachHandleToActionUiCardWeb;\nvar SnackbarWrapper = __webpack_require__(2928);\nvar namespace = \'ui-navigation-component\';\nvar LgpdConfirmModal = ConfirmModal;\nvar RemoveAllItemsConfirmModal = ConfirmModal;\nvar NavigationListDesktop = function NavigationListDesktop() {\n  var _useStore = useStore(),\n    _useStore2 = _slicedToArray(_useStore, 2),\n    _useStore2$ = _useStore2[0],\n    items = _useStore2$.items,\n    historyEnabled = _useStore2$.historyEnabled,\n    lgpdModal = _useStore2$.lgpdModal,\n    removeAllItemsConfirmModal = _useStore2$.removeAllItemsConfirmModal,\n    navigationEmptyList = _useStore2$.navigationEmptyList,\n    lgpdEmptyList = _useStore2$.lgpdEmptyList,\n    snackbarConfig = _useStore2$.snackbarConfig,\n    deviceType = _useStore2$.staticProps.deviceType,\n    dispatch = _useStore2[1];\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    itemsRemove = _useState2[0],\n    setItemsRemove = _useState2[1];\n  var emptyList = historyEnabled ? navigationEmptyList : lgpdEmptyList;\n  var onHistoryConfigToggleModalResult = function onHistoryConfigToggleModalResult(result) {\n    dispatch(historyConfigModalResult(result));\n  };\n  var onRemoveToggleModalResult = function onRemoveToggleModalResult(result) {\n    dispatch(removeAllItemModalResult(result));\n  };\n  var handle_removeItem = function handle_removeItem(_ref) {\n    var item_id = _ref.hiddenInputs.item_id,\n      item = _ref.item;\n    var itemToRemove = _objectSpread(_objectSpread({}, item), {}, {\n      loading: true,\n      hiddenItem: true\n    });\n    setItemsRemove(function (prev) {\n      return [].concat(_toConsumableArray(prev), [itemToRemove]);\n    });\n    dispatch(removeItem(item_id, item));\n  };\n  var handle_switchBookmark = function handle_switchBookmark(item, e, id) {\n    if (item.bookmark.bookmarked) dispatch(removeBookmark(id, item));else dispatch(addBookmark(id, item));\n  };\n  attachHandleToActionUiCardWeb(items.map(function (_ref2) {\n    var item_polycard = _ref2.item_polycard;\n    return item_polycard;\n  }), handle_removeItem, \'REMOVE_ITEM\');\n  var handleClose = function handleClose() {\n    if (removeAllItemsConfirmModal.visible) {\n      onRemoveToggleModalResult(false);\n    }\n    if (lgpdModal.visible) {\n      onHistoryConfigToggleModalResult(false);\n    }\n  };\n  items.forEach(function (_ref3) {\n    var it = _ref3.item_polycard;\n    it.handleClickBookmark = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return handle_switchBookmark.apply(void 0, [it].concat(args));\n    };\n  });\n  return /*#__PURE__*/_jsx("section", {\n    className: classNames(namespace, classNames)\n  }, void 0, _NavigationHeader || (_NavigationHeader = /*#__PURE__*/_jsx(NavigationHeader, {})), items.length ? /*#__PURE__*/_jsx("ul", {\n    className: "".concat(namespace, "-list"),\n    "data-testid": "".concat(namespace, "-list")\n  }, void 0, items.map(function (_ref4) {\n    var show_month = _ref4.show_month,\n      month_name = _ref4.month_name,\n      item_polycard = _ref4.item_polycard;\n    var itemAnimation = itemsRemove && itemsRemove.find(function (it) {\n      return it.id === item_polycard.main_info.id;\n    });\n    return /*#__PURE__*/_jsx("li", {\n      className: "".concat(namespace, "-list__item").concat(itemAnimation && itemAnimation.loading ? \' show-loading\' : \'\').concat(itemAnimation && itemAnimation.hiddenItem ? \' hidden-item hidden-item-desktop remove-animation-desktop\' : \'\'),\n      "data-testid": "Card"\n    }, item_polycard.main_info.id, /*#__PURE__*/React.createElement(MonthLabel, {\n      showMonth: show_month,\n      monthName: month_name,\n      className: "".concat(namespace, "-list__item__month-label")\n    }), /*#__PURE__*/React.createElement(Item, _extends({}, item_polycard, {\n      "data-testid": "Card"\n    })), itemAnimation && itemAnimation.loading && /*#__PURE__*/_jsx(Spinner, {\n      className: "andes-spinner__loading-desktop",\n      show: itemAnimation.loading,\n      modifier: "block",\n      size: "large"\n    }));\n  })) : /*#__PURE__*/React.createElement(EmptyList, emptyList), /*#__PURE__*/React.createElement(SnackbarWrapper, _extends({}, snackbarConfig, {\n    onChange: function onChange() {\n      dispatch(snackbarInfo(_objectSpread(_objectSpread({}, snackbarConfig), {}, {\n        show: false\n      })));\n    }\n  })), /*#__PURE__*/React.createElement(RemoveAllItemsConfirmModal, _objectSpread(_objectSpread({}, removeAllItemsConfirmModal), {}, {\n    onResult: onRemoveToggleModalResult,\n    onClose: handleClose,\n    deviceType: deviceType\n  })), /*#__PURE__*/React.createElement(LgpdConfirmModal, _objectSpread(_objectSpread({}, lgpdModal), {}, {\n    onResult: onHistoryConfigToggleModalResult,\n    onClose: handleClose,\n    deviceType: deviceType\n  })));\n};\nmodule.exports = NavigationListDesktop;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL2NvbXBvbmVudHMvbmF2aWdhdGlvbi1saXN0L25hdmlnYXRpb24tbGlzdC5kZXNrdG9wLmpzP2MyZGEiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwidXNlU3RhdGUiLCJjbGFzc05hbWVzIiwiU3Bpbm5lciIsIkl0ZW0iLCJDYXJkRGVza3RvcEdyaWQiLCJOYXZpZ2F0aW9uSGVhZGVyIiwiTW9udGhMYWJlbCIsIkVtcHR5TGlzdCIsIkNvbmZpcm1Nb2RhbCIsInVzZVN0b3JlIiwiaGlzdG9yeUNvbmZpZ01vZGFsUmVzdWx0IiwicmVtb3ZlQWxsSXRlbU1vZGFsUmVzdWx0IiwicmVtb3ZlSXRlbSIsImFkZEJvb2ttYXJrIiwicmVtb3ZlQm9va21hcmsiLCJzbmFja2JhckluZm8iLCJhdHRhY2hIYW5kbGVUb0FjdGlvblVpQ2FyZFdlYiIsIlNuYWNrYmFyV3JhcHBlciIsIm5hbWVzcGFjZSIsIkxncGRDb25maXJtTW9kYWwiLCJSZW1vdmVBbGxJdGVtc0NvbmZpcm1Nb2RhbCIsIk5hdmlnYXRpb25MaXN0RGVza3RvcCIsIml0ZW1zIiwiaGlzdG9yeUVuYWJsZWQiLCJsZ3BkTW9kYWwiLCJyZW1vdmVBbGxJdGVtc0NvbmZpcm1Nb2RhbCIsIm5hdmlnYXRpb25FbXB0eUxpc3QiLCJsZ3BkRW1wdHlMaXN0Iiwic25hY2tiYXJDb25maWciLCJkZXZpY2VUeXBlIiwic3RhdGljUHJvcHMiLCJkaXNwYXRjaCIsIml0ZW1zUmVtb3ZlIiwic2V0SXRlbXNSZW1vdmUiLCJlbXB0eUxpc3QiLCJvbkhpc3RvcnlDb25maWdUb2dnbGVNb2RhbFJlc3VsdCIsInJlc3VsdCIsIm9uUmVtb3ZlVG9nZ2xlTW9kYWxSZXN1bHQiLCJoYW5kbGVfcmVtb3ZlSXRlbSIsIml0ZW1faWQiLCJoaWRkZW5JbnB1dHMiLCJpdGVtIiwiaXRlbVRvUmVtb3ZlIiwibG9hZGluZyIsImhpZGRlbkl0ZW0iLCJwcmV2IiwiaGFuZGxlX3N3aXRjaEJvb2ttYXJrIiwiZSIsImlkIiwiYm9va21hcmsiLCJib29rbWFya2VkIiwibWFwIiwiaXRlbV9wb2x5Y2FyZCIsImhhbmRsZUNsb3NlIiwidmlzaWJsZSIsImZvckVhY2giLCJpdCIsImhhbmRsZUNsaWNrQm9va21hcmsiLCJhcmdzIiwibGVuZ3RoIiwic2hvd19tb250aCIsIm1vbnRoX25hbWUiLCJpdGVtQW5pbWF0aW9uIiwiZmluZCIsIm1haW5faW5mbyIsInNob3dNb250aCIsIm1vbnRoTmFtZSIsImNsYXNzTmFtZSIsInNob3ciLCJvblJlc3VsdCIsIm9uQ2xvc2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQU1BLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxJQUFPLENBQUM7QUFFOUIsZUFBcUJBLG1CQUFPLENBQUMsSUFBTyxDQUFDO0VBQTdCQyxRQUFRLFlBQVJBLFFBQVE7QUFDaEIsSUFBTUMsVUFBVSxHQUFHRixtQkFBTyxDQUFDLElBQVksQ0FBQztBQUV4QyxJQUFNRyxPQUFPLEdBQUdILG1CQUFPLENBQUMsSUFBZ0IsQ0FBQztBQUN6QyxnQkFBa0NBLG1CQUFPLENBQUMsSUFBa0QsQ0FBQztFQUFwRUksSUFBSSxhQUFyQkMsZUFBZTtBQUN2QixJQUFNQyxnQkFBZ0IsR0FBR04sbUJBQU8sQ0FBQyxHQUFnRCxDQUFDO0FBQ2xGLElBQU1PLFVBQVUsR0FBR1AsbUJBQU8sQ0FBQyxJQUFvQyxDQUFDO0FBQ2hFLElBQU1RLFNBQVMsR0FBR1IsbUJBQU8sQ0FBQyxJQUFtQyxDQUFDO0FBQzlELElBQU1TLFlBQVksR0FBR1QsbUJBQU8sQ0FBQyxJQUFzQyxDQUFDO0FBQ3BFLGdCQUFxQkEsbUJBQU8sQ0FBQyxJQUFtQixDQUFDO0VBQXpDVSxRQUFRLGFBQVJBLFFBQVE7QUFDaEIsZ0JBT0lWLG1CQUFPLENBQUMsSUFBZ0MsQ0FBQztFQU4zQ1csd0JBQXdCLGFBQXhCQSx3QkFBd0I7RUFDeEJDLHdCQUF3QixhQUF4QkEsd0JBQXdCO0VBQ3hCQyxVQUFVLGFBQVZBLFVBQVU7RUFDVkMsV0FBVyxhQUFYQSxXQUFXO0VBQ1hDLGNBQWMsYUFBZEEsY0FBYztFQUNkQyxZQUFZLGFBQVpBLFlBQVk7QUFFZCxnQkFBMENoQixtQkFBTyxDQUFDLElBQWlDLENBQUM7RUFBNUVpQiw2QkFBNkIsYUFBN0JBLDZCQUE2QjtBQUNyQyxJQUFNQyxlQUFlLEdBQUdsQixtQkFBTyxDQUFDLElBQTBELENBQUM7QUFFM0YsSUFBTW1CLFNBQVMsR0FBRyx5QkFBeUI7QUFFM0MsSUFBTUMsZ0JBQWdCLEdBQUdYLFlBQVk7QUFDckMsSUFBTVksMEJBQTBCLEdBQUdaLFlBQVk7QUFFL0MsSUFBTWEscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUFxQixHQUFTO0VBQ2xDLGdCQVlJWixRQUFRLEVBQUU7SUFBQTtJQUFBO0lBVlZhLEtBQUssZUFBTEEsS0FBSztJQUNMQyxjQUFjLGVBQWRBLGNBQWM7SUFDZEMsU0FBUyxlQUFUQSxTQUFTO0lBQ1RDLDBCQUEwQixlQUExQkEsMEJBQTBCO0lBQzFCQyxtQkFBbUIsZUFBbkJBLG1CQUFtQjtJQUNuQkMsYUFBYSxlQUFiQSxhQUFhO0lBQ2JDLGNBQWMsZUFBZEEsY0FBYztJQUNDQyxVQUFVLGVBQXpCQyxXQUFXLENBQUlELFVBQVU7SUFFM0JFLFFBQVE7RUFFVixnQkFBc0MvQixRQUFRLENBQUMsRUFBRSxDQUFDO0lBQUE7SUFBM0NnQyxXQUFXO0lBQUVDLGNBQWM7RUFDbEMsSUFBTUMsU0FBUyxHQUFHWCxjQUFjLEdBQUdHLG1CQUFtQixHQUFHQyxhQUFhO0VBQ3RFLElBQU1RLGdDQUFnQyxHQUFHLFNBQW5DQSxnQ0FBZ0MsQ0FBSUMsTUFBTSxFQUFLO0lBQ25ETCxRQUFRLENBQUNyQix3QkFBd0IsQ0FBQzBCLE1BQU0sQ0FBQyxDQUFDO0VBQzVDLENBQUM7RUFDRCxJQUFNQyx5QkFBeUIsR0FBRyxTQUE1QkEseUJBQXlCLENBQUlELE1BQU0sRUFBSztJQUM1Q0wsUUFBUSxDQUFDcEIsd0JBQXdCLENBQUN5QixNQUFNLENBQUMsQ0FBQztFQUM1QyxDQUFDO0VBQ0QsSUFBTUUsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQixPQUE0QztJQUFBLElBQXRCQyxPQUFPLFFBQXZCQyxZQUFZLENBQUlELE9BQU87TUFBSUUsSUFBSSxRQUFKQSxJQUFJO0lBQzFELElBQU1DLFlBQVksbUNBQVFELElBQUk7TUFBRUUsT0FBTyxFQUFFLElBQUk7TUFBRUMsVUFBVSxFQUFFO0lBQUksRUFBRTtJQUNqRVgsY0FBYyxDQUFDLFVBQUNZLElBQUk7TUFBQSxvQ0FBU0EsSUFBSSxJQUFFSCxZQUFZO0lBQUEsQ0FBQyxDQUFDO0lBQ2pEWCxRQUFRLENBQUNuQixVQUFVLENBQUMyQixPQUFPLEVBQUVFLElBQUksQ0FBQyxDQUFDO0VBQ3JDLENBQUM7RUFDRCxJQUFNSyxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXFCLENBQUlMLElBQUksRUFBRU0sQ0FBQyxFQUFFQyxFQUFFLEVBQUs7SUFDN0MsSUFBSVAsSUFBSSxDQUFDUSxRQUFRLENBQUNDLFVBQVUsRUFBRW5CLFFBQVEsQ0FBQ2pCLGNBQWMsQ0FBQ2tDLEVBQUUsRUFBRVAsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUM1RFYsUUFBUSxDQUFDbEIsV0FBVyxDQUFDbUMsRUFBRSxFQUFFUCxJQUFJLENBQUMsQ0FBQztFQUN0QyxDQUFDO0VBQ0R6Qiw2QkFBNkIsQ0FDM0JNLEtBQUssQ0FBQzZCLEdBQUcsQ0FBQztJQUFBLElBQUdDLGFBQWEsU0FBYkEsYUFBYTtJQUFBLE9BQU9BLGFBQWE7RUFBQSxFQUFDLEVBQy9DZCxpQkFBaUIsRUFDakIsYUFBYSxDQUNkO0VBQ0QsSUFBTWUsV0FBVyxHQUFHLFNBQWRBLFdBQVcsR0FBUztJQUN4QixJQUFJNUIsMEJBQTBCLENBQUM2QixPQUFPLEVBQUU7TUFDdENqQix5QkFBeUIsQ0FBQyxLQUFLLENBQUM7SUFDbEM7SUFDQSxJQUFJYixTQUFTLENBQUM4QixPQUFPLEVBQUU7TUFDckJuQixnQ0FBZ0MsQ0FBQyxLQUFLLENBQUM7SUFDekM7RUFDRixDQUFDO0VBQ0RiLEtBQUssQ0FBQ2lDLE9BQU8sQ0FBQyxpQkFBMkI7SUFBQSxJQUFUQyxFQUFFLFNBQWpCSixhQUFhO0lBQzVCSSxFQUFFLENBQUNDLG1CQUFtQixHQUFHO01BQUEsa0NBQUlDLElBQUk7UUFBSkEsSUFBSTtNQUFBO01BQUEsT0FBS1oscUJBQXFCLGdCQUFDVSxFQUFFLFNBQUtFLElBQUksRUFBQztJQUFBO0VBQzFFLENBQUMsQ0FBQztFQUNGLG9CQUNFO0lBQVMsU0FBUyxFQUFFekQsVUFBVSxDQUFDaUIsU0FBUyxFQUFFakIsVUFBVTtFQUFFLGtFQUNwRCxLQUFDLGdCQUFnQixLQUFHLEdBQ25CcUIsS0FBSyxDQUFDcUMsTUFBTSxnQkFDWDtJQUFJLFNBQVMsWUFBS3pDLFNBQVMsVUFBUTtJQUFDLHlCQUFnQkEsU0FBUztFQUFRLFdBQ2xFSSxLQUFLLENBQUM2QixHQUFHLENBQUMsaUJBQStDO0lBQUEsSUFBNUNTLFVBQVUsU0FBVkEsVUFBVTtNQUFFQyxVQUFVLFNBQVZBLFVBQVU7TUFBRVQsYUFBYSxTQUFiQSxhQUFhO0lBQ2pELElBQU1VLGFBQWEsR0FBRzlCLFdBQVcsSUFBSUEsV0FBVyxDQUFDK0IsSUFBSSxDQUFDLFVBQUNQLEVBQUU7TUFBQSxPQUFLQSxFQUFFLENBQUNSLEVBQUUsS0FBS0ksYUFBYSxDQUFDWSxTQUFTLENBQUNoQixFQUFFO0lBQUEsRUFBQztJQUNuRyxvQkFDRTtNQUNFLFNBQVMsWUFBSzlCLFNBQVMsd0JBQWM0QyxhQUFhLElBQUlBLGFBQWEsQ0FBQ25CLE9BQU8sR0FBRyxlQUFlLEdBQUcsRUFBRSxTQUNoR21CLGFBQWEsSUFBSUEsYUFBYSxDQUFDbEIsVUFBVSxHQUNyQywyREFBMkQsR0FDM0QsRUFBRSxDQUNMO01BRUgsZUFBWTtJQUFNLEdBRGJRLGFBQWEsQ0FBQ1ksU0FBUyxDQUFDaEIsRUFBRSxlQUcvQixvQkFBQyxVQUFVO01BRVBpQixTQUFTLEVBQUVMLFVBQVU7TUFDckJNLFNBQVMsRUFBRUwsVUFBVTtNQUNyQk0sU0FBUyxZQUFLakQsU0FBUztJQUEwQixFQUVuRCxlQUNGLG9CQUFDLElBQUksZUFBS2tDLGFBQWE7TUFBRSxlQUFZO0lBQU0sR0FBRyxFQUM3Q1UsYUFBYSxJQUFJQSxhQUFhLENBQUNuQixPQUFPLGlCQUNyQyxLQUFDLE9BQU87TUFDTixTQUFTLEVBQUMsZ0NBQWdDO01BQzFDLElBQUksRUFBRW1CLGFBQWEsQ0FBQ25CLE9BQVE7TUFDNUIsUUFBUSxFQUFDLE9BQU87TUFDaEIsSUFBSSxFQUFDO0lBQU8sRUFFZixDQUNFO0VBRVQsQ0FBQyxDQUFDLENBQ0MsZ0JBRUwsb0JBQUMsU0FBUyxFQUFLVCxTQUFTLENBQ3pCLGVBQ0Qsb0JBQUMsZUFBZSxlQUNWTixjQUFjO0lBQ2xCLFFBQVEsRUFBRSxvQkFBTTtNQUNkRyxRQUFRLENBQ05oQixZQUFZLGlDQUNQYSxjQUFjO1FBQ2pCd0MsSUFBSSxFQUFFO01BQUssR0FDWCxDQUNIO0lBQ0g7RUFBRSxHQUNGLGVBQ0Ysb0JBQUMsMEJBQTBCLGtDQUNoQjNDLDBCQUEwQjtJQUFFNEMsUUFBUSxFQUFFaEMseUJBQXlCO0lBQUVpQyxPQUFPLEVBQUVqQixXQUFXO0lBQUV4QixVQUFVLEVBQVZBO0VBQVUsR0FDMUcsZUFDRixvQkFBQyxnQkFBZ0Isa0NBQ05MLFNBQVM7SUFBRTZDLFFBQVEsRUFBRWxDLGdDQUFnQztJQUFFbUMsT0FBTyxFQUFFakIsV0FBVztJQUFFeEIsVUFBVSxFQUFWQTtFQUFVLEdBQ2hHLENBQ007QUFFZCxDQUFDO0FBRUQwQyxNQUFNLENBQUNDLE9BQU8sR0FBR25ELHFCQUFxQiIsImZpbGUiOiI3NDI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCB7IHVzZVN0YXRlIH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxuY29uc3QgU3Bpbm5lciA9IHJlcXVpcmUoJ0BhbmRlcy9zcGlubmVyJyk7XG5jb25zdCB7IENhcmREZXNrdG9wR3JpZDogSXRlbSB9ID0gcmVxdWlyZSgnQHVpLWNvbXBvbmVudHMtd2ViL21sLWNhcmRzLXdlYi9jYXJkL0Rlc2t0b3BHcmlkJyk7XG5jb25zdCBOYXZpZ2F0aW9uSGVhZGVyID0gcmVxdWlyZSgnLi4vbmF2aWdhdGlvbi1oZWFkZXIvbmF2aWdhdGlvbi1oZWFkZXIuZGVza3RvcCcpO1xuY29uc3QgTW9udGhMYWJlbCA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvbW9udGgtbGFiZWwnKTtcbmNvbnN0IEVtcHR5TGlzdCA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZW1wdHktbGlzdCcpO1xuY29uc3QgQ29uZmlybU1vZGFsID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9jb25maXJtLW1vZGFsJyk7XG5jb25zdCB7IHVzZVN0b3JlIH0gPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9zdG9yZScpO1xuY29uc3Qge1xuICBoaXN0b3J5Q29uZmlnTW9kYWxSZXN1bHQsXG4gIHJlbW92ZUFsbEl0ZW1Nb2RhbFJlc3VsdCxcbiAgcmVtb3ZlSXRlbSxcbiAgYWRkQm9va21hcmssXG4gIHJlbW92ZUJvb2ttYXJrLFxuICBzbmFja2JhckluZm8sXG59ID0gcmVxdWlyZSgnLi4vLi4vc3RhdGUvbmF2aWdhdGlvbi1hY3Rpb25zJyk7XG5jb25zdCB7IGF0dGFjaEhhbmRsZVRvQWN0aW9uVWlDYXJkV2ViIH0gPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9saWIvcG9seWNhcmQtaGVscGVyJyk7XG5jb25zdCBTbmFja2JhcldyYXBwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3NuYWNrYmFyLXdyYXBwZXIvc25hY2tiYXItd3JhcHBlcicpO1xuXG5jb25zdCBuYW1lc3BhY2UgPSAndWktbmF2aWdhdGlvbi1jb21wb25lbnQnO1xuXG5jb25zdCBMZ3BkQ29uZmlybU1vZGFsID0gQ29uZmlybU1vZGFsO1xuY29uc3QgUmVtb3ZlQWxsSXRlbXNDb25maXJtTW9kYWwgPSBDb25maXJtTW9kYWw7XG5cbmNvbnN0IE5hdmlnYXRpb25MaXN0RGVza3RvcCA9ICgpID0+IHtcbiAgY29uc3QgW1xuICAgIHtcbiAgICAgIGl0ZW1zLFxuICAgICAgaGlzdG9yeUVuYWJsZWQsXG4gICAgICBsZ3BkTW9kYWwsXG4gICAgICByZW1vdmVBbGxJdGVtc0NvbmZpcm1Nb2RhbCxcbiAgICAgIG5hdmlnYXRpb25FbXB0eUxpc3QsXG4gICAgICBsZ3BkRW1wdHlMaXN0LFxuICAgICAgc25hY2tiYXJDb25maWcsXG4gICAgICBzdGF0aWNQcm9wczogeyBkZXZpY2VUeXBlIH0sXG4gICAgfSxcbiAgICBkaXNwYXRjaCxcbiAgXSA9IHVzZVN0b3JlKCk7XG4gIGNvbnN0IFtpdGVtc1JlbW92ZSwgc2V0SXRlbXNSZW1vdmVdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBlbXB0eUxpc3QgPSBoaXN0b3J5RW5hYmxlZCA/IG5hdmlnYXRpb25FbXB0eUxpc3QgOiBsZ3BkRW1wdHlMaXN0O1xuICBjb25zdCBvbkhpc3RvcnlDb25maWdUb2dnbGVNb2RhbFJlc3VsdCA9IChyZXN1bHQpID0+IHtcbiAgICBkaXNwYXRjaChoaXN0b3J5Q29uZmlnTW9kYWxSZXN1bHQocmVzdWx0KSk7XG4gIH07XG4gIGNvbnN0IG9uUmVtb3ZlVG9nZ2xlTW9kYWxSZXN1bHQgPSAocmVzdWx0KSA9PiB7XG4gICAgZGlzcGF0Y2gocmVtb3ZlQWxsSXRlbU1vZGFsUmVzdWx0KHJlc3VsdCkpO1xuICB9O1xuICBjb25zdCBoYW5kbGVfcmVtb3ZlSXRlbSA9ICh7IGhpZGRlbklucHV0czogeyBpdGVtX2lkIH0sIGl0ZW0gfSkgPT4ge1xuICAgIGNvbnN0IGl0ZW1Ub1JlbW92ZSA9IHsgLi4uaXRlbSwgbG9hZGluZzogdHJ1ZSwgaGlkZGVuSXRlbTogdHJ1ZSB9O1xuICAgIHNldEl0ZW1zUmVtb3ZlKChwcmV2KSA9PiBbLi4ucHJldiwgaXRlbVRvUmVtb3ZlXSk7XG4gICAgZGlzcGF0Y2gocmVtb3ZlSXRlbShpdGVtX2lkLCBpdGVtKSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZV9zd2l0Y2hCb29rbWFyayA9IChpdGVtLCBlLCBpZCkgPT4ge1xuICAgIGlmIChpdGVtLmJvb2ttYXJrLmJvb2ttYXJrZWQpIGRpc3BhdGNoKHJlbW92ZUJvb2ttYXJrKGlkLCBpdGVtKSk7XG4gICAgZWxzZSBkaXNwYXRjaChhZGRCb29rbWFyayhpZCwgaXRlbSkpO1xuICB9O1xuICBhdHRhY2hIYW5kbGVUb0FjdGlvblVpQ2FyZFdlYihcbiAgICBpdGVtcy5tYXAoKHsgaXRlbV9wb2x5Y2FyZCB9KSA9PiBpdGVtX3BvbHljYXJkKSxcbiAgICBoYW5kbGVfcmVtb3ZlSXRlbSxcbiAgICAnUkVNT1ZFX0lURU0nLFxuICApO1xuICBjb25zdCBoYW5kbGVDbG9zZSA9ICgpID0+IHtcbiAgICBpZiAocmVtb3ZlQWxsSXRlbXNDb25maXJtTW9kYWwudmlzaWJsZSkge1xuICAgICAgb25SZW1vdmVUb2dnbGVNb2RhbFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGlmIChsZ3BkTW9kYWwudmlzaWJsZSkge1xuICAgICAgb25IaXN0b3J5Q29uZmlnVG9nZ2xlTW9kYWxSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgaXRlbXMuZm9yRWFjaCgoeyBpdGVtX3BvbHljYXJkOiBpdCB9KSA9PiB7XG4gICAgaXQuaGFuZGxlQ2xpY2tCb29rbWFyayA9ICguLi5hcmdzKSA9PiBoYW5kbGVfc3dpdGNoQm9va21hcmsoaXQsIC4uLmFyZ3MpO1xuICB9KTtcbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9e2NsYXNzTmFtZXMobmFtZXNwYWNlLCBjbGFzc05hbWVzKX0+XG4gICAgICA8TmF2aWdhdGlvbkhlYWRlciAvPlxuICAgICAge2l0ZW1zLmxlbmd0aCA/IChcbiAgICAgICAgPHVsIGNsYXNzTmFtZT17YCR7bmFtZXNwYWNlfS1saXN0YH0gZGF0YS10ZXN0aWQ9e2Ake25hbWVzcGFjZX0tbGlzdGB9PlxuICAgICAgICAgIHtpdGVtcy5tYXAoKHsgc2hvd19tb250aCwgbW9udGhfbmFtZSwgaXRlbV9wb2x5Y2FyZCB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtQW5pbWF0aW9uID0gaXRlbXNSZW1vdmUgJiYgaXRlbXNSZW1vdmUuZmluZCgoaXQpID0+IGl0LmlkID09PSBpdGVtX3BvbHljYXJkLm1haW5faW5mby5pZCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Ake25hbWVzcGFjZX0tbGlzdF9faXRlbSR7aXRlbUFuaW1hdGlvbiAmJiBpdGVtQW5pbWF0aW9uLmxvYWRpbmcgPyAnIHNob3ctbG9hZGluZycgOiAnJ30ke1xuICAgICAgICAgICAgICAgICAgaXRlbUFuaW1hdGlvbiAmJiBpdGVtQW5pbWF0aW9uLmhpZGRlbkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgPyAnIGhpZGRlbi1pdGVtIGhpZGRlbi1pdGVtLWRlc2t0b3AgcmVtb3ZlLWFuaW1hdGlvbi1kZXNrdG9wJ1xuICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAga2V5PXtpdGVtX3BvbHljYXJkLm1haW5faW5mby5pZH1cbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cIkNhcmRcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPE1vbnRoTGFiZWxcbiAgICAgICAgICAgICAgICAgIHsuLi57XG4gICAgICAgICAgICAgICAgICAgIHNob3dNb250aDogc2hvd19tb250aCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhOYW1lOiBtb250aF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGAke25hbWVzcGFjZX0tbGlzdF9faXRlbV9fbW9udGgtbGFiZWxgLFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxJdGVtIHsuLi5pdGVtX3BvbHljYXJkfSBkYXRhLXRlc3RpZD1cIkNhcmRcIiAvPlxuICAgICAgICAgICAgICAgIHtpdGVtQW5pbWF0aW9uICYmIGl0ZW1BbmltYXRpb24ubG9hZGluZyAmJiAoXG4gICAgICAgICAgICAgICAgICA8U3Bpbm5lclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhbmRlcy1zcGlubmVyX19sb2FkaW5nLWRlc2t0b3BcIlxuICAgICAgICAgICAgICAgICAgICBzaG93PXtpdGVtQW5pbWF0aW9uLmxvYWRpbmd9XG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyPVwiYmxvY2tcIlxuICAgICAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC91bD5cbiAgICAgICkgOiAoXG4gICAgICAgIDxFbXB0eUxpc3Qgey4uLmVtcHR5TGlzdH0gLz5cbiAgICAgICl9XG4gICAgICA8U25hY2tiYXJXcmFwcGVyXG4gICAgICAgIHsuLi5zbmFja2JhckNvbmZpZ31cbiAgICAgICAgb25DaGFuZ2U9eygpID0+IHtcbiAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgIHNuYWNrYmFySW5mbyh7XG4gICAgICAgICAgICAgIC4uLnNuYWNrYmFyQ29uZmlnLFxuICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICAgPFJlbW92ZUFsbEl0ZW1zQ29uZmlybU1vZGFsXG4gICAgICAgIHsuLi57IC4uLnJlbW92ZUFsbEl0ZW1zQ29uZmlybU1vZGFsLCBvblJlc3VsdDogb25SZW1vdmVUb2dnbGVNb2RhbFJlc3VsdCwgb25DbG9zZTogaGFuZGxlQ2xvc2UsIGRldmljZVR5cGUgfX1cbiAgICAgIC8+XG4gICAgICA8TGdwZENvbmZpcm1Nb2RhbFxuICAgICAgICB7Li4ueyAuLi5sZ3BkTW9kYWwsIG9uUmVzdWx0OiBvbkhpc3RvcnlDb25maWdUb2dnbGVNb2RhbFJlc3VsdCwgb25DbG9zZTogaGFuZGxlQ2xvc2UsIGRldmljZVR5cGUgfX1cbiAgICAgIC8+XG4gICAgPC9zZWN0aW9uPlxuICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0aW9uTGlzdERlc2t0b3A7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7426\n')},9106:function(module){eval("var PRIMARY_ACTION = 'primary_action';\nvar BOOKMARK_CLICK = 'bookmark';\nvar UNBOOKMARK_CLICK = 'unbookmark';\nvar REMOVE_ITEM = 'remove_item';\nvar REMOVE_ALL_ITEMS = 'remove_all_items';\nvar REMOVE_MODAL_TOGGLE = 'remove_modal_toggle';\nvar ADMIN = 'admin';\nvar ADMIN_BACK = 'admin_back';\nvar HISTORY_MODAL_TOGGLE = 'history_modal_toggle';\nvar HISTORY_CONFIG_SWITCH = 'history_config_switch';\nvar SNACKBAR_INFO = 'snackbar_info';\nmodule.exports = {\n  PRIMARY_ACTION: PRIMARY_ACTION,\n  BOOKMARK_CLICK: BOOKMARK_CLICK,\n  UNBOOKMARK_CLICK: UNBOOKMARK_CLICK,\n  REMOVE_ITEM: REMOVE_ITEM,\n  REMOVE_ALL_ITEMS: REMOVE_ALL_ITEMS,\n  REMOVE_MODAL_TOGGLE: REMOVE_MODAL_TOGGLE,\n  ADMIN: ADMIN,\n  ADMIN_BACK: ADMIN_BACK,\n  HISTORY_MODAL_TOGGLE: HISTORY_MODAL_TOGGLE,\n  HISTORY_CONFIG_SWITCH: HISTORY_CONFIG_SWITCH,\n  SNACKBAR_INFO: SNACKBAR_INFO\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEwNi5qcyIsIm5hbWVzIjpbIlBSSU1BUllfQUNUSU9OIiwiQk9PS01BUktfQ0xJQ0siLCJVTkJPT0tNQVJLX0NMSUNLIiwiUkVNT1ZFX0lURU0iLCJSRU1PVkVfQUxMX0lURU1TIiwiUkVNT1ZFX01PREFMX1RPR0dMRSIsIkFETUlOIiwiQURNSU5fQkFDSyIsIkhJU1RPUllfTU9EQUxfVE9HR0xFIiwiSElTVE9SWV9DT05GSUdfU1dJVENIIiwiU05BQ0tCQVJfSU5GTyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2l0ZW1zLWxpc3RzLWZyb250ZW5kLy4vYXBwL3BhZ2VzL25hdmlnYXRpb24vc3RhdGUvYWN0aW9ucy10eXBlLmpzP2UwNjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUFJJTUFSWV9BQ1RJT04gPSAncHJpbWFyeV9hY3Rpb24nO1xuY29uc3QgQk9PS01BUktfQ0xJQ0sgPSAnYm9va21hcmsnO1xuY29uc3QgVU5CT09LTUFSS19DTElDSyA9ICd1bmJvb2ttYXJrJztcbmNvbnN0IFJFTU9WRV9JVEVNID0gJ3JlbW92ZV9pdGVtJztcbmNvbnN0IFJFTU9WRV9BTExfSVRFTVMgPSAncmVtb3ZlX2FsbF9pdGVtcyc7XG5jb25zdCBSRU1PVkVfTU9EQUxfVE9HR0xFID0gJ3JlbW92ZV9tb2RhbF90b2dnbGUnO1xuY29uc3QgQURNSU4gPSAnYWRtaW4nO1xuY29uc3QgQURNSU5fQkFDSyA9ICdhZG1pbl9iYWNrJztcbmNvbnN0IEhJU1RPUllfTU9EQUxfVE9HR0xFID0gJ2hpc3RvcnlfbW9kYWxfdG9nZ2xlJztcbmNvbnN0IEhJU1RPUllfQ09ORklHX1NXSVRDSCA9ICdoaXN0b3J5X2NvbmZpZ19zd2l0Y2gnO1xuY29uc3QgU05BQ0tCQVJfSU5GTyA9ICdzbmFja2Jhcl9pbmZvJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBSSU1BUllfQUNUSU9OLFxuICBCT09LTUFSS19DTElDSyxcbiAgVU5CT09LTUFSS19DTElDSyxcbiAgUkVNT1ZFX0lURU0sXG4gIFJFTU9WRV9BTExfSVRFTVMsXG4gIFJFTU9WRV9NT0RBTF9UT0dHTEUsXG4gIEFETUlOLFxuICBBRE1JTl9CQUNLLFxuICBISVNUT1JZX01PREFMX1RPR0dMRSxcbiAgSElTVE9SWV9DT05GSUdfU1dJVENILFxuICBTTkFDS0JBUl9JTkZPLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTUEsY0FBYyxHQUFHLGdCQUFnQjtBQUN2QyxJQUFNQyxjQUFjLEdBQUcsVUFBVTtBQUNqQyxJQUFNQyxnQkFBZ0IsR0FBRyxZQUFZO0FBQ3JDLElBQU1DLFdBQVcsR0FBRyxhQUFhO0FBQ2pDLElBQU1DLGdCQUFnQixHQUFHLGtCQUFrQjtBQUMzQyxJQUFNQyxtQkFBbUIsR0FBRyxxQkFBcUI7QUFDakQsSUFBTUMsS0FBSyxHQUFHLE9BQU87QUFDckIsSUFBTUMsVUFBVSxHQUFHLFlBQVk7QUFDL0IsSUFBTUMsb0JBQW9CLEdBQUcsc0JBQXNCO0FBQ25ELElBQU1DLHFCQUFxQixHQUFHLHVCQUF1QjtBQUNyRCxJQUFNQyxhQUFhLEdBQUcsZUFBZTtBQUVyQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZlosY0FBYyxFQUFkQSxjQUFjO0VBQ2RDLGNBQWMsRUFBZEEsY0FBYztFQUNkQyxnQkFBZ0IsRUFBaEJBLGdCQUFnQjtFQUNoQkMsV0FBVyxFQUFYQSxXQUFXO0VBQ1hDLGdCQUFnQixFQUFoQkEsZ0JBQWdCO0VBQ2hCQyxtQkFBbUIsRUFBbkJBLG1CQUFtQjtFQUNuQkMsS0FBSyxFQUFMQSxLQUFLO0VBQ0xDLFVBQVUsRUFBVkEsVUFBVTtFQUNWQyxvQkFBb0IsRUFBcEJBLG9CQUFvQjtFQUNwQkMscUJBQXFCLEVBQXJCQSxxQkFBcUI7RUFDckJDLGFBQWEsRUFBYkE7QUFDRixDQUFDIn0=\n//# sourceURL=webpack-internal:///9106\n")},3284:function(module,__unused_webpack_exports,__webpack_require__){eval("var _require = __webpack_require__(2976),\n  mapperItemPolycardActionData = _require.mapperItemPolycardActionData;\nvar mapperItemPolycardByIdForRemoval = function mapperItemPolycardByIdForRemoval(_ref) {\n  var item_polycard = _ref.item_polycard,\n    id_for_removal = _ref.id_for_removal;\n  return mapperItemPolycardActionData(item_polycard, 'REMOVE_ITEM', function (data) {\n    data.item_id = id_for_removal;\n  });\n};\nmodule.exports = {\n  mapperItemPolycardByIdForRemoval: mapperItemPolycardByIdForRemoval\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL3N0YXRlL2Zvcm1hdGVyLWhlbHBlci5qcz80MWRhIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJtYXBwZXJJdGVtUG9seWNhcmRBY3Rpb25EYXRhIiwibWFwcGVySXRlbVBvbHljYXJkQnlJZEZvclJlbW92YWwiLCJpdGVtX3BvbHljYXJkIiwiaWRfZm9yX3JlbW92YWwiLCJkYXRhIiwiaXRlbV9pZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLGVBQXlDQSxtQkFBTyxDQUFDLElBQThCLENBQUM7RUFBeEVDLDRCQUE0QixZQUE1QkEsNEJBQTRCO0FBRXBDLElBQU1DLGdDQUFnQyxHQUFHLFNBQW5DQSxnQ0FBZ0M7RUFBQSxJQUFNQyxhQUFhLFFBQWJBLGFBQWE7SUFBRUMsY0FBYyxRQUFkQSxjQUFjO0VBQUEsT0FDdkVILDRCQUE0QixDQUFDRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFVBQUNFLElBQUksRUFBSztJQUNuRUEsSUFBSSxDQUFDQyxPQUFPLEdBQUdGLGNBQWM7RUFDL0IsQ0FBQyxDQUFDO0FBQUE7QUFDSkcsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFBRU4sZ0NBQWdDLEVBQWhDQTtBQUFpQyxDQUFDIiwiZmlsZSI6IjMyODQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IG1hcHBlckl0ZW1Qb2x5Y2FyZEFjdGlvbkRhdGEgfSA9IHJlcXVpcmUoJy4uLy4uLy4uL2xpYi9wb2x5Y2FyZC1oZWxwZXInKTtcblxuY29uc3QgbWFwcGVySXRlbVBvbHljYXJkQnlJZEZvclJlbW92YWwgPSAoeyBpdGVtX3BvbHljYXJkLCBpZF9mb3JfcmVtb3ZhbCB9KSA9PlxuICBtYXBwZXJJdGVtUG9seWNhcmRBY3Rpb25EYXRhKGl0ZW1fcG9seWNhcmQsICdSRU1PVkVfSVRFTScsIChkYXRhKSA9PiB7XG4gICAgZGF0YS5pdGVtX2lkID0gaWRfZm9yX3JlbW92YWw7XG4gIH0pO1xubW9kdWxlLmV4cG9ydHMgPSB7IG1hcHBlckl0ZW1Qb2x5Y2FyZEJ5SWRGb3JSZW1vdmFsIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3284\n")},6807:function(module,__unused_webpack_exports,__webpack_require__){eval("var _defineProperty = __webpack_require__(9713);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar _require = __webpack_require__(406),\n  shouldShowMonth = _require.shouldShowMonth;\nvar _require2 = __webpack_require__(3284),\n  mapperItemPolycardByIdForRemoval = _require2.mapperItemPolycardByIdForRemoval;\nvar mapper = function mapper(_ref) {\n  var actions = _ref.actions,\n    title = _ref.title,\n    elements = _ref.elements,\n    privacy_config = _ref.privacy_config,\n    lgpd_admin = _ref.lgpd_admin,\n    snackbar = _ref.snackbar,\n    lgpd_confirm_modal = _ref.lgpd_confirm_modal,\n    remove_all_items_confirm_modal = _ref.remove_all_items_confirm_modal,\n    lgpd_empty_list = _ref.lgpd_empty_list,\n    lgpd_message = _ref.lgpd_message,\n    navigation_empty_list = _ref.navigation_empty_list,\n    staticProps = _ref.staticProps;\n  return {\n    title: title,\n    items: elements.map(function (m, i) {\n      return _objectSpread(_objectSpread({}, m), {}, {\n        item_polycard: mapperItemPolycardByIdForRemoval(m),\n        show_month: shouldShowMonth(m.month_name, i, elements)\n      });\n    }),\n    actions: actions.reduce(function (ac, c) {\n      return _objectSpread(_objectSpread({}, ac), {}, _defineProperty({}, c.id, c));\n    }, {}),\n    historyEnabled: !privacy_config.blocked,\n    snackbarConfig: {\n      message: snackbar.success.text,\n      type: 'default',\n      show: false\n    },\n    lgpd_admin: lgpd_admin,\n    removeAllItemsEnabled: elements.length > 0,\n    removeAllItemsConfirmModal: _objectSpread(_objectSpread({\n      className: 'ui-navigation-remove-all-modal'\n    }, remove_all_items_confirm_modal), {}, {\n      visible: false,\n      type: staticProps.deviceType === 'desktop' ? 'loose' : 'full',\n      forceRerender: staticProps.deviceType === 'mobile' ? Math.random().toString() : null // @TODO: ANDES MODAL HAS A BUG IN MOBILE SO WE FORCE RERENDER\n    }),\n\n    lgpdModal: _objectSpread(_objectSpread({}, lgpd_confirm_modal), {}, {\n      visible: false,\n      className: 'ui-navigation-lgpd-modal',\n      type: staticProps.deviceType === 'desktop' ? 'loose' : 'full',\n      forceRerender: staticProps.deviceType === 'mobile' ? Math.random().toString() : null // @TODO: ANDES MODAL HAS A BUG IN MOBILE SO WE FORCE RERENDER\n    }),\n\n    navigationEmptyList: {\n      title: navigation_empty_list.title.text,\n      subtitle: navigation_empty_list.subtitle.text\n    },\n    lgpdEmptyList: {\n      title: lgpd_empty_list.title.text\n    },\n    staticProps: staticProps,\n    lgpd_message: lgpd_message\n  };\n};\nmodule.exports = mapper;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL3N0YXRlL2pzb25NYXBwZXIuanM/OGZlMyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwic2hvdWxkU2hvd01vbnRoIiwibWFwcGVySXRlbVBvbHljYXJkQnlJZEZvclJlbW92YWwiLCJtYXBwZXIiLCJhY3Rpb25zIiwidGl0bGUiLCJlbGVtZW50cyIsInByaXZhY3lfY29uZmlnIiwibGdwZF9hZG1pbiIsInNuYWNrYmFyIiwibGdwZF9jb25maXJtX21vZGFsIiwicmVtb3ZlX2FsbF9pdGVtc19jb25maXJtX21vZGFsIiwibGdwZF9lbXB0eV9saXN0IiwibGdwZF9tZXNzYWdlIiwibmF2aWdhdGlvbl9lbXB0eV9saXN0Iiwic3RhdGljUHJvcHMiLCJpdGVtcyIsIm1hcCIsIm0iLCJpIiwiaXRlbV9wb2x5Y2FyZCIsInNob3dfbW9udGgiLCJtb250aF9uYW1lIiwicmVkdWNlIiwiYWMiLCJjIiwiaWQiLCJoaXN0b3J5RW5hYmxlZCIsImJsb2NrZWQiLCJzbmFja2JhckNvbmZpZyIsIm1lc3NhZ2UiLCJzdWNjZXNzIiwidGV4dCIsInR5cGUiLCJzaG93IiwicmVtb3ZlQWxsSXRlbXNFbmFibGVkIiwibGVuZ3RoIiwicmVtb3ZlQWxsSXRlbXNDb25maXJtTW9kYWwiLCJjbGFzc05hbWUiLCJ2aXNpYmxlIiwiZGV2aWNlVHlwZSIsImZvcmNlUmVyZW5kZXIiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJsZ3BkTW9kYWwiLCJuYXZpZ2F0aW9uRW1wdHlMaXN0Iiwic3VidGl0bGUiLCJsZ3BkRW1wdHlMaXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZUFBNEJBLG1CQUFPLENBQUMsR0FBZ0MsQ0FBQztFQUE3REMsZUFBZSxZQUFmQSxlQUFlO0FBQ3ZCLGdCQUE2Q0QsbUJBQU8sQ0FBQyxJQUFtQixDQUFDO0VBQWpFRSxnQ0FBZ0MsYUFBaENBLGdDQUFnQztBQUV4QyxJQUFNQyxNQUFNLEdBQUcsU0FBVEEsTUFBTTtFQUFBLElBQ1ZDLE9BQU8sUUFBUEEsT0FBTztJQUNQQyxLQUFLLFFBQUxBLEtBQUs7SUFDTEMsUUFBUSxRQUFSQSxRQUFRO0lBQ1JDLGNBQWMsUUFBZEEsY0FBYztJQUNkQyxVQUFVLFFBQVZBLFVBQVU7SUFDVkMsUUFBUSxRQUFSQSxRQUFRO0lBQ1JDLGtCQUFrQixRQUFsQkEsa0JBQWtCO0lBQ2xCQyw4QkFBOEIsUUFBOUJBLDhCQUE4QjtJQUM5QkMsZUFBZSxRQUFmQSxlQUFlO0lBQ2ZDLFlBQVksUUFBWkEsWUFBWTtJQUNaQyxxQkFBcUIsUUFBckJBLHFCQUFxQjtJQUNyQkMsV0FBVyxRQUFYQSxXQUFXO0VBQUEsT0FDTjtJQUNMVixLQUFLLEVBQUxBLEtBQUs7SUFDTFcsS0FBSyxFQUFFVixRQUFRLENBQUNXLEdBQUcsQ0FBQyxVQUFDQyxDQUFDLEVBQUVDLENBQUM7TUFBQSx1Q0FDcEJELENBQUM7UUFDSkUsYUFBYSxFQUFFbEIsZ0NBQWdDLENBQUNnQixDQUFDLENBQUM7UUFDbERHLFVBQVUsRUFBRXBCLGVBQWUsQ0FBQ2lCLENBQUMsQ0FBQ0ksVUFBVSxFQUFFSCxDQUFDLEVBQUViLFFBQVE7TUFBQztJQUFBLENBQ3RELENBQUM7SUFDSEYsT0FBTyxFQUFFQSxPQUFPLENBQUNtQixNQUFNLENBQUMsVUFBQ0MsRUFBRSxFQUFFQyxDQUFDO01BQUEsdUNBQVdELEVBQUUsMkJBQUdDLENBQUMsQ0FBQ0MsRUFBRSxFQUFHRCxDQUFDO0lBQUEsQ0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlERSxjQUFjLEVBQUUsQ0FBQ3BCLGNBQWMsQ0FBQ3FCLE9BQU87SUFDdkNDLGNBQWMsRUFBRTtNQUNkQyxPQUFPLEVBQUVyQixRQUFRLENBQUNzQixPQUFPLENBQUNDLElBQUk7TUFDOUJDLElBQUksRUFBRSxTQUFTO01BQ2ZDLElBQUksRUFBRTtJQUNSLENBQUM7SUFDRDFCLFVBQVUsRUFBVkEsVUFBVTtJQUNWMkIscUJBQXFCLEVBQUU3QixRQUFRLENBQUM4QixNQUFNLEdBQUcsQ0FBQztJQUMxQ0MsMEJBQTBCO01BQ3hCQyxTQUFTLEVBQUU7SUFBZ0MsR0FDeEMzQiw4QkFBOEI7TUFDakM0QixPQUFPLEVBQUUsS0FBSztNQUNkTixJQUFJLEVBQUVsQixXQUFXLENBQUN5QixVQUFVLEtBQUssU0FBUyxHQUFHLE9BQU8sR0FBRyxNQUFNO01BQzdEQyxhQUFhLEVBQUUxQixXQUFXLENBQUN5QixVQUFVLEtBQUssUUFBUSxHQUFHRSxJQUFJLENBQUNDLE1BQU0sRUFBRSxDQUFDQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUU7SUFBQSxFQUN2Rjs7SUFDREMsU0FBUyxrQ0FDSm5DLGtCQUFrQjtNQUNyQjZCLE9BQU8sRUFBRSxLQUFLO01BQ2RELFNBQVMsRUFBRSwwQkFBMEI7TUFDckNMLElBQUksRUFBRWxCLFdBQVcsQ0FBQ3lCLFVBQVUsS0FBSyxTQUFTLEdBQUcsT0FBTyxHQUFHLE1BQU07TUFDN0RDLGFBQWEsRUFBRTFCLFdBQVcsQ0FBQ3lCLFVBQVUsS0FBSyxRQUFRLEdBQUdFLElBQUksQ0FBQ0MsTUFBTSxFQUFFLENBQUNDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBRTtJQUFBLEVBQ3ZGOztJQUNERSxtQkFBbUIsRUFBRTtNQUNuQnpDLEtBQUssRUFBRVMscUJBQXFCLENBQUNULEtBQUssQ0FBQzJCLElBQUk7TUFDdkNlLFFBQVEsRUFBRWpDLHFCQUFxQixDQUFDaUMsUUFBUSxDQUFDZjtJQUMzQyxDQUFDO0lBQ0RnQixhQUFhLEVBQUU7TUFDYjNDLEtBQUssRUFBRU8sZUFBZSxDQUFDUCxLQUFLLENBQUMyQjtJQUMvQixDQUFDO0lBQ0RqQixXQUFXLEVBQVhBLFdBQVc7SUFDWEYsWUFBWSxFQUFaQTtFQUNGLENBQUM7QUFBQSxDQUFDO0FBQ0ZvQyxNQUFNLENBQUNDLE9BQU8sR0FBRy9DLE1BQU0iLCJmaWxlIjoiNjgwNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgc2hvdWxkU2hvd01vbnRoIH0gPSByZXF1aXJlKCcuLi8uLi8uLi9saWIvc2hvdy1tb250aC1oZWxwZXInKTtcbmNvbnN0IHsgbWFwcGVySXRlbVBvbHljYXJkQnlJZEZvclJlbW92YWwgfSA9IHJlcXVpcmUoJy4vZm9ybWF0ZXItaGVscGVyJyk7XG5cbmNvbnN0IG1hcHBlciA9ICh7XG4gIGFjdGlvbnMsXG4gIHRpdGxlLFxuICBlbGVtZW50cyxcbiAgcHJpdmFjeV9jb25maWcsXG4gIGxncGRfYWRtaW4sXG4gIHNuYWNrYmFyLFxuICBsZ3BkX2NvbmZpcm1fbW9kYWwsXG4gIHJlbW92ZV9hbGxfaXRlbXNfY29uZmlybV9tb2RhbCxcbiAgbGdwZF9lbXB0eV9saXN0LFxuICBsZ3BkX21lc3NhZ2UsXG4gIG5hdmlnYXRpb25fZW1wdHlfbGlzdCxcbiAgc3RhdGljUHJvcHMsXG59KSA9PiAoe1xuICB0aXRsZSxcbiAgaXRlbXM6IGVsZW1lbnRzLm1hcCgobSwgaSkgPT4gKHtcbiAgICAuLi5tLFxuICAgIGl0ZW1fcG9seWNhcmQ6IG1hcHBlckl0ZW1Qb2x5Y2FyZEJ5SWRGb3JSZW1vdmFsKG0pLFxuICAgIHNob3dfbW9udGg6IHNob3VsZFNob3dNb250aChtLm1vbnRoX25hbWUsIGksIGVsZW1lbnRzKSxcbiAgfSkpLFxuICBhY3Rpb25zOiBhY3Rpb25zLnJlZHVjZSgoYWMsIGMpID0+ICh7IC4uLmFjLCBbYy5pZF06IGMgfSksIHt9KSxcbiAgaGlzdG9yeUVuYWJsZWQ6ICFwcml2YWN5X2NvbmZpZy5ibG9ja2VkLFxuICBzbmFja2JhckNvbmZpZzoge1xuICAgIG1lc3NhZ2U6IHNuYWNrYmFyLnN1Y2Nlc3MudGV4dCxcbiAgICB0eXBlOiAnZGVmYXVsdCcsXG4gICAgc2hvdzogZmFsc2UsXG4gIH0sXG4gIGxncGRfYWRtaW4sXG4gIHJlbW92ZUFsbEl0ZW1zRW5hYmxlZDogZWxlbWVudHMubGVuZ3RoID4gMCxcbiAgcmVtb3ZlQWxsSXRlbXNDb25maXJtTW9kYWw6IHtcbiAgICBjbGFzc05hbWU6ICd1aS1uYXZpZ2F0aW9uLXJlbW92ZS1hbGwtbW9kYWwnLFxuICAgIC4uLnJlbW92ZV9hbGxfaXRlbXNfY29uZmlybV9tb2RhbCxcbiAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICB0eXBlOiBzdGF0aWNQcm9wcy5kZXZpY2VUeXBlID09PSAnZGVza3RvcCcgPyAnbG9vc2UnIDogJ2Z1bGwnLFxuICAgIGZvcmNlUmVyZW5kZXI6IHN0YXRpY1Byb3BzLmRldmljZVR5cGUgPT09ICdtb2JpbGUnID8gTWF0aC5yYW5kb20oKS50b1N0cmluZygpIDogbnVsbCwgLy8gQFRPRE86IEFOREVTIE1PREFMIEhBUyBBIEJVRyBJTiBNT0JJTEUgU08gV0UgRk9SQ0UgUkVSRU5ERVJcbiAgfSxcbiAgbGdwZE1vZGFsOiB7XG4gICAgLi4ubGdwZF9jb25maXJtX21vZGFsLFxuICAgIHZpc2libGU6IGZhbHNlLFxuICAgIGNsYXNzTmFtZTogJ3VpLW5hdmlnYXRpb24tbGdwZC1tb2RhbCcsXG4gICAgdHlwZTogc3RhdGljUHJvcHMuZGV2aWNlVHlwZSA9PT0gJ2Rlc2t0b3AnID8gJ2xvb3NlJyA6ICdmdWxsJyxcbiAgICBmb3JjZVJlcmVuZGVyOiBzdGF0aWNQcm9wcy5kZXZpY2VUeXBlID09PSAnbW9iaWxlJyA/IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKSA6IG51bGwsIC8vIEBUT0RPOiBBTkRFUyBNT0RBTCBIQVMgQSBCVUcgSU4gTU9CSUxFIFNPIFdFIEZPUkNFIFJFUkVOREVSXG4gIH0sXG4gIG5hdmlnYXRpb25FbXB0eUxpc3Q6IHtcbiAgICB0aXRsZTogbmF2aWdhdGlvbl9lbXB0eV9saXN0LnRpdGxlLnRleHQsXG4gICAgc3VidGl0bGU6IG5hdmlnYXRpb25fZW1wdHlfbGlzdC5zdWJ0aXRsZS50ZXh0LFxuICB9LFxuICBsZ3BkRW1wdHlMaXN0OiB7XG4gICAgdGl0bGU6IGxncGRfZW1wdHlfbGlzdC50aXRsZS50ZXh0LFxuICB9LFxuICBzdGF0aWNQcm9wcyxcbiAgbGdwZF9tZXNzYWdlLFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IG1hcHBlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6807\n")},7402:function(module,__unused_webpack_exports,__webpack_require__){eval("var _defineProperty = __webpack_require__(9713);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/* eslint-disable no-unused-expressions */\nvar Service = __webpack_require__(7863);\nvar executeNative = __webpack_require__(8117);\nvar _require = __webpack_require__(6976),\n  trackEvent = _require.trackEvent,\n  trackEventWithCustomField = _require.trackEventWithCustomField;\nvar _require2 = __webpack_require__(9106),\n  HISTORY_CONFIG_SWITCH = _require2.HISTORY_CONFIG_SWITCH,\n  REMOVE_MODAL_TOGGLE = _require2.REMOVE_MODAL_TOGGLE,\n  REMOVE_ALL_ITEMS = _require2.REMOVE_ALL_ITEMS,\n  REMOVE_ITEM = _require2.REMOVE_ITEM,\n  UNBOOKMARK_CLICK = _require2.UNBOOKMARK_CLICK,\n  BOOKMARK_CLICK = _require2.BOOKMARK_CLICK,\n  SNACKBAR_INFO = _require2.SNACKBAR_INFO;\nvar addBookmark = function addBookmark(itemId, item) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n      actions = _getState.actions;\n    actions.bookmark && trackEventWithCustomField('item_id', actions.bookmark.track, itemId);\n    return Service.addBookmark(itemId).then(function () {\n      return dispatch({\n        type: BOOKMARK_CLICK,\n        payload: {\n          item: item\n        }\n      });\n    });\n  };\n};\nvar removeBookmark = function removeBookmark(itemId, item) {\n  return function (dispatch, getState) {\n    var _getState2 = getState(),\n      actions = _getState2.actions;\n    actions.unbookmark && trackEventWithCustomField('item_id', actions.unbookmark.track, itemId);\n    return Service.removeBookmark(itemId).then(function () {\n      return dispatch({\n        type: UNBOOKMARK_CLICK,\n        payload: {\n          item: item\n        }\n      });\n    });\n  };\n};\nvar removeItem = function removeItem(itemId, item) {\n  return function (dispatch, getState) {\n    var _getState3 = getState(),\n      actions = _getState3.actions;\n    actions.remove_item && trackEventWithCustomField('item_id', actions.remove_item.track, itemId);\n    return Service.removeItem(itemId).then(function (_ref) {\n      var data = _ref.data;\n      var _data$snackbar = data.snackbar,\n        snackbar = _data$snackbar === void 0 ? {} : _data$snackbar;\n      dispatch({\n        type: REMOVE_ITEM,\n        payload: {\n          item: item,\n          snackbarConfig: _objectSpread(_objectSpread({}, snackbar), {}, {\n            message: snackbar.text,\n            show: true\n          })\n        }\n      });\n      // eslint-disable-next-line no-use-before-define\n      // dispatch(snackbarInfo({ ...snackbar, message: snackbar.text, show: true }));\n    });\n  };\n};\n\nvar historyConfigSwitch = function historyConfigSwitch(show, historyEnabled, showSnackbarInfo, defaultTextModal) {\n  return {\n    type: HISTORY_CONFIG_SWITCH,\n    payload: {\n      show: show,\n      historyEnabled: historyEnabled,\n      showSnackbarInfo: showSnackbarInfo,\n      defaultTextModal: defaultTextModal\n    }\n  };\n};\nvar historyConfigToggleSwitch = function historyConfigToggleSwitch(enabled) {\n  return function (dispatch, getState) {\n    var _staticProps$defaultT, _staticProps$defaultT2;\n    var _getState4 = getState(),\n      actions = _getState4.actions,\n      staticProps = _getState4.staticProps;\n    if (!enabled) return dispatch(historyConfigSwitch(true, false, false, staticProps === null || staticProps === void 0 ? void 0 : (_staticProps$defaultT = staticProps.defaultTextModal) === null || _staticProps$defaultT === void 0 ? void 0 : (_staticProps$defaultT2 = _staticProps$defaultT.success) === null || _staticProps$defaultT2 === void 0 ? void 0 : _staticProps$defaultT2.text));\n    trackEvent(actions.history_config_toggle_on.track);\n    return Service.historyConfig(!enabled).then(function () {\n      var _staticProps$defaultT3, _staticProps$defaultT4;\n      dispatch(historyConfigSwitch(false, true, true, staticProps === null || staticProps === void 0 ? void 0 : (_staticProps$defaultT3 = staticProps.defaultTextModal) === null || _staticProps$defaultT3 === void 0 ? void 0 : (_staticProps$defaultT4 = _staticProps$defaultT3.success) === null || _staticProps$defaultT4 === void 0 ? void 0 : _staticProps$defaultT4.text));\n      if (staticProps.webView) {\n        executeNative('privacy_config', {});\n      }\n    });\n  };\n};\nvar historyConfigModalResult = function historyConfigModalResult(result) {\n  return function (dispatch, getState) {\n    var _staticProps$defaultT7, _staticProps$defaultT8;\n    var _getState5 = getState(),\n      actions = _getState5.actions,\n      staticProps = _getState5.staticProps;\n    if (result) {\n      trackEvent(actions.history_config_toggle_off.track);\n      return Service.historyConfig(result).then(function () {\n        var _staticProps$defaultT5, _staticProps$defaultT6;\n        dispatch(historyConfigSwitch(false, false, true, staticProps === null || staticProps === void 0 ? void 0 : (_staticProps$defaultT5 = staticProps.defaultTextModal) === null || _staticProps$defaultT5 === void 0 ? void 0 : (_staticProps$defaultT6 = _staticProps$defaultT5.success) === null || _staticProps$defaultT6 === void 0 ? void 0 : _staticProps$defaultT6.text));\n        if (staticProps.webView) {\n          executeNative('privacy_config', {});\n        }\n      });\n    }\n    return dispatch(historyConfigSwitch(false, true, false, staticProps === null || staticProps === void 0 ? void 0 : (_staticProps$defaultT7 = staticProps.defaultTextModal) === null || _staticProps$defaultT7 === void 0 ? void 0 : (_staticProps$defaultT8 = _staticProps$defaultT7.success) === null || _staticProps$defaultT8 === void 0 ? void 0 : _staticProps$defaultT8.text));\n  };\n};\nvar removeToggleModal = function removeToggleModal(show) {\n  return {\n    type: REMOVE_MODAL_TOGGLE,\n    payload: {\n      show: show\n    }\n  };\n};\nvar removeAllItemModalResult = function removeAllItemModalResult(result) {\n  return function (dispatch, getState) {\n    var _getState6 = getState(),\n      actions = _getState6.actions,\n      staticProps = _getState6.staticProps;\n    if (result) {\n      trackEvent(actions.remove_all_items.track);\n      return Service.removeAllItems().then(function (_ref2) {\n        var data = _ref2.data;\n        var _data$snackbar2 = data.snackbar,\n          snackbar = _data$snackbar2 === void 0 ? {} : _data$snackbar2;\n        if (staticProps.webView) {\n          executeNative('history_remove_all', {});\n        }\n        dispatch({\n          type: REMOVE_ALL_ITEMS,\n          payload: {\n            snackbarConfig: _objectSpread(_objectSpread({}, snackbar), {}, {\n              message: snackbar.text,\n              show: true\n            })\n          }\n        });\n      })[\"catch\"](function () {\n        return dispatch(removeToggleModal(false));\n      });\n    }\n    return dispatch(removeToggleModal(false));\n  };\n};\nvar snackbarInfo = function snackbarInfo(payload) {\n  return {\n    type: SNACKBAR_INFO,\n    payload: payload\n  };\n};\nmodule.exports = {\n  addBookmark: addBookmark,\n  removeBookmark: removeBookmark,\n  removeItem: removeItem,\n  removeToggleModal: removeToggleModal,\n  removeAllItemModalResult: removeAllItemModalResult,\n  historyConfigToggleSwitch: historyConfigToggleSwitch,\n  historyConfigModalResult: historyConfigModalResult,\n  snackbarInfo: snackbarInfo,\n  historyConfigSwitch: historyConfigSwitch\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7402\n")},9580:function(module,__unused_webpack_exports,__webpack_require__){eval("var _defineProperty = __webpack_require__(9713);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar _require = __webpack_require__(9106),\n  BOOKMARK_CLICK = _require.BOOKMARK_CLICK,\n  UNBOOKMARK_CLICK = _require.UNBOOKMARK_CLICK,\n  REMOVE_ITEM = _require.REMOVE_ITEM,\n  REMOVE_ALL_ITEMS = _require.REMOVE_ALL_ITEMS,\n  ADMIN = _require.ADMIN,\n  ADMIN_BACK = _require.ADMIN_BACK,\n  REMOVE_MODAL_TOGGLE = _require.REMOVE_MODAL_TOGGLE,\n  HISTORY_CONFIG_SWITCH = _require.HISTORY_CONFIG_SWITCH,\n  SNACKBAR_INFO = _require.SNACKBAR_INFO;\nvar reducerNavigation = function reducerNavigation(state, action) {\n  switch (action.type) {\n    case BOOKMARK_CLICK:\n      {\n        var item = action.payload.item;\n        var _state$items$find = state.items.find(function (_ref) {\n            var it = _ref.item_polycard;\n            return it === item;\n          }),\n          item_polycard = _state$items$find.item_polycard;\n        item_polycard.bookmark.bookmarked = true;\n        return _objectSpread({}, state);\n      }\n    case UNBOOKMARK_CLICK:\n      {\n        var _item = action.payload.item;\n        var _state$items$find2 = state.items.find(function (_ref2) {\n            var it = _ref2.item_polycard;\n            return it === _item;\n          }),\n          _item_polycard = _state$items$find2.item_polycard;\n        _item_polycard.bookmark.bookmarked = false;\n        return _objectSpread({}, state);\n      }\n    case REMOVE_ITEM:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: state.items.filter(function (_ref3) {\n          var it = _ref3.item_polycard;\n          return it !== action.payload.item;\n        }),\n        snackbarConfig: action.payload.snackbarConfig\n      });\n    case REMOVE_ALL_ITEMS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: [],\n        removeAllItemsConfirmModal: {\n          visible: false\n        },\n        removeAllItemsEnabled: false\n      }, action.payload);\n    case ADMIN:\n      return _objectSpread({}, state);\n    case ADMIN_BACK:\n      return _objectSpread({}, state);\n    case HISTORY_CONFIG_SWITCH:\n      state.lgpdModal.visible = action.payload.show;\n      state.snackbarConfig.show = action.payload.showSnackbarInfo;\n      state.snackbarConfig.message = action.payload.defaultTextModal;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        historyEnabled: action.payload.historyEnabled\n      });\n    case REMOVE_MODAL_TOGGLE:\n      state.removeAllItemsConfirmModal.visible = action.payload.show;\n      return _objectSpread({}, state);\n    case SNACKBAR_INFO:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        snackbarConfig: action.payload\n      });\n    default:\n      return _objectSpread({}, state);\n  }\n};\nmodule.exports = reducerNavigation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL3N0YXRlL25hdmlnYXRpb24tcmVkdWNlci5qcz9hYWE5Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJCT09LTUFSS19DTElDSyIsIlVOQk9PS01BUktfQ0xJQ0siLCJSRU1PVkVfSVRFTSIsIlJFTU9WRV9BTExfSVRFTVMiLCJBRE1JTiIsIkFETUlOX0JBQ0siLCJSRU1PVkVfTU9EQUxfVE9HR0xFIiwiSElTVE9SWV9DT05GSUdfU1dJVENIIiwiU05BQ0tCQVJfSU5GTyIsInJlZHVjZXJOYXZpZ2F0aW9uIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiaXRlbSIsInBheWxvYWQiLCJpdGVtcyIsImZpbmQiLCJpdCIsIml0ZW1fcG9seWNhcmQiLCJib29rbWFyayIsImJvb2ttYXJrZWQiLCJmaWx0ZXIiLCJzbmFja2JhckNvbmZpZyIsInJlbW92ZUFsbEl0ZW1zQ29uZmlybU1vZGFsIiwidmlzaWJsZSIsInJlbW92ZUFsbEl0ZW1zRW5hYmxlZCIsImxncGRNb2RhbCIsInNob3ciLCJzaG93U25hY2tiYXJJbmZvIiwibWVzc2FnZSIsImRlZmF1bHRUZXh0TW9kYWwiLCJoaXN0b3J5RW5hYmxlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7OztBQUFBLGVBVUlBLG1CQUFPLENBQUMsSUFBZ0IsQ0FBQztFQVQzQkMsY0FBYyxZQUFkQSxjQUFjO0VBQ2RDLGdCQUFnQixZQUFoQkEsZ0JBQWdCO0VBQ2hCQyxXQUFXLFlBQVhBLFdBQVc7RUFDWEMsZ0JBQWdCLFlBQWhCQSxnQkFBZ0I7RUFDaEJDLEtBQUssWUFBTEEsS0FBSztFQUNMQyxVQUFVLFlBQVZBLFVBQVU7RUFDVkMsbUJBQW1CLFlBQW5CQSxtQkFBbUI7RUFDbkJDLHFCQUFxQixZQUFyQkEscUJBQXFCO0VBQ3JCQyxhQUFhLFlBQWJBLGFBQWE7QUFHZixJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQWlCLENBQUlDLEtBQUssRUFBRUMsTUFBTSxFQUFLO0VBQzNDLFFBQVFBLE1BQU0sQ0FBQ0MsSUFBSTtJQUNqQixLQUFLWixjQUFjO01BQUU7UUFDbkIsSUFBUWEsSUFBSSxHQUFLRixNQUFNLENBQUNHLE9BQU8sQ0FBdkJELElBQUk7UUFDWix3QkFBMEJILEtBQUssQ0FBQ0ssS0FBSyxDQUFDQyxJQUFJLENBQUM7WUFBQSxJQUFrQkMsRUFBRSxRQUFqQkMsYUFBYTtZQUFBLE9BQVdELEVBQUUsS0FBS0osSUFBSTtVQUFBLEVBQUM7VUFBMUVLLGFBQWEscUJBQWJBLGFBQWE7UUFDckJBLGFBQWEsQ0FBQ0MsUUFBUSxDQUFDQyxVQUFVLEdBQUcsSUFBSTtRQUN4Qyx5QkFDS1YsS0FBSztNQUVaO0lBQ0EsS0FBS1QsZ0JBQWdCO01BQUU7UUFDckIsSUFBUVksS0FBSSxHQUFLRixNQUFNLENBQUNHLE9BQU8sQ0FBdkJELElBQUk7UUFDWix5QkFBMEJILEtBQUssQ0FBQ0ssS0FBSyxDQUFDQyxJQUFJLENBQUM7WUFBQSxJQUFrQkMsRUFBRSxTQUFqQkMsYUFBYTtZQUFBLE9BQVdELEVBQUUsS0FBS0osS0FBSTtVQUFBLEVBQUM7VUFBMUVLLGNBQWEsc0JBQWJBLGFBQWE7UUFDckJBLGNBQWEsQ0FBQ0MsUUFBUSxDQUFDQyxVQUFVLEdBQUcsS0FBSztRQUN6Qyx5QkFDS1YsS0FBSztNQUVaO0lBQ0EsS0FBS1IsV0FBVztNQUNkLHVDQUNLUSxLQUFLO1FBQ1JLLEtBQUssRUFBRUwsS0FBSyxDQUFDSyxLQUFLLENBQUNNLE1BQU0sQ0FBQztVQUFBLElBQWtCSixFQUFFLFNBQWpCQyxhQUFhO1VBQUEsT0FBV0QsRUFBRSxLQUFLTixNQUFNLENBQUNHLE9BQU8sQ0FBQ0QsSUFBSTtRQUFBLEVBQUM7UUFDaEZTLGNBQWMsRUFBRVgsTUFBTSxDQUFDRyxPQUFPLENBQUNRO01BQWM7SUFHakQsS0FBS25CLGdCQUFnQjtNQUNuQix1Q0FDS08sS0FBSztRQUNSSyxLQUFLLEVBQUUsRUFBRTtRQUNUUSwwQkFBMEIsRUFBRTtVQUFFQyxPQUFPLEVBQUU7UUFBTSxDQUFDO1FBQzlDQyxxQkFBcUIsRUFBRTtNQUFLLEdBQ3pCZCxNQUFNLENBQUNHLE9BQU87SUFFckIsS0FBS1YsS0FBSztNQUNSLHlCQUFZTSxLQUFLO0lBQ25CLEtBQUtMLFVBQVU7TUFDYix5QkFBWUssS0FBSztJQUNuQixLQUFLSCxxQkFBcUI7TUFDeEJHLEtBQUssQ0FBQ2dCLFNBQVMsQ0FBQ0YsT0FBTyxHQUFHYixNQUFNLENBQUNHLE9BQU8sQ0FBQ2EsSUFBSTtNQUM3Q2pCLEtBQUssQ0FBQ1ksY0FBYyxDQUFDSyxJQUFJLEdBQUdoQixNQUFNLENBQUNHLE9BQU8sQ0FBQ2MsZ0JBQWdCO01BQzNEbEIsS0FBSyxDQUFDWSxjQUFjLENBQUNPLE9BQU8sR0FBR2xCLE1BQU0sQ0FBQ0csT0FBTyxDQUFDZ0IsZ0JBQWdCO01BQzlELHVDQUNLcEIsS0FBSztRQUNScUIsY0FBYyxFQUFFcEIsTUFBTSxDQUFDRyxPQUFPLENBQUNpQjtNQUFjO0lBRWpELEtBQUt6QixtQkFBbUI7TUFDdEJJLEtBQUssQ0FBQ2EsMEJBQTBCLENBQUNDLE9BQU8sR0FBR2IsTUFBTSxDQUFDRyxPQUFPLENBQUNhLElBQUk7TUFDOUQseUJBQ0tqQixLQUFLO0lBRVosS0FBS0YsYUFBYTtNQUNoQix1Q0FDS0UsS0FBSztRQUNSWSxjQUFjLEVBQUVYLE1BQU0sQ0FBQ0c7TUFBTztJQUVsQztNQUNFLHlCQUFZSixLQUFLO0VBQUc7QUFFMUIsQ0FBQztBQUNEc0IsTUFBTSxDQUFDQyxPQUFPLEdBQUd4QixpQkFBaUIiLCJmaWxlIjoiOTU4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtcbiAgQk9PS01BUktfQ0xJQ0ssXG4gIFVOQk9PS01BUktfQ0xJQ0ssXG4gIFJFTU9WRV9JVEVNLFxuICBSRU1PVkVfQUxMX0lURU1TLFxuICBBRE1JTixcbiAgQURNSU5fQkFDSyxcbiAgUkVNT1ZFX01PREFMX1RPR0dMRSxcbiAgSElTVE9SWV9DT05GSUdfU1dJVENILFxuICBTTkFDS0JBUl9JTkZPLFxufSA9IHJlcXVpcmUoJy4vYWN0aW9ucy10eXBlJyk7XG5cbmNvbnN0IHJlZHVjZXJOYXZpZ2F0aW9uID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQk9PS01BUktfQ0xJQ0s6IHtcbiAgICAgIGNvbnN0IHsgaXRlbSB9ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICBjb25zdCB7IGl0ZW1fcG9seWNhcmQgfSA9IHN0YXRlLml0ZW1zLmZpbmQoKHsgaXRlbV9wb2x5Y2FyZDogaXQgfSkgPT4gaXQgPT09IGl0ZW0pO1xuICAgICAgaXRlbV9wb2x5Y2FyZC5ib29rbWFyay5ib29rbWFya2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBVTkJPT0tNQVJLX0NMSUNLOiB7XG4gICAgICBjb25zdCB7IGl0ZW0gfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgeyBpdGVtX3BvbHljYXJkIH0gPSBzdGF0ZS5pdGVtcy5maW5kKCh7IGl0ZW1fcG9seWNhcmQ6IGl0IH0pID0+IGl0ID09PSBpdGVtKTtcbiAgICAgIGl0ZW1fcG9seWNhcmQuYm9va21hcmsuYm9va21hcmtlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIFJFTU9WRV9JVEVNOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGl0ZW1zOiBzdGF0ZS5pdGVtcy5maWx0ZXIoKHsgaXRlbV9wb2x5Y2FyZDogaXQgfSkgPT4gaXQgIT09IGFjdGlvbi5wYXlsb2FkLml0ZW0pLFxuICAgICAgICBzbmFja2JhckNvbmZpZzogYWN0aW9uLnBheWxvYWQuc25hY2tiYXJDb25maWcsXG4gICAgICB9O1xuXG4gICAgY2FzZSBSRU1PVkVfQUxMX0lURU1TOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgcmVtb3ZlQWxsSXRlbXNDb25maXJtTW9kYWw6IHsgdmlzaWJsZTogZmFsc2UgfSxcbiAgICAgICAgcmVtb3ZlQWxsSXRlbXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQsXG4gICAgICB9O1xuICAgIGNhc2UgQURNSU46XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSB9O1xuICAgIGNhc2UgQURNSU5fQkFDSzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlIH07XG4gICAgY2FzZSBISVNUT1JZX0NPTkZJR19TV0lUQ0g6XG4gICAgICBzdGF0ZS5sZ3BkTW9kYWwudmlzaWJsZSA9IGFjdGlvbi5wYXlsb2FkLnNob3c7XG4gICAgICBzdGF0ZS5zbmFja2JhckNvbmZpZy5zaG93ID0gYWN0aW9uLnBheWxvYWQuc2hvd1NuYWNrYmFySW5mbztcbiAgICAgIHN0YXRlLnNuYWNrYmFyQ29uZmlnLm1lc3NhZ2UgPSBhY3Rpb24ucGF5bG9hZC5kZWZhdWx0VGV4dE1vZGFsO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGhpc3RvcnlFbmFibGVkOiBhY3Rpb24ucGF5bG9hZC5oaXN0b3J5RW5hYmxlZCxcbiAgICAgIH07XG4gICAgY2FzZSBSRU1PVkVfTU9EQUxfVE9HR0xFOlxuICAgICAgc3RhdGUucmVtb3ZlQWxsSXRlbXNDb25maXJtTW9kYWwudmlzaWJsZSA9IGFjdGlvbi5wYXlsb2FkLnNob3c7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgIH07XG4gICAgY2FzZSBTTkFDS0JBUl9JTkZPOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNuYWNrYmFyQ29uZmlnOiBhY3Rpb24ucGF5bG9hZCxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlIH07XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IHJlZHVjZXJOYXZpZ2F0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9580\n")},2715:function(module,__unused_webpack_exports,__webpack_require__){eval('var _jsx = __webpack_require__(8135);\n/**\n * Module dependencies\n */\nvar React = __webpack_require__(7294);\nvar MeliGA = __webpack_require__(642);\nvar MelidataTrack = __webpack_require__(6577);\nvar serialize = __webpack_require__(8254);\nvar GlobalErrorBoundary = __webpack_require__(6122);\nvar namespace = \'ui-navigation\';\n\n/**\n * NavigationMainView\n */\n\nvar NavigationMainView = function NavigationMainView(_ref) {\n  var initialState = _ref.initialState,\n    children = _ref.children,\n    staticProps = _ref.staticProps;\n  var track = initialState.track,\n    title = initialState.title;\n  return /*#__PURE__*/_jsx(GlobalErrorBoundary, {\n    errorMessage: staticProps.errorMessage\n  }, void 0, /*#__PURE__*/_jsx("div", {\n    className: namespace\n  }, void 0, /*#__PURE__*/_jsx(MeliGA, {\n    siteId: staticProps.siteId,\n    platform: staticProps.platform.id,\n    section: track.analytics_event.section,\n    page: track.analytics_event.page\n  }), /*#__PURE__*/_jsx(MelidataTrack, {\n    path: track.melidata_event.path,\n    type: "view",\n    experiments: {\n      \'home/viewNavigationMigration\': 5367\n    }\n  }), null, null, null, staticProps.isLegacyBrowser ? null : null, staticProps.isIE ? null : null, null, null, /*#__PURE__*/_jsx("div", {\n    className: "".concat(namespace, "__container")\n  }, void 0, children)));\n};\nmodule.exports = NavigationMainView;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL3ZpZXdzL25hdmlnYXRpb24vbmF2aWdhdGlvbi1tYWluLXZpZXcuanM/MmI5ZiJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJNZWxpR0EiLCJNZWxpZGF0YVRyYWNrIiwic2VyaWFsaXplIiwiR2xvYmFsRXJyb3JCb3VuZGFyeSIsIm5hbWVzcGFjZSIsIk5hdmlnYXRpb25NYWluVmlldyIsImluaXRpYWxTdGF0ZSIsImNoaWxkcmVuIiwic3RhdGljUHJvcHMiLCJ0cmFjayIsInRpdGxlIiwiZXJyb3JNZXNzYWdlIiwic2l0ZUlkIiwicGxhdGZvcm0iLCJpZCIsImFuYWx5dGljc19ldmVudCIsInNlY3Rpb24iLCJwYWdlIiwibWVsaWRhdGFfZXZlbnQiLCJwYXRoIiwiaXNMZWdhY3lCcm93c2VyIiwiaXNJRSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsSUFBTyxDQUFDO0FBRzlCLElBQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyxHQUEwQixDQUFDO0FBQ2xELElBQU1FLGFBQWEsR0FBR0YsbUJBQU8sQ0FBQyxJQUFnQyxDQUFDO0FBRy9ELElBQU1HLFNBQVMsR0FBR0gsbUJBQU8sQ0FBQyxJQUFzQixDQUFDO0FBQ2pELElBQU1JLG1CQUFtQixHQUFHSixtQkFBTyxDQUFDLElBQXFDLENBQUM7QUFFMUUsSUFBTUssU0FBUyxHQUFHLGVBQWU7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQWtCLE9BQWdEO0VBQUEsSUFBMUNDLFlBQVksUUFBWkEsWUFBWTtJQUFFQyxRQUFRLFFBQVJBLFFBQVE7SUFBRUMsV0FBVyxRQUFYQSxXQUFXO0VBQy9ELElBQVFDLEtBQUssR0FBWUgsWUFBWSxDQUE3QkcsS0FBSztJQUFFQyxLQUFLLEdBQUtKLFlBQVksQ0FBdEJJLEtBQUs7RUFDcEIsb0JBQ0UsS0FBQyxtQkFBbUI7SUFBQyxZQUFZLEVBQUVGLFdBQVcsQ0FBQ0c7RUFBYSx3QkFDMUQ7SUFBSyxTQUFTLEVBQUVQO0VBQVUsd0JBQ3hCLEtBQUMsTUFBTTtJQUNMLE1BQU0sRUFBRUksV0FBVyxDQUFDSSxNQUFPO0lBQzNCLFFBQVEsRUFBRUosV0FBVyxDQUFDSyxRQUFRLENBQUNDLEVBQUc7SUFDbEMsT0FBTyxFQUFFTCxLQUFLLENBQUNNLGVBQWUsQ0FBQ0MsT0FBUTtJQUN2QyxJQUFJLEVBQUVQLEtBQUssQ0FBQ00sZUFBZSxDQUFDRTtFQUFLLEVBQ2pDLGVBQ0YsS0FBQyxhQUFhO0lBQ1osSUFBSSxFQUFFUixLQUFLLENBQUNTLGNBQWMsQ0FBQ0MsSUFBSztJQUNoQyxJQUFJLEVBQUMsTUFBTTtJQUNYLFdBQVcsRUFBRTtNQUFFLDhCQUE4QixFQUFFO0lBQUs7RUFBRSxFQUN0RCxvQkFXRFgsV0FBVyxDQUFDWSxlQUFlLFVBQXVELElBQUksRUFDdEZaLFdBQVcsQ0FBQ2EsSUFBSSxVQUEyRCxJQUFJLDJCQUdoRjtJQUFLLFNBQVMsWUFBS2pCLFNBQVM7RUFBYyxXQUFFRyxRQUFRLENBQU8sQ0FDdkQsQ0FDYztBQUUxQixDQUFDO0FBUURlLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbEIsa0JBQWtCIiwiZmlsZSI6IjI3MTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuY29uc3QgSGVhZCA9IHJlcXVpcmUoJ3JlYWN0LWRlY2xhcmF0aXZlLWhlYWQnKTtcbmNvbnN0IE1lbGlHQSA9IHJlcXVpcmUoJ25vcmRpYy9hbmFseXRpY3MvbWVsaS1nYScpO1xuY29uc3QgTWVsaWRhdGFUcmFjayA9IHJlcXVpcmUoJ25vcmRpYy9tZWxpZGF0YS9tZWxpZGF0YS10cmFjaycpO1xuY29uc3QgU2NyaXB0ID0gcmVxdWlyZSgnbm9yZGljL3NjcmlwdCcpO1xuY29uc3QgU3R5bGUgPSByZXF1aXJlKCdub3JkaWMvc3R5bGUnKTtcbmNvbnN0IHNlcmlhbGl6ZSA9IHJlcXVpcmUoJ3NlcmlhbGl6ZS1qYXZhc2NyaXB0Jyk7XG5jb25zdCBHbG9iYWxFcnJvckJvdW5kYXJ5ID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9nbG9iYWwtZXJyb3InKTtcblxuY29uc3QgbmFtZXNwYWNlID0gJ3VpLW5hdmlnYXRpb24nO1xuXG4vKipcbiAqIE5hdmlnYXRpb25NYWluVmlld1xuICovXG5cbmNvbnN0IE5hdmlnYXRpb25NYWluVmlldyA9ICh7IGluaXRpYWxTdGF0ZSwgY2hpbGRyZW4sIHN0YXRpY1Byb3BzIH0pID0+IHtcbiAgY29uc3QgeyB0cmFjaywgdGl0bGUgfSA9IGluaXRpYWxTdGF0ZTtcbiAgcmV0dXJuIChcbiAgICA8R2xvYmFsRXJyb3JCb3VuZGFyeSBlcnJvck1lc3NhZ2U9e3N0YXRpY1Byb3BzLmVycm9yTWVzc2FnZX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17bmFtZXNwYWNlfT5cbiAgICAgICAgPE1lbGlHQVxuICAgICAgICAgIHNpdGVJZD17c3RhdGljUHJvcHMuc2l0ZUlkfVxuICAgICAgICAgIHBsYXRmb3JtPXtzdGF0aWNQcm9wcy5wbGF0Zm9ybS5pZH1cbiAgICAgICAgICBzZWN0aW9uPXt0cmFjay5hbmFseXRpY3NfZXZlbnQuc2VjdGlvbn1cbiAgICAgICAgICBwYWdlPXt0cmFjay5hbmFseXRpY3NfZXZlbnQucGFnZX1cbiAgICAgICAgLz5cbiAgICAgICAgPE1lbGlkYXRhVHJhY2tcbiAgICAgICAgICBwYXRoPXt0cmFjay5tZWxpZGF0YV9ldmVudC5wYXRofVxuICAgICAgICAgIHR5cGU9XCJ2aWV3XCJcbiAgICAgICAgICBleHBlcmltZW50cz17eyAnaG9tZS92aWV3TmF2aWdhdGlvbk1pZ3JhdGlvbic6IDUzNjcgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPEhlYWQ+XG4gICAgICAgICAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxuICAgICAgICAgIDxtZXRhIG5hbWU9XCJyb2JvdHNcIiBjb250ZW50PVwibm9pbmRleCxub2ZvbGxvd1wiIC8+XG4gICAgICAgIDwvSGVhZD5cbiAgICAgICAgPFN0eWxlIGhyZWY9e2BuYXZpZ2F0aW9uLiR7c3RhdGljUHJvcHMuZGV2aWNlVHlwZX0uY3NzYH0gLz5cbiAgICAgICAgPFNjcmlwdD5cbiAgICAgICAgICB7YFxuICAgICAgICAgIHdpbmRvdy5fX1BSRUxPQURFRF9TVEFURV9fID0gJHtzZXJpYWxpemUoeyBpbml0aWFsU3RhdGUsIHN0YXRpY1Byb3BzIH0sIHsgaXNKU09OOiB0cnVlIH0pfTtcbiAgICAgICAgYH1cbiAgICAgICAgPC9TY3JpcHQ+XG4gICAgICAgIHtzdGF0aWNQcm9wcy5pc0xlZ2FjeUJyb3dzZXIgPyA8U2NyaXB0IHNyYz1cInBvbHlmaWxsLmpzXCIgcHJpb3JpdHk9ezF9IHByZWxvYWQgLz4gOiBudWxsfVxuICAgICAgICB7c3RhdGljUHJvcHMuaXNJRSA/IDxTY3JpcHQgc3JjPVwicG9seWZpbGxzLWllLmpzXCIgcHJpb3JpdHk9ezF9IHByZWxvYWQgLz4gOiBudWxsfVxuICAgICAgICA8U2NyaXB0IHNyYz1cInZlbmRvci5qc1wiIC8+XG4gICAgICAgIDxTY3JpcHQgc3JjPXtgbmF2aWdhdGlvbi4ke3N0YXRpY1Byb3BzLmRldmljZVR5cGV9LmpzYH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake25hbWVzcGFjZX1fX2NvbnRhaW5lcmB9PntjaGlsZHJlbn08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvR2xvYmFsRXJyb3JCb3VuZGFyeT5cbiAgKTtcbn07XG5cbk5hdmlnYXRpb25NYWluVmlldy5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxTdGF0ZTogUHJvcFR5cGVzLm9iamVjdE9mKFByb3BUeXBlcy5hbnkpLmlzUmVxdWlyZWQsXG4gIHN0YXRpY1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0T2YoUHJvcFR5cGVzLmFueSkuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdmlnYXRpb25NYWluVmlldztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2715\n')},8381:function(module,__unused_webpack_exports,__webpack_require__){eval('var _jsx = __webpack_require__(8135);\nvar _defineProperty = __webpack_require__(9713);\nvar _objectWithoutProperties = __webpack_require__(6479);\nvar _excluded = ["initialState", "staticProps"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar React = __webpack_require__(7294);\nvar _require = __webpack_require__(5697),\n  shape = _require.shape,\n  bool = _require.bool;\nvar NavigationMainView = __webpack_require__(2715);\nvar NavigationListDesktop = __webpack_require__(7426);\nvar _require2 = __webpack_require__(3670),\n  StateProvider = _require2.StateProvider;\nvar reducerNavigation = __webpack_require__(9580);\nvar mapper = __webpack_require__(6807);\nvar NavigationViewDesktop = function NavigationViewDesktop(_ref) {\n  var initialState = _ref.initialState,\n    staticProps = _ref.staticProps,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(NavigationMainView, _objectSpread({\n    initialState: initialState,\n    staticProps: staticProps\n  }, props), /*#__PURE__*/_jsx(StateProvider, {\n    reducer: reducerNavigation,\n    initialState: mapper(_objectSpread(_objectSpread({}, initialState.data), {}, {\n      staticProps: staticProps\n    })),\n    errorMessage: staticProps.errorMessage\n  }, void 0, /*#__PURE__*/React.createElement(NavigationListDesktop, {\n    staticProps: staticProps\n  })));\n};\nmodule.exports = NavigationViewDesktop;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL3ZpZXdzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5kZXNrdG9wLmpzPzVlMzMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwic2hhcGUiLCJib29sIiwiTmF2aWdhdGlvbk1haW5WaWV3IiwiTmF2aWdhdGlvbkxpc3REZXNrdG9wIiwiU3RhdGVQcm92aWRlciIsInJlZHVjZXJOYXZpZ2F0aW9uIiwibWFwcGVyIiwiTmF2aWdhdGlvblZpZXdEZXNrdG9wIiwiaW5pdGlhbFN0YXRlIiwic3RhdGljUHJvcHMiLCJwcm9wcyIsImRhdGEiLCJlcnJvck1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsSUFBTyxDQUFDO0FBQzlCLGVBQXdCQSxtQkFBTyxDQUFDLElBQVksQ0FBQztFQUFyQ0MsS0FBSyxZQUFMQSxLQUFLO0VBQUVDLElBQUksWUFBSkEsSUFBSTtBQUNuQixJQUFNQyxrQkFBa0IsR0FBR0gsbUJBQU8sQ0FBQyxJQUF3QixDQUFDO0FBQzVELElBQU1JLHFCQUFxQixHQUFHSixtQkFBTyxDQUFDLElBQTBELENBQUM7QUFDakcsZ0JBQTBCQSxtQkFBTyxDQUFDLElBQW1CLENBQUM7RUFBOUNLLGFBQWEsYUFBYkEsYUFBYTtBQUNyQixJQUFNQyxpQkFBaUIsR0FBR04sbUJBQU8sQ0FBQyxJQUFnQyxDQUFDO0FBQ25FLElBQU1PLE1BQU0sR0FBR1AsbUJBQU8sQ0FBQyxJQUF3QixDQUFDO0FBRWhELElBQU1RLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBcUIsT0FBZ0Q7RUFBQSxJQUExQ0MsWUFBWSxRQUFaQSxZQUFZO0lBQUVDLFdBQVcsUUFBWEEsV0FBVztJQUFLQyxLQUFLO0VBQ2xFLG9CQUNFLG9CQUFDLGtCQUFrQjtJQUFPRixZQUFZLEVBQVpBLFlBQVk7SUFBRUMsV0FBVyxFQUFYQTtFQUFXLEdBQUtDLEtBQUssZ0JBQzNELEtBQUMsYUFBYTtJQUNaLE9BQU8sRUFBRUwsaUJBQWtCO0lBQzNCLFlBQVksRUFBRUMsTUFBTSxpQ0FBTUUsWUFBWSxDQUFDRyxJQUFJO01BQUVGLFdBQVcsRUFBWEE7SUFBVyxHQUFJO0lBQzVELFlBQVksRUFBRUEsV0FBVyxDQUFDRztFQUFhLHdCQUV2QyxvQkFBQyxxQkFBcUI7SUFBT0gsV0FBVyxFQUFYQTtFQUFXLEVBQU0sQ0FDaEMsQ0FDRztBQUV6QixDQUFDO0FBU0RJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHUCxxQkFBcUIiLCJmaWxlIjoiODM4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgc2hhcGUsIGJvb2wgfSA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbmNvbnN0IE5hdmlnYXRpb25NYWluVmlldyA9IHJlcXVpcmUoJy4vbmF2aWdhdGlvbi1tYWluLXZpZXcnKTtcbmNvbnN0IE5hdmlnYXRpb25MaXN0RGVza3RvcCA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvbmF2aWdhdGlvbi1saXN0L25hdmlnYXRpb24tbGlzdC5kZXNrdG9wJyk7XG5jb25zdCB7IFN0YXRlUHJvdmlkZXIgfSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3N0b3JlJyk7XG5jb25zdCByZWR1Y2VyTmF2aWdhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3N0YXRlL25hdmlnYXRpb24tcmVkdWNlcicpO1xuY29uc3QgbWFwcGVyID0gcmVxdWlyZSgnLi4vLi4vc3RhdGUvanNvbk1hcHBlcicpO1xuXG5jb25zdCBOYXZpZ2F0aW9uVmlld0Rlc2t0b3AgPSAoeyBpbml0aWFsU3RhdGUsIHN0YXRpY1Byb3BzLCAuLi5wcm9wcyB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPE5hdmlnYXRpb25NYWluVmlldyB7Li4ueyBpbml0aWFsU3RhdGUsIHN0YXRpY1Byb3BzLCAuLi5wcm9wcyB9fT5cbiAgICAgIDxTdGF0ZVByb3ZpZGVyXG4gICAgICAgIHJlZHVjZXI9e3JlZHVjZXJOYXZpZ2F0aW9ufVxuICAgICAgICBpbml0aWFsU3RhdGU9e21hcHBlcih7IC4uLmluaXRpYWxTdGF0ZS5kYXRhLCBzdGF0aWNQcm9wcyB9KX1cbiAgICAgICAgZXJyb3JNZXNzYWdlPXtzdGF0aWNQcm9wcy5lcnJvck1lc3NhZ2V9XG4gICAgICA+XG4gICAgICAgIDxOYXZpZ2F0aW9uTGlzdERlc2t0b3Agey4uLnsgc3RhdGljUHJvcHMgfX0gLz5cbiAgICAgIDwvU3RhdGVQcm92aWRlcj5cbiAgICA8L05hdmlnYXRpb25NYWluVmlldz5cbiAgKTtcbn07XG5cbk5hdmlnYXRpb25WaWV3RGVza3RvcC5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxTdGF0ZTogc2hhcGUoKS5pc1JlcXVpcmVkLFxuICBzdGF0aWNQcm9wczogc2hhcGUoe1xuICAgIGxvd0VuZDogYm9vbCxcbiAgfSkuaXNSZXF1aXJlZCxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvblZpZXdEZXNrdG9wO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8381\n')},9981:function(module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.default = ownerDocument;\n\nfunction ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}\n\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9vd25lckRvY3VtZW50LmpzP2EzOGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWU7O0FBRWY7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ijk5ODEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG93bmVyRG9jdW1lbnQ7XG5cbmZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9981\n')},1629:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _inDOM = _interopRequireDefault(__webpack_require__(139));\n\nvar _default = function () {\n  // HTML DOM and SVG DOM may have different support levels,\n  // so we need to check on context instead of a document root element.\n  return _inDOM.default ? function (context, node) {\n    if (context.contains) {\n      return context.contains(node);\n    } else if (context.compareDocumentPosition) {\n      return context === node || !!(context.compareDocumentPosition(node) & 16);\n    } else {\n      return fallback(context, node);\n    }\n  } : fallback;\n}();\n\nexports.default = _default;\n\nfunction fallback(context, node) {\n  if (node) do {\n    if (node === context) return true;\n  } while (node = node.parentNode);\n  return false;\n}\n\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9jb250YWlucy5qcz9lYjU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLElBQThDOztBQUVuRixrQkFBa0I7QUFDbEIsZUFBZTs7QUFFZixvQ0FBb0MsbUJBQU8sQ0FBQyxHQUFlOztBQUUzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVELGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTYyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUwgRE9NIGFuZCBTVkcgRE9NIG1heSBoYXZlIGRpZmZlcmVudCBzdXBwb3J0IGxldmVscyxcbiAgLy8gc28gd2UgbmVlZCB0byBjaGVjayBvbiBjb250ZXh0IGluc3RlYWQgb2YgYSBkb2N1bWVudCByb290IGVsZW1lbnQuXG4gIHJldHVybiBfaW5ET00uZGVmYXVsdCA/IGZ1bmN0aW9uIChjb250ZXh0LCBub2RlKSB7XG4gICAgaWYgKGNvbnRleHQuY29udGFpbnMpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbGxiYWNrKGNvbnRleHQsIG5vZGUpO1xuICAgIH1cbiAgfSA6IGZhbGxiYWNrO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZmFsbGJhY2soY29udGV4dCwgbm9kZSkge1xuICBpZiAobm9kZSkgZG8ge1xuICAgIGlmIChub2RlID09PSBjb250ZXh0KSByZXR1cm4gdHJ1ZTtcbiAgfSB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50Tm9kZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1629\n')},7624:function(module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.default = getWindow;\n\nfunction getWindow(node) {\n  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;\n}\n\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9pc1dpbmRvdy5qcz9mMThmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQjtBQUNsQixlQUFlOztBQUVmO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI3NjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRXaW5kb3c7XG5cbmZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIHJldHVybiBub2RlID09PSBub2RlLndpbmRvdyA/IG5vZGUgOiBub2RlLm5vZGVUeXBlID09PSA5ID8gbm9kZS5kZWZhdWx0VmlldyB8fCBub2RlLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7624\n')},2565:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = offset;\n\nvar _contains = _interopRequireDefault(__webpack_require__(1629));\n\nvar _isWindow = _interopRequireDefault(__webpack_require__(7624));\n\nvar _ownerDocument = _interopRequireDefault(__webpack_require__(9981));\n\nfunction offset(node) {\n  var doc = (0, _ownerDocument.default)(node),\n      win = (0, _isWindow.default)(doc),\n      docElem = doc && doc.documentElement,\n      box = {\n    top: 0,\n    left: 0,\n    height: 0,\n    width: 0\n  };\n  if (!doc) return; // Make sure it's not a disconnected DOM node\n\n  if (!(0, _contains.default)(docElem, node)) return box;\n  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect(); // IE8 getBoundingClientRect doesn't support width & height\n\n  box = {\n    top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),\n    left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),\n    width: (box.width == null ? node.offsetWidth : box.width) || 0,\n    height: (box.height == null ? node.offsetHeight : box.height) || 0\n  };\n  return box;\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXQuanM/MDNhZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyxJQUE4Qzs7QUFFbkYsa0JBQWtCO0FBQ2xCLGVBQWU7O0FBRWYsdUNBQXVDLG1CQUFPLENBQUMsSUFBWTs7QUFFM0QsdUNBQXVDLG1CQUFPLENBQUMsSUFBWTs7QUFFM0QsNENBQTRDLG1CQUFPLENBQUMsSUFBa0I7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBLG1GQUFtRjs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyNTY1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gb2Zmc2V0O1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb250YWluc1wiKSk7XG5cbnZhciBfaXNXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzV2luZG93XCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIG9mZnNldChub2RlKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobm9kZSksXG4gICAgICB3aW4gPSAoMCwgX2lzV2luZG93LmRlZmF1bHQpKGRvYyksXG4gICAgICBkb2NFbGVtID0gZG9jICYmIGRvYy5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBib3ggPSB7XG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHdpZHRoOiAwXG4gIH07XG4gIGlmICghZG9jKSByZXR1cm47IC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXG4gIGlmICghKDAsIF9jb250YWlucy5kZWZhdWx0KShkb2NFbGVtLCBub2RlKSkgcmV0dXJuIGJveDtcbiAgaWYgKG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSB1bmRlZmluZWQpIGJveCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIElFOCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZG9lc24ndCBzdXBwb3J0IHdpZHRoICYgaGVpZ2h0XG5cbiAgYm94ID0ge1xuICAgIHRvcDogYm94LnRvcCArICh3aW4ucGFnZVlPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxUb3ApIC0gKGRvY0VsZW0uY2xpZW50VG9wIHx8IDApLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgKHdpbi5wYWdlWE9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbExlZnQpIC0gKGRvY0VsZW0uY2xpZW50TGVmdCB8fCAwKSxcbiAgICB3aWR0aDogKGJveC53aWR0aCA9PSBudWxsID8gbm9kZS5vZmZzZXRXaWR0aCA6IGJveC53aWR0aCkgfHwgMCxcbiAgICBoZWlnaHQ6IChib3guaGVpZ2h0ID09IG51bGwgPyBub2RlLm9mZnNldEhlaWdodCA6IGJveC5oZWlnaHQpIHx8IDBcbiAgfTtcbiAgcmV0dXJuIGJveDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2565\n")},2939:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = offsetParent;\n\nvar _ownerDocument = _interopRequireDefault(__webpack_require__(9981));\n\nvar _style = _interopRequireDefault(__webpack_require__(162));\n\nfunction nodeName(node) {\n  return node.nodeName && node.nodeName.toLowerCase();\n}\n\nfunction offsetParent(node) {\n  var doc = (0, _ownerDocument.default)(node),\n      offsetParent = node && node.offsetParent;\n\n  while (offsetParent && nodeName(node) !== 'html' && (0, _style.default)(offsetParent, 'position') === 'static') {\n    offsetParent = offsetParent.offsetParent;\n  }\n\n  return offsetParent || doc.documentElement;\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9vZmZzZXRQYXJlbnQuanM/MDE3NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyxJQUE4Qzs7QUFFbkYsa0JBQWtCO0FBQ2xCLGVBQWU7O0FBRWYsNENBQTRDLG1CQUFPLENBQUMsSUFBa0I7O0FBRXRFLG9DQUFvQyxtQkFBTyxDQUFDLEdBQVU7O0FBRXREO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjkzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG9mZnNldFBhcmVudDtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vb3duZXJEb2N1bWVudFwiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZVwiKSk7XG5cbmZ1bmN0aW9uIG5vZGVOYW1lKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZU5hbWUgJiYgbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBvZmZzZXRQYXJlbnQobm9kZSkge1xuICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKG5vZGUpLFxuICAgICAgb2Zmc2V0UGFyZW50ID0gbm9kZSAmJiBub2RlLm9mZnNldFBhcmVudDtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIG5vZGVOYW1lKG5vZGUpICE9PSAnaHRtbCcgJiYgKDAsIF9zdHlsZS5kZWZhdWx0KShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2939\n")},7265:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = position;\n\nvar _extends2 = _interopRequireDefault(__webpack_require__(7154));\n\nvar _offset = _interopRequireDefault(__webpack_require__(2565));\n\nvar _offsetParent = _interopRequireDefault(__webpack_require__(2939));\n\nvar _scrollTop = _interopRequireDefault(__webpack_require__(504));\n\nvar _scrollLeft = _interopRequireDefault(__webpack_require__(5770));\n\nvar _style = _interopRequireDefault(__webpack_require__(162));\n\nfunction nodeName(node) {\n  return node.nodeName && node.nodeName.toLowerCase();\n}\n\nfunction position(node, offsetParent) {\n  var parentOffset = {\n    top: 0,\n    left: 0\n  },\n      offset; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n  // because it is its only offset parent\n\n  if ((0, _style.default)(node, 'position') === 'fixed') {\n    offset = node.getBoundingClientRect();\n  } else {\n    offsetParent = offsetParent || (0, _offsetParent.default)(node);\n    offset = (0, _offset.default)(node);\n    if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset.default)(offsetParent);\n    parentOffset.top += parseInt((0, _style.default)(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop.default)(offsetParent) || 0;\n    parentOffset.left += parseInt((0, _style.default)(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft.default)(offsetParent) || 0;\n  } // Subtract parent offsets and node margins\n\n\n  return (0, _extends2.default)({}, offset, {\n    top: offset.top - parentOffset.top - (parseInt((0, _style.default)(node, 'marginTop'), 10) || 0),\n    left: offset.left - parentOffset.left - (parseInt((0, _style.default)(node, 'marginLeft'), 10) || 0)\n  });\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9wb3NpdGlvbi5qcz83ZTk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLElBQThDOztBQUVuRixrQkFBa0I7QUFDbEIsZUFBZTs7QUFFZix1Q0FBdUMsbUJBQU8sQ0FBQyxJQUFnQzs7QUFFL0UscUNBQXFDLG1CQUFPLENBQUMsSUFBVTs7QUFFdkQsMkNBQTJDLG1CQUFPLENBQUMsSUFBZ0I7O0FBRW5FLHdDQUF3QyxtQkFBTyxDQUFDLEdBQWE7O0FBRTdELHlDQUF5QyxtQkFBTyxDQUFDLElBQWM7O0FBRS9ELG9DQUFvQyxtQkFBTyxDQUFDLEdBQVU7O0FBRXREO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxhQUFhLDJEQUEyRCxlQUFlO0FBQ3ZGOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdILGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6IjcyNjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBwb3NpdGlvbjtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2Zmc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vZmZzZXRcIikpO1xuXG52YXIgX29mZnNldFBhcmVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2Zmc2V0UGFyZW50XCIpKTtcblxudmFyIF9zY3JvbGxUb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Njcm9sbFRvcFwiKSk7XG5cbnZhciBfc2Nyb2xsTGVmdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2Nyb2xsTGVmdFwiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZVwiKSk7XG5cbmZ1bmN0aW9uIG5vZGVOYW1lKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZU5hbWUgJiYgbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvbihub2RlLCBvZmZzZXRQYXJlbnQpIHtcbiAgdmFyIHBhcmVudE9mZnNldCA9IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMFxuICB9LFxuICAgICAgb2Zmc2V0OyAvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuICAvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblxuICBpZiAoKDAsIF9zdHlsZS5kZWZhdWx0KShub2RlLCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIG9mZnNldCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50IHx8ICgwLCBfb2Zmc2V0UGFyZW50LmRlZmF1bHQpKG5vZGUpO1xuICAgIG9mZnNldCA9ICgwLCBfb2Zmc2V0LmRlZmF1bHQpKG5vZGUpO1xuICAgIGlmIChub2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnaHRtbCcpIHBhcmVudE9mZnNldCA9ICgwLCBfb2Zmc2V0LmRlZmF1bHQpKG9mZnNldFBhcmVudCk7XG4gICAgcGFyZW50T2Zmc2V0LnRvcCArPSBwYXJzZUludCgoMCwgX3N0eWxlLmRlZmF1bHQpKG9mZnNldFBhcmVudCwgJ2JvcmRlclRvcFdpZHRoJyksIDEwKSAtICgwLCBfc2Nyb2xsVG9wLmRlZmF1bHQpKG9mZnNldFBhcmVudCkgfHwgMDtcbiAgICBwYXJlbnRPZmZzZXQubGVmdCArPSBwYXJzZUludCgoMCwgX3N0eWxlLmRlZmF1bHQpKG9mZnNldFBhcmVudCwgJ2JvcmRlckxlZnRXaWR0aCcpLCAxMCkgLSAoMCwgX3Njcm9sbExlZnQuZGVmYXVsdCkob2Zmc2V0UGFyZW50KSB8fCAwO1xuICB9IC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBub2RlIG1hcmdpbnNcblxuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBvZmZzZXQsIHtcbiAgICB0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0gKHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgJ21hcmdpblRvcCcpLCAxMCkgfHwgMCksXG4gICAgbGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIChwYXJzZUludCgoMCwgX3N0eWxlLmRlZmF1bHQpKG5vZGUsICdtYXJnaW5MZWZ0JyksIDEwKSB8fCAwKVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7265\n")},5770:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = scrollTop;\n\nvar _isWindow = _interopRequireDefault(__webpack_require__(7624));\n\nfunction scrollTop(node, val) {\n  var win = (0, _isWindow.default)(node);\n  if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;\n  if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9zY3JvbGxMZWZ0LmpzP2ZhMmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNkJBQTZCLG1CQUFPLENBQUMsSUFBOEM7O0FBRW5GLGtCQUFrQjtBQUNsQixlQUFlOztBQUVmLHVDQUF1QyxtQkFBTyxDQUFDLElBQVk7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBLDhHQUE4RztBQUM5Rzs7QUFFQSIsImZpbGUiOiI1NzcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsVG9wO1xuXG52YXIgX2lzV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1dpbmRvd1wiKSk7XG5cbmZ1bmN0aW9uIHNjcm9sbFRvcChub2RlLCB2YWwpIHtcbiAgdmFyIHdpbiA9ICgwLCBfaXNXaW5kb3cuZGVmYXVsdCkobm9kZSk7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHdpbiA/ICdwYWdlWE9mZnNldCcgaW4gd2luID8gd2luLnBhZ2VYT2Zmc2V0IDogd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IDogbm9kZS5zY3JvbGxMZWZ0O1xuICBpZiAod2luKSB3aW4uc2Nyb2xsVG8odmFsLCAncGFnZVlPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWU9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKTtlbHNlIG5vZGUuc2Nyb2xsTGVmdCA9IHZhbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5770\n")},504:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = scrollTop;\n\nvar _isWindow = _interopRequireDefault(__webpack_require__(7624));\n\nfunction scrollTop(node, val) {\n  var win = (0, _isWindow.default)(node);\n  if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;\n  if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9zY3JvbGxUb3AuanM/NjVmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyxJQUE4Qzs7QUFFbkYsa0JBQWtCO0FBQ2xCLGVBQWU7O0FBRWYsdUNBQXVDLG1CQUFPLENBQUMsSUFBWTs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0EsK0dBQStHO0FBQy9HOztBQUVBIiwiZmlsZSI6IjUwNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbFRvcDtcblxudmFyIF9pc1dpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNXaW5kb3dcIikpO1xuXG5mdW5jdGlvbiBzY3JvbGxUb3Aobm9kZSwgdmFsKSB7XG4gIHZhciB3aW4gPSAoMCwgX2lzV2luZG93LmRlZmF1bHQpKG5vZGUpO1xuICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiB3aW4gPyAncGFnZVlPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWU9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDogbm9kZS5zY3JvbGxUb3A7XG4gIGlmICh3aW4pIHdpbi5zY3JvbGxUbygncGFnZVhPZmZzZXQnIGluIHdpbiA/IHdpbi5wYWdlWE9mZnNldCA6IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCwgdmFsKTtlbHNlIG5vZGUuc2Nyb2xsVG9wID0gdmFsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///504\n")},7023:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = _getComputedStyle;\n\nvar _camelizeStyle = _interopRequireDefault(__webpack_require__(3497));\n\nvar rposition = /^(top|right|bottom|left)$/;\nvar rnumnonpx = /^([+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|))(?!px)[a-z%]+$/i;\n\nfunction _getComputedStyle(node) {\n  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');\n  var doc = node.ownerDocument;\n  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : {\n    //ie 8 \"magic\" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72\n    getPropertyValue: function getPropertyValue(prop) {\n      var style = node.style;\n      prop = (0, _camelizeStyle.default)(prop);\n      if (prop == 'float') prop = 'styleFloat';\n      var current = node.currentStyle[prop] || null;\n      if (current == null && style && style[prop]) current = style[prop];\n\n      if (rnumnonpx.test(current) && !rposition.test(prop)) {\n        // Remember the original values\n        var left = style.left;\n        var runStyle = node.runtimeStyle;\n        var rsLeft = runStyle && runStyle.left; // Put in the new values to get a computed value out\n\n        if (rsLeft) runStyle.left = node.currentStyle.left;\n        style.left = prop === 'fontSize' ? '1em' : current;\n        current = style.pixelLeft + 'px'; // Revert the changed values\n\n        style.left = left;\n        if (rsLeft) runStyle.left = rsLeft;\n      }\n\n      return current;\n    }\n  };\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9nZXRDb21wdXRlZFN0eWxlLmpzPzFmNGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNkJBQTZCLG1CQUFPLENBQUMsSUFBOEM7O0FBRW5GLGtCQUFrQjtBQUNsQixlQUFlOztBQUVmLDRDQUE0QyxtQkFBTyxDQUFDLElBQXVCOztBQUUzRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7O0FBRS9DO0FBQ0E7QUFDQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI3MDIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2dldENvbXB1dGVkU3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBycG9zaXRpb24gPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XG52YXIgcm51bW5vbnB4ID0gL14oWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpKSg/IXB4KVthLXolXSskL2k7XG5cbmZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBFbGVtZW50IHBhc3NlZCB0byBgZ2V0Q29tcHV0ZWRTdHlsZSgpYCcpO1xuICB2YXIgZG9jID0gbm9kZS5vd25lckRvY3VtZW50O1xuICByZXR1cm4gJ2RlZmF1bHRWaWV3JyBpbiBkb2MgPyBkb2MuZGVmYXVsdFZpZXcub3BlbmVyID8gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKSA6IHtcbiAgICAvL2llIDggXCJtYWdpY1wiIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMS4xMS1zdGFibGUvc3JjL2Nzcy9jdXJDU1MuanMjTDcyXG4gICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShwcm9wKSB7XG4gICAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgICAgcHJvcCA9ICgwLCBfY2FtZWxpemVTdHlsZS5kZWZhdWx0KShwcm9wKTtcbiAgICAgIGlmIChwcm9wID09ICdmbG9hdCcpIHByb3AgPSAnc3R5bGVGbG9hdCc7XG4gICAgICB2YXIgY3VycmVudCA9IG5vZGUuY3VycmVudFN0eWxlW3Byb3BdIHx8IG51bGw7XG4gICAgICBpZiAoY3VycmVudCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlW3Byb3BdKSBjdXJyZW50ID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChybnVtbm9ucHgudGVzdChjdXJyZW50KSAmJiAhcnBvc2l0aW9uLnRlc3QocHJvcCkpIHtcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuICAgICAgICB2YXIgbGVmdCA9IHN0eWxlLmxlZnQ7XG4gICAgICAgIHZhciBydW5TdHlsZSA9IG5vZGUucnVudGltZVN0eWxlO1xuICAgICAgICB2YXIgcnNMZWZ0ID0gcnVuU3R5bGUgJiYgcnVuU3R5bGUubGVmdDsgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXG4gICAgICAgIGlmIChyc0xlZnQpIHJ1blN0eWxlLmxlZnQgPSBub2RlLmN1cnJlbnRTdHlsZS5sZWZ0O1xuICAgICAgICBzdHlsZS5sZWZ0ID0gcHJvcCA9PT0gJ2ZvbnRTaXplJyA/ICcxZW0nIDogY3VycmVudDtcbiAgICAgICAgY3VycmVudCA9IHN0eWxlLnBpeGVsTGVmdCArICdweCc7IC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblxuICAgICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICAgICAgaWYgKHJzTGVmdCkgcnVuU3R5bGUubGVmdCA9IHJzTGVmdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7023\n")},162:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = style;\n\nvar _camelizeStyle = _interopRequireDefault(__webpack_require__(3497));\n\nvar _hyphenateStyle = _interopRequireDefault(__webpack_require__(4403));\n\nvar _getComputedStyle2 = _interopRequireDefault(__webpack_require__(7023));\n\nvar _removeStyle = _interopRequireDefault(__webpack_require__(1760));\n\nvar _properties = __webpack_require__(702);\n\nvar _isTransform = _interopRequireDefault(__webpack_require__(3293));\n\nfunction style(node, property, value) {\n  var css = \'\';\n  var transforms = \'\';\n  var props = property;\n\n  if (typeof property === \'string\') {\n    if (value === undefined) {\n      return node.style[(0, _camelizeStyle.default)(property)] || (0, _getComputedStyle2.default)(node).getPropertyValue((0, _hyphenateStyle.default)(property));\n    } else {\n      (props = {})[property] = value;\n    }\n  }\n\n  Object.keys(props).forEach(function (key) {\n    var value = props[key];\n\n    if (!value && value !== 0) {\n      (0, _removeStyle.default)(node, (0, _hyphenateStyle.default)(key));\n    } else if ((0, _isTransform.default)(key)) {\n      transforms += key + "(" + value + ") ";\n    } else {\n      css += (0, _hyphenateStyle.default)(key) + ": " + value + ";";\n    }\n  });\n\n  if (transforms) {\n    css += _properties.transform + ": " + transforms + ";";\n  }\n\n  node.style.cssText += \';\' + css;\n}\n\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9pbmRleC5qcz9iMGFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLElBQThDOztBQUVuRixrQkFBa0I7QUFDbEIsZUFBZTs7QUFFZiw0Q0FBNEMsbUJBQU8sQ0FBQyxJQUF1Qjs7QUFFM0UsNkNBQTZDLG1CQUFPLENBQUMsSUFBd0I7O0FBRTdFLGdEQUFnRCxtQkFBTyxDQUFDLElBQW9COztBQUU1RSwwQ0FBMEMsbUJBQU8sQ0FBQyxJQUFlOztBQUVqRSxrQkFBa0IsbUJBQU8sQ0FBQyxHQUEwQjs7QUFFcEQsMENBQTBDLG1CQUFPLENBQUMsSUFBMkI7O0FBRTdFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0wsa0VBQWtFO0FBQ2xFO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQSwwQkFBMEI7QUFDMUI7O0FBRUEiLCJmaWxlIjoiMTYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2h5cGhlbmF0ZVN0eWxlXCIpKTtcblxudmFyIF9nZXRDb21wdXRlZFN0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0Q29tcHV0ZWRTdHlsZVwiKSk7XG5cbnZhciBfcmVtb3ZlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbW92ZVN0eWxlXCIpKTtcblxudmFyIF9wcm9wZXJ0aWVzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb24vcHJvcGVydGllc1wiKTtcblxudmFyIF9pc1RyYW5zZm9ybSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RyYW5zaXRpb24vaXNUcmFuc2Zvcm1cIikpO1xuXG5mdW5jdGlvbiBzdHlsZShub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuICB2YXIgcHJvcHMgPSBwcm9wZXJ0eTtcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZS5zdHlsZVsoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpXSB8fCAoMCwgX2dldENvbXB1dGVkU3R5bGUyLmRlZmF1bHQpKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoKDAsIF9oeXBoZW5hdGVTdHlsZS5kZWZhdWx0KShwcm9wZXJ0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAocHJvcHMgPSB7fSlbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BzW2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAoMCwgX3JlbW92ZVN0eWxlLmRlZmF1bHQpKG5vZGUsICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzVHJhbnNmb3JtLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9ICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSArIFwiOiBcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgfVxuICB9KTtcblxuICBpZiAodHJhbnNmb3Jtcykge1xuICAgIGNzcyArPSBfcHJvcGVydGllcy50cmFuc2Zvcm0gKyBcIjogXCIgKyB0cmFuc2Zvcm1zICsgXCI7XCI7XG4gIH1cblxuICBub2RlLnN0eWxlLmNzc1RleHQgKz0gJzsnICsgY3NzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///162\n')},1760:function(module,exports){"use strict";eval("\n\nexports.__esModule = true;\nexports.default = removeStyle;\n\nfunction removeStyle(node, key) {\n  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9yZW1vdmVTdHlsZS5qcz82YjhkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQjtBQUNsQixlQUFlOztBQUVmO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxNzYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVTdHlsZTtcblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGUobm9kZSwga2V5KSB7XG4gIHJldHVybiAncmVtb3ZlUHJvcGVydHknIGluIG5vZGUuc3R5bGUgPyBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSkgOiBub2RlLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1760\n")},3293:function(module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.default = isTransform;\nvar supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;\n\nfunction isTransform(property) {\n  return !!(property && supportedTransforms.test(property));\n}\n\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2lzVHJhbnNmb3JtLmpzPzNiZGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMzI5My5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNUcmFuc2Zvcm07XG52YXIgc3VwcG9ydGVkVHJhbnNmb3JtcyA9IC9eKCh0cmFuc2xhdGV8cm90YXRlfHNjYWxlKShYfFl8WnwzZCk/fG1hdHJpeCgzZCk/fHBlcnNwZWN0aXZlfHNrZXcoWHxZKT8pJC9pO1xuXG5mdW5jdGlvbiBpc1RyYW5zZm9ybShwcm9wZXJ0eSkge1xuICByZXR1cm4gISEocHJvcGVydHkgJiYgc3VwcG9ydGVkVHJhbnNmb3Jtcy50ZXN0KHByb3BlcnR5KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3293\n')},702:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = void 0;\n\nvar _inDOM = _interopRequireDefault(__webpack_require__(139));\n\nvar transform = \'transform\';\nexports.transform = transform;\nvar prefix, transitionEnd, animationEnd;\nexports.animationEnd = animationEnd;\nexports.transitionEnd = transitionEnd;\nvar transitionProperty, transitionDuration, transitionTiming, transitionDelay;\nexports.transitionDelay = transitionDelay;\nexports.transitionTiming = transitionTiming;\nexports.transitionDuration = transitionDuration;\nexports.transitionProperty = transitionProperty;\nvar animationName, animationDuration, animationTiming, animationDelay;\nexports.animationDelay = animationDelay;\nexports.animationTiming = animationTiming;\nexports.animationDuration = animationDuration;\nexports.animationName = animationName;\n\nif (_inDOM.default) {\n  var _getTransitionPropert = getTransitionProperties();\n\n  prefix = _getTransitionPropert.prefix;\n  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;\n  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;\n  exports.transform = transform = prefix + "-" + transform;\n  exports.transitionProperty = transitionProperty = prefix + "-transition-property";\n  exports.transitionDuration = transitionDuration = prefix + "-transition-duration";\n  exports.transitionDelay = transitionDelay = prefix + "-transition-delay";\n  exports.transitionTiming = transitionTiming = prefix + "-transition-timing-function";\n  exports.animationName = animationName = prefix + "-animation-name";\n  exports.animationDuration = animationDuration = prefix + "-animation-duration";\n  exports.animationTiming = animationTiming = prefix + "-animation-delay";\n  exports.animationDelay = animationDelay = prefix + "-animation-timing-function";\n}\n\nvar _default = {\n  transform: transform,\n  end: transitionEnd,\n  property: transitionProperty,\n  timing: transitionTiming,\n  delay: transitionDelay,\n  duration: transitionDuration\n};\nexports.default = _default;\n\nfunction getTransitionProperties() {\n  var style = document.createElement(\'div\').style;\n  var vendorMap = {\n    O: function O(e) {\n      return "o" + e.toLowerCase();\n    },\n    Moz: function Moz(e) {\n      return e.toLowerCase();\n    },\n    Webkit: function Webkit(e) {\n      return "webkit" + e;\n    },\n    ms: function ms(e) {\n      return "MS" + e;\n    }\n  };\n  var vendors = Object.keys(vendorMap);\n  var transitionEnd, animationEnd;\n  var prefix = \'\';\n\n  for (var i = 0; i < vendors.length; i++) {\n    var vendor = vendors[i];\n\n    if (vendor + "TransitionProperty" in style) {\n      prefix = "-" + vendor.toLowerCase();\n      transitionEnd = vendorMap[vendor](\'TransitionEnd\');\n      animationEnd = vendorMap[vendor](\'AnimationEnd\');\n      break;\n    }\n  }\n\n  if (!transitionEnd && \'transitionProperty\' in style) transitionEnd = \'transitionend\';\n  if (!animationEnd && \'animationName\' in style) animationEnd = \'animationend\';\n  style = null;\n  return {\n    animationEnd: animationEnd,\n    transitionEnd: transitionEnd,\n    prefix: prefix\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMuanM/YzU0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyxJQUE4Qzs7QUFFbkYsa0JBQWtCO0FBQ2xCLGVBQWUsR0FBRyxvQkFBb0IsR0FBRyxzQkFBc0IsR0FBRyx1QkFBdUIsR0FBRyx5QkFBeUIsR0FBRyxxQkFBcUIsR0FBRyxxQkFBcUIsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRywwQkFBMEIsR0FBRyxpQkFBaUI7O0FBRXhTLG9DQUFvQyxtQkFBTyxDQUFDLEdBQWU7O0FBRTNEO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esb0JBQW9CO0FBQ3BCLHFCQUFxQjtBQUNyQjtBQUNBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQjtBQUNBLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkIseUJBQXlCO0FBQ3pCLHFCQUFxQjs7QUFFckI7QUFDQTs7QUFFQTtBQUNBLEVBQUUscUJBQXFCO0FBQ3ZCLEVBQUUsb0JBQW9CO0FBQ3RCLEVBQUUsaUJBQWlCO0FBQ25CLEVBQUUsMEJBQTBCO0FBQzVCLEVBQUUsMEJBQTBCO0FBQzVCLEVBQUUsdUJBQXVCO0FBQ3pCLEVBQUUsd0JBQXdCO0FBQzFCLEVBQUUscUJBQXFCO0FBQ3ZCLEVBQUUseUJBQXlCO0FBQzNCLEVBQUUsdUJBQXVCO0FBQ3pCLEVBQUUsc0JBQXNCO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixvQkFBb0I7QUFDckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjcwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IGV4cG9ydHMudHJhbnNmb3JtID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciB0cmFuc2Zvcm0gPSAndHJhbnNmb3JtJztcbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xudmFyIHByZWZpeCwgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kO1xuZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQ7XG5leHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kO1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSwgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uVGltaW5nLCB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheTtcbmV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmc7XG5leHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbmV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5O1xudmFyIGFuaW1hdGlvbk5hbWUsIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25UaW1pbmcsIGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmc7XG5leHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb247XG5leHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lO1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcGVydCA9IGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCk7XG5cbiAgcHJlZml4ID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnByZWZpeDtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC50cmFuc2l0aW9uRW5kO1xuICBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5hbmltYXRpb25FbmQ7XG4gIGV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtID0gcHJlZml4ICsgXCItXCIgKyB0cmFuc2Zvcm07XG4gIGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5ID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1wcm9wZXJ0eVwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbiA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tZHVyYXRpb25cIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmcgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblwiO1xuICBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLW5hbWVcIjtcbiAgZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWR1cmF0aW9uXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheSA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIjtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgZW5kOiB0cmFuc2l0aW9uRW5kLFxuICBwcm9wZXJ0eTogdHJhbnNpdGlvblByb3BlcnR5LFxuICB0aW1pbmc6IHRyYW5zaXRpb25UaW1pbmcsXG4gIGRlbGF5OiB0cmFuc2l0aW9uRGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICB2YXIgdmVuZG9yTWFwID0ge1xuICAgIE86IGZ1bmN0aW9uIE8oZSkge1xuICAgICAgcmV0dXJuIFwib1wiICsgZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgTW96OiBmdW5jdGlvbiBNb3ooZSkge1xuICAgICAgcmV0dXJuIGUudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICAgIFdlYmtpdDogZnVuY3Rpb24gV2Via2l0KGUpIHtcbiAgICAgIHJldHVybiBcIndlYmtpdFwiICsgZTtcbiAgICB9LFxuICAgIG1zOiBmdW5jdGlvbiBtcyhlKSB7XG4gICAgICByZXR1cm4gXCJNU1wiICsgZTtcbiAgICB9XG4gIH07XG4gIHZhciB2ZW5kb3JzID0gT2JqZWN0LmtleXModmVuZG9yTWFwKTtcbiAgdmFyIHRyYW5zaXRpb25FbmQsIGFuaW1hdGlvbkVuZDtcbiAgdmFyIHByZWZpeCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG4gICAgaWYgKHZlbmRvciArIFwiVHJhbnNpdGlvblByb3BlcnR5XCIgaW4gc3R5bGUpIHtcbiAgICAgIHByZWZpeCA9IFwiLVwiICsgdmVuZG9yLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0cmFuc2l0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ1RyYW5zaXRpb25FbmQnKTtcbiAgICAgIGFuaW1hdGlvbkVuZCA9IHZlbmRvck1hcFt2ZW5kb3JdKCdBbmltYXRpb25FbmQnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdHJhbnNpdGlvbkVuZCAmJiAndHJhbnNpdGlvblByb3BlcnR5JyBpbiBzdHlsZSkgdHJhbnNpdGlvbkVuZCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgaWYgKCFhbmltYXRpb25FbmQgJiYgJ2FuaW1hdGlvbk5hbWUnIGluIHN0eWxlKSBhbmltYXRpb25FbmQgPSAnYW5pbWF0aW9uZW5kJztcbiAgc3R5bGUgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGFuaW1hdGlvbkVuZDogYW5pbWF0aW9uRW5kLFxuICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQsXG4gICAgcHJlZml4OiBwcmVmaXhcbiAgfTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///702\n')},1908:function(module,exports){"use strict";eval('\n\nexports.__esModule = true;\nexports.default = camelize;\nvar rHyphen = /-(.)/g;\n\nfunction camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}\n\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2NhbWVsaXplLmpzPzBkOWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJmaWxlIjoiMTkwOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxpemU7XG52YXIgckh5cGhlbiA9IC8tKC4pL2c7XG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uockh5cGhlbiwgZnVuY3Rpb24gKF8sIGNocikge1xuICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1908\n')},3497:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = camelizeStyleName;\n\nvar _camelize = _interopRequireDefault(__webpack_require__(1908));\n\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js\n */\nvar msPattern = /^-ms-/;\n\nfunction camelizeStyleName(string) {\n  return (0, _camelize.default)(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2NhbWVsaXplU3R5bGUuanM/ZjUyMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyxJQUE4Qzs7QUFFbkYsa0JBQWtCO0FBQ2xCLGVBQWU7O0FBRWYsdUNBQXVDLG1CQUFPLENBQUMsSUFBWTs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIzNDk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxpemVTdHlsZU5hbWU7XG5cbnZhciBfY2FtZWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NhbWVsaXplXCIpKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzJhZWI4YTJhNmJlYjAwNjE3YTQyMTdmN2Y4Mjg0OTI0ZmEyYWQ4MTkvc3JjL3ZlbmRvci9jb3JlL2NhbWVsaXplU3R5bGVOYW1lLmpzXG4gKi9cbnZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuICgwLCBfY2FtZWxpemUuZGVmYXVsdCkoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3497\n")},1185:function(module,exports){"use strict";eval("\n\nexports.__esModule = true;\nexports.default = hyphenate;\nvar rUpper = /([A-Z])/g;\n\nfunction hyphenate(string) {\n  return string.replace(rUpper, '-$1').toLowerCase();\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2h5cGhlbmF0ZS5qcz9kODM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQjtBQUNsQixlQUFlO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjExODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZTtcbnZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShyVXBwZXIsICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1185\n")},4403:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(5318);\n\nexports.__esModule = true;\nexports.default = hyphenateStyleName;\n\nvar _hyphenate = _interopRequireDefault(__webpack_require__(1185));\n\n/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js\n */\nvar msPattern = /^ms-/;\n\nfunction hyphenateStyleName(string) {\n  return (0, _hyphenate.default)(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2h5cGhlbmF0ZVN0eWxlLmpzPzVmZDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNkJBQTZCLG1CQUFPLENBQUMsSUFBOEM7O0FBRW5GLGtCQUFrQjtBQUNsQixlQUFlOztBQUVmLHdDQUF3QyxtQkFBTyxDQUFDLElBQWE7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiNDQwMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxudmFyIF9oeXBoZW5hdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGUuZGVmYXVsdCkoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4403\n")},139:function(module,exports){"use strict";eval("\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2luRE9NLmpzPzA2OWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCO0FBQ2xCLGVBQWU7O0FBRWY7O0FBRUEsZUFBZTtBQUNmIiwiZmlsZSI6IjEzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///139\n")},8875:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2015 Jed Watson.\n  Based on code that is Copyright 2013-2015, Facebook, Inc.\n  All rights reserved.\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar canUseDOM = !!(\n\t\ttypeof window !== 'undefined' &&\n\t\twindow.document &&\n\t\twindow.document.createElement\n\t);\n\n\tvar ExecutionEnvironment = {\n\n\t\tcanUseDOM: canUseDOM,\n\n\t\tcanUseWorkers: typeof Worker !== 'undefined',\n\n\t\tcanUseEventListeners:\n\t\t\tcanUseDOM && !!(window.addEventListener || window.attachEvent),\n\n\t\tcanUseViewport: canUseDOM && !!window.screen\n\n\t};\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn ExecutionEnvironment;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9leGVudi9pbmRleC5qcz9kYWIzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxLQUFLLElBQTRFO0FBQ2pGLEVBQUUsbUNBQU87QUFDVDtBQUNBLEdBQUc7QUFBQSxrR0FBQztBQUNKLEVBQUUsTUFBTSxFQUlOOztBQUVGLENBQUMiLCJmaWxlIjoiODg3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTUgSmVkIFdhdHNvbi5cbiAgQmFzZWQgb24gY29kZSB0aGF0IGlzIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGNhblVzZURPTSA9ICEhKFxuXHRcdHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0d2luZG93LmRvY3VtZW50ICYmXG5cdFx0d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcblx0KTtcblxuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cblx0XHRjYW5Vc2VET006IGNhblVzZURPTSxcblxuXHRcdGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG5cdFx0Y2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG5cdFx0XHRjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuXHRcdGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuXG5cblx0fTtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5FeGVjdXRpb25FbnZpcm9ubWVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9XG5cbn0oKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8875\n")},5352:function(){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL2FwcC9wYWdlcy9uYXZpZ2F0aW9uL3N0eWxlcy9uYXZpZ2F0aW9uLmRlc2t0b3Auc2Nzcz8xMzEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjUzNTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5352\n")},3935:function(module,__unused_webpack_exports,__webpack_require__){"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(4448);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanM/OGJjOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxLQUFxQyxFQUFFLEVBUzFDO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxJQUFxQztBQUN6QztBQUNBO0FBQ0E7QUFDQSxFQUFFLDBDQUE2RDtBQUMvRCxDQUFDLE1BQU0sRUFFTiIsImZpbGUiOiIzOTM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3935\n")},7294:function(module,__unused_webpack_exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(2408);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pdGVtcy1saXN0cy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcz9hYjViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSwwQ0FBeUQ7QUFDM0QsQ0FBQyxNQUFNLEVBRU4iLCJmaWxlIjoiNzI5NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7294\n")}},__webpack_module_cache__={},deferred;function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var I=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(I.exports,I,I.exports,__webpack_require__),I.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=function(e,n,I,t){if(!n){var g=1/0;for(b=0;b<deferred.length;b++){n=deferred[b][0],I=deferred[b][1],t=deferred[b][2];for(var c=!0,l=0;l<n.length;l++)(!1&t||g>=t)&&Object.keys(__webpack_require__.O).every((function(e){return __webpack_require__.O[e](n[l])}))?n.splice(l--,1):(c=!1,t<g&&(g=t));if(c){deferred.splice(b--,1);var i=I();void 0!==i&&(e=i)}}return e}t=t||0;for(var b=deferred.length;b>0&&deferred[b-1][2]>t;b--)deferred[b]=deferred[b-1];deferred[b]=[n,I,t]},__webpack_require__.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=function(e,n){for(var I in n)__webpack_require__.o(n,I)&&!__webpack_require__.o(e,I)&&Object.defineProperty(e,I,{enumerable:!0,get:n[I]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e={670:0};__webpack_require__.O.j=function(n){return 0===e[n]};var n=function(n,I){var t,g,c=I[0],l=I[1],i=I[2],b=0;for(t in l)__webpack_require__.o(l,t)&&(__webpack_require__.m[t]=l[t]);if(i)var C=i(__webpack_require__);for(n&&n(I);b<c.length;b++)g=c[b],__webpack_require__.o(e,g)&&e[g]&&e[g][0](),e[c[b]]=0;return __webpack_require__.O(C)},I=self.__LOADABLE_LOADED_CHUNKS__=self.__LOADABLE_LOADED_CHUNKS__||[];I.forEach(n.bind(null,0)),I.push=n.bind(null,I.push.bind(I))}();var __webpack_exports__=__webpack_require__.O(void 0,[736],(function(){return __webpack_require__(203)}));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();
//# sourceMappingURL=//http2.mlstatic.com/frontend-assets/items-lists-frontend/navigation.desktop.e699afff.js.map